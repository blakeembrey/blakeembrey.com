<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Blake Embrey</title>
        <link>http://blakeembrey.com</link>
        <description>A personally curated collection of words hosted in cyberspace for some indeterminate duration.</description>
        <lastBuildDate>Tue, 30 May 2017 19:31:03 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <copyright>Copyright 2017 Blake Embrey</copyright>
        <item>
            <title><![CDATA[My Week in Review (2017-05-30)]]></title>
            <link>http://blakeembrey.com/self/2017-05-30-review/</link>
            <guid>http://blakeembrey.com/self/2017-05-30-review/</guid>
            <pubDate>Tue, 30 May 2017 19:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>What Happened?</h2>
<ul>
<li>Read around 43 articles</li>
<li>Started work on a new software project</li>
<li>Finished <a href="https://trakt.tv/shows/arrow/seasons/5">Arrow</a> and <a href="https://trakt.tv/shows/the-flash-2014/seasons/3">Flash</a> and <a href="https://trakt.tv/shows/supergirl/seasons/2">Supergirl</a></li>
</ul>
<h2>Internet</h2>
<ul>
<li>Video
<ul>
<li><a href="https://www.youtube.com/watch?v=KlekeNwOGHw">How to Think About PR - CS183F</a></li>
<li><a href="https://www.youtube.com/watch?v=IFe9wiDfb0E">Welcome to Life: the singularity, ruined by lawyers</a></li>
<li><a href="https://www.youtube.com/watch?v=OcPqk-O-fD4">Danger: Humans</a></li>
<li><a href="https://www.youtube.com/watch?v=RIuf1V1FhpY">Oversight: Thank you for volunteering, citizen.</a></li>
</ul>
</li>
<li>Useful
<ul>
<li><a href="https://www.theatlantic.com/magazine/archive/2017/01/how-to-sleep/508781/">How to Sleep</a></li>
<li><a href="https://www.technologyreview.com/s/607938/google-now-tracks-your-credit-card-purchases-and-connects-them-to-its-online-profile-of-you/">Google now tracks your credit card purchases and connects them to its online profile of you</a></li>
<li><a href="https://www.youneedabudget.com/personal-budgeting-definitions-come-and-get-em/">Personal Budgeting Definitions—Come And Get ‘Em!</a></li>
<li><a href="http://www.businessinsider.com/financial-planner-explains-how-to-set-yourself-up-to-retire-at-50-2017-5">A financial planner explains how to set yourself up to retire at 50, in 7 steps</a></li>
<li><a href="https://qz.com/968101/how-elon-musk-learns-faster-and-better-than-everyone-else/">How Elon Musk learns faster and better than everyone else</a></li>
</ul>
</li>
<li>Interesting
<ul>
<li><a href="http://www.lowtechmagazine.com/2017/05/could-we-run-modern-society-on-human-power-alone.html">Could We Run Modern Society on Human Power Alone?</a></li>
<li><a href="https://www.justinobeirne.com/a-year-of-google-maps-and-apple-maps/">A Year of Google Maps &amp; Apple Maps</a></li>
<li><a href="https://medium.com/@balajis/thoughts-on-tokens-436109aabcbe">Thoughts on Tokens</a></li>
<li><a href="http://wealthyaccountant.com/2017/05/26/losing-touch-with-reality/">Losing Touch with Reality</a></li>
<li><a href="https://krebsonsecurity.com/2017/05/private-eye-allegedly-used-leaky-goverment-tool-in-bid-to-find-tax-data-on-trump/">Private Eye Allegedly Used Leaky Goverment Tool in Bid to Find Tax Data on Trump</a></li>
<li><a href="https://aeon.co/ideas/one-extraordinary-scientist-and-the-story-of-space">Space exploration is still the brightest hope-bringer we have</a></li>
<li><a href="https://motherboard.vice.com/en_us/article/hackers-unlock-samsung-galaxy-s8-with-fake-iris">Hackers Unlock Samsung Galaxy S8 With Fake Iris</a></li>
<li><a href="https://krebsonsecurity.com/2017/05/trumps-dumps-making-dumps-great-again/">Trump’s Dumps: ‘Making Dumps Great Again’</a></li>
<li><a href="http://estebankolsky.com/2017/05/knowledge-summary-the-next-decade-in-digital-transformation/">Knowledge Summary: The Next Decade in Digital Transformation</a></li>
<li><a href="http://estebankolsky.com/2010/03/the-problem-with-knowledge/">The Problem with Knowledge</a></li>
<li><a href="http://estebankolsky.com/2017/05/article-memory-is-the-barrier-between-computers-and-humans/">Article: Memory is the Barrier Between Computers and Humans</a></li>
<li><a href="https://priceonomics.com/which-companies-have-the-highest-revenue-per/">Which Companies Have the Highest Revenue Per Employee?</a></li>
<li><a href="https://en.wikipedia.org/wiki/DIKW_pyramid">DIKW pyramid</a></li>
</ul>
</li>
<li>Opinion
<ul>
<li><a href="http://www.politico.com/story/2017/05/15/donald-trump-fake-news-238379">How Trump gets his fake news</a></li>
<li><a href="https://www.technologyreview.com/s/607966/the-uk-pleads-with-congress-to-change-an-outdated-privacy-law-to-help-fight-terrorism/">The U.K. Pleads with Congress to change an outdated privacy law to help fight terrorism</a></li>
<li><a href="http://www.theatlantic.com/science/archive/2016/07/the-turtle-shell-first-evolved-for-digging-not-defence/491087/">Why Turtles Evolved Shells: It Wasn’t for Protection</a></li>
<li><a href="http://sethgodin.typepad.com/seths_blog/2017/05/predicting-or-inventing.html">Seth’s Blog: Predicting or inventing…</a></li>
<li><a href="http://mashable.com/2017/05/27/hidden-meaning-rose-emoji-dsa/">The movement behind the rose emoji that you probably don’t know about</a></li>
<li><a href="https://daringfireball.net/2017/05/safari_vs_chrome_on_the_mac">Daring Fireball: Safari vs. Chrome on the Mac</a></li>
<li><a href="https://daringfireball.net/linked/2017/05/24/annals-of-anal">Daring Fireball: From the Annals of Anal</a></li>
<li><a href="https://daringfireball.net/linked/2017/05/29/russian-amp-phishing">Daring Fireball: Russian Hackers Are Using Google’s Own Infrastructure to Hack Gmail Users</a></li>
<li><a href="https://daringfireball.net/linked/2017/05/29/homer-at-the-bat">Daring Fireball: Cooperstown Celebrates 25th Anniversary of ‘Homer at the Bat’</a></li>
<li><a href="http://sethgodin.typepad.com/seths_blog/2017/05/in-search-of-familiarity.html">Seth’s Blog: In search of familiarity</a></li>
<li><a href="https://www.privateinternetaccess.com/blog/2017/05/google-now-also-tracks-and-collects-your-offline-credit-card-purchases/">Google now tracks and collects your OFFLINE credit card purchases</a></li>
</ul>
</li>
<li>Software
<ul>
<li><a href="https://blog.agilebits.com/2017/05/18/introducing-travel-mode-protect-your-data-when-crossing-borders/">Introducing Travel Mode: Protect your data when crossing borders</a></li>
<li><a href="https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/">Stack Overflow: Helping One Million Developers Exit Vim</a></li>
<li><a href="https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660">A Unified Styling Language</a></li>
<li><a href="http://felixge.de/2017/05/05/postgresql-operations-that-you-cant-explain.html">PostgreSQL operations that you can’t EXPLAIN</a></li>
<li><a href="https://swizec.com/blog/immutable-data/swizec/7613">Do you really need immutable data?</a></li>
<li><a href="https://neo4j.com/blog/graphql-neo4j-graph-database-integration/">GraphQL Meets Graph Database: A GraphQL + Neo4j Integration</a></li>
<li><a href="https://8thlight.com/blog/becca-nelson/2017/05/22/two-design-patterns-youre-probably-already-using.html">Two Design Patterns You’re Probably Already Using</a></li>
<li><a href="https://8thlight.com/blog/uncle-bob/2012/02/01/Service-Oriented-Agony.html">Service Oriented Agony</a></li>
<li><a href="https://8thlight.com/blog/uncle-bob/2012/05/15/NODB.html">NO DB</a></li>
<li><a href="https://blogs.msdn.microsoft.com/bharry/2017/05/24/the-largest-git-repo-on-the-planet/">The largest Git repo on the planet</a></li>
</ul>
</li>
</ul>
<h2>Reading</h2>
<ul>
<li><a href="https://www.goodreads.com/book/show/29579.Foundation">Foundation</a></li>
<li><a href="https://www.goodreads.com/book/show/11468377-thinking-fast-and-slow">Thinking Fast and Slow</a> (audiobook)</li>
</ul>
]]></content:encoded>
            <author>hello@blakeembrey.com (Blake Embrey)</author>
        </item>
        <item>
            <title><![CDATA[My Week in Review (2017-05-22)]]></title>
            <link>http://blakeembrey.com/self/2017-05-22-review/</link>
            <guid>http://blakeembrey.com/self/2017-05-22-review/</guid>
            <pubDate>Mon, 22 May 2017 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>What Happened?</h2>
<ul>
<li>Read around 38 articles</li>
<li>First official week of <a href="http://www.recess-labs.com/">Recess Labs</a> over</li>
<li>Made some <a href="https://www.instagram.com/p/BUZTNUsjUZB/">jewellery</a></li>
<li><a href="https://www.instagram.com/p/BUWlANGjR21/">Sleep No More</a></li>
<li>Went on a short NYC Subway Tour</li>
<li>Watched <a href="https://trakt.tv/movies/a-beautiful-mind-2001">A Beautiful Mind</a> (again)</li>
<li>Watched <a href="https://trakt.tv/search?query=marvel+one-shot">Marvel’s One-Shots</a>, last episode of <a href="https://trakt.tv/shows/marvel-s-agents-of-s-h-i-e-l-d/seasons/4/episodes/22">Agents of S.H.I.E.L.D.</a>, latest <a href="https://trakt.tv/shows/arrow/seasons/5/episodes/21">Arrow</a> and <a href="https://trakt.tv/shows/the-flash-2014/seasons/3/episodes/21">Flash</a>, plus <a href="https://trakt.tv/movies/dave-chappelle-the-age-of-spin-2017">Dave Chappelle</a> and <a href="https://trakt.tv/movies/ali-wong-baby-cobra-2016">Ali Wong</a> (wow, that’s a bit)</li>
</ul>
<h2>Internet</h2>
<ul>
<li>Video
<ul>
<li><a href="https://www.youtube.com/watch?v=sKoYmnTfSu4">Flight of the Conchords Band Meeting 8 Yoko</a></li>
<li><a href="https://www.youtube.com/watch?v=_6pl5GG8RQ4">How to Find Product Market Fit - CS183F</a></li>
<li><a href="https://www.ted.com/talks/wendy_troxel_why_school_should_start_later_for_teens">Why school should start later for teens</a></li>
<li><a href="https://www.youtube.com/watch?v=EMQd-AYb1fs">Calling Bullshit 2.4: Fermi Estimation</a></li>
<li><a href="http://a16z.com/2016/06/10/ai-deep-learning-machines/">AI, Deep Learning, and Machine Learning: A Primer</a></li>
</ul>
</li>
<li>Opinion
<ul>
<li><a href="https://www.nytimes.com/2017/05/15/opinion/trump-classified-data.html">When the World Is Led by a Child</a></li>
<li><a href="https://www.linkedin.com/pulse/scrum-makes-you-dumb-daniel-jones">Scrum makes you dumb</a></li>
<li><a href="https://daringfireball.net/linked/2017/05/20/macstories-ios-11-concept">Daring Fireball: MacStories’s iOS 11 iPad Wishes and Concept Video</a> - love concept videos, this one is no exception</li>
<li><a href="https://daringfireball.net/linked/2017/05/20/open-letter-apple-glucose">Daring Fireball: 10-Year-Old Open Letter Calling for Apple to Make Glucose Monitors</a></li>
<li><a href="https://daringfireball.net/linked/2017/05/20/gilbertson-amp">Daring Fireball: Scott Gilbertson: ‘Kill Google AMP Before It Kills the Web’</a></li>
<li><a href="https://daringfireball.net/linked/2017/05/20/global-seed-vault">Daring Fireball: Arctic Stronghold of World’s Seeds Flooded After Permafrost Melts</a></li>
<li><a href="http://herdingcats.typepad.com/my_weblog/2017/05/quote-of-the-day-4.html">Quote of the Day</a></li>
<li><a href="https://www.theatlantic.com/politics/archive/2017/05/all-the-kings-men/526980/">The Trump Presidency Falls Apart</a></li>
</ul>
</li>
<li>Interesting
<ul>
<li><a href="https://marco.org/2017/05/15/mp3-isnt-dead">“MP3 is dead” missed the real, much better story</a></li>
<li><a href="https://mic.com/articles/177195/these-three-pictures-make-a-powerful-statement-about-race-and-power-among-women">This photo series makes a powerful statement about race and power among women</a></li>
<li><a href="https://blog.gyrosco.pe/brian-tramuel-running-around-the-world-74b2fa839cd9?gi=da44b99501e6">Brian Tramuel: Running around the world</a></li>
<li><a href="https://www.schneier.com/blog/archives/2017/05/nsa_abandons_ab.html">NSA Abandons “About” Searches - Schneier on Security</a></li>
<li><a href="https://www.privateinternetaccess.com/blog/2017/05/theresa-may-outlines-tory-plan-create-new-censored-internet-controlled-uk-government/">Theresa May outlines Tory plan to create new, censored Internet controlled by UK government</a></li>
<li><a href="https://www.schneier.com/blog/archives/2017/05/wannacry_ransom.html">WannaCry Ransomware</a></li>
<li><a href="https://www.privateinternetaccess.com/blog/2017/05/what-do-you-do-when-you-realize-your-government-has-blocked-you-for-wrongthink/">What do you do when your government blocks you for Wrongthink?</a></li>
<li><a href="https://www.youneedabudget.com/you-dont-have-to-be-a-genius-to-invest-like-a-pro/">You Don’t Have to Be a Genius to Invest Like a Pro</a></li>
<li><a href="https://www.vox.com/policy-and-politics/2017/5/18/15654958/trump-immigration-arrests">The Trump administration is arresting over 100 immigrants without criminal records a day</a></li>
<li><a href="https://www.ncsc.gov.uk/blog-post/let-them-paste-passwords">Let them paste passwords</a></li>
<li><a href="https://wiki.mozilla.org/Context_Graph">Context Graph</a></li>
<li><a href="https://medium.com/firefox-context-graph/context-graph-its-time-to-bring-context-back-to-the-web-a7542fe45cf3">Context Graph: It’s time to bring context back to the web</a></li>
<li><a href="https://medium.com/@peterarmstrong/versioned-writing-e8b08920de4f">Versioned Writing – Peter Armstrong</a></li>
<li><a href="https://en.wikipedia.org/wiki/Buffalo_buffalo_Buffalo_buffalo_buffalo_buffalo_Buffalo_buffalo">Buffalo buffalo Buffalo buffalo buffalo buffalo Buffalo buffalo</a></li>
</ul>
</li>
<li>Useful
<ul>
<li><a href="https://praxis.fortelabs.co/how-to-use-evernote-for-your-creative-workflow-f048f0aa3ed1">How to Use Evernote for Your Creative Workflow</a></li>
<li><a href="https://sivers.org/2do">“Just tell me what to do”: compressing knowledge into directives</a></li>
<li><a href="https://blog.todoist.com/2015/11/30/ultimate-guide-personal-productivity-methods/">The Ultimate Guide to Personal Productivity Methods</a></li>
<li><a href="https://qz.com/978273/a-stanford-professors-15-minute-study-hack-improves-test-grades-by-a-third-of-a-grade/">A Stanford researcher’s 15-minute study hack lifts B+ students into the As</a></li>
<li><a href="https://medium.com/help-scout/how-music-affects-your-productivity-42a6dfa6fdfe">How Music Affects Your Productivity – Help Scout</a></li>
<li><a href="https://medium.com/startup-grind/a-primer-on-crispr-and-how-to-learn-more-c1b4ca7159f6">Everything You Should Know About CRISPR — And Where to Learn More</a></li>
<li><a href="https://github.com/jlevy/og-equity-compensation">The Open Guide to Equity Compensation</a></li>
<li><a href="http://start.jcolemorrison.com/aws-iam-policies-in-a-nutshell/">AWS IAM Policies in a Nutshell</a></li>
</ul>
</li>
<li>Software
<ul>
<li><a href="https://jsonfeed.org/2017/05/17/announcing_json_feed">JSON Feed: Announcing JSON Feed</a></li>
<li><a href="https://www.privacore.com/2017/03/26/how-does-internet-search-work/">How does internet search work?</a></li>
<li><a href="https://www.whitesmith.co/one-month-with-react-native/">One month with React Native</a></li>
</ul>
</li>
</ul>
<h2>Reading</h2>
<ul>
<li>Stopped reading <a href="https://www.goodreads.com/book/show/175325.I_Will_Fear_No_Evil">I Will Fear No Evil</a></li>
<li><a href="https://www.goodreads.com/book/show/11468377-thinking-fast-and-slow">Thinking Fast and Slow</a> (audiobook)</li>
</ul>
]]></content:encoded>
            <author>hello@blakeembrey.com (Blake Embrey)</author>
        </item>
        <item>
            <title><![CDATA[My Week in Review (2017-05-16)]]></title>
            <link>http://blakeembrey.com/self/2017-05-16-review/</link>
            <guid>http://blakeembrey.com/self/2017-05-16-review/</guid>
            <pubDate>Tue, 16 May 2017 14:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>What Happened?</h2>
<ul>
<li>Read 45 articles</li>
<li>Working out of Balanced NYC for <a href="http://www.recess-labs.com/">Recess Labs</a></li>
<li>Visited <a href="https://www.instagram.com/p/BT9AniCDZOh/">Brooklyn Bridge Park</a></li>
<li>Set up and released <a href="https://github.com/serviejs">ServieJS</a> organisation</li>
</ul>
<h2>Internet</h2>
<ul>
<li>Videos
<ul>
<li><a href="https://www.youtube.com/watch?v=3ESoTBIDbpk">Live Office Hours with Adora Cheung and Avichal Garg</a></li>
<li><a href="https://www.youtube.com/watch?v=ZDM33CMJvp8">How to Invent the Future I</a> - these videos were among my favourite so far</li>
<li><a href="https://www.youtube.com/watch?v=DIR6Rmhm3To">How to Invent the Future II</a></li>
</ul>
</li>
<li>Interesting
<ul>
<li><a href="http://waitbutwhy.com/2015/12/the-tail-end.html">The Tail End</a></li>
<li><a href="http://jamesclear.com/the-1-percent-rule">The 1 Percent Rule: Why a Few People Get Most of the Rewards</a></li>
<li><a href="https://www.theatlantic.com/magazine/archive/2017/05/how-to-trick-people-into-saving-money/521421/">How to Trick People Into Saving Money</a></li>
<li><a href="http://www.atlasobscura.com/articles/thorium-toothpaste-alsos-world-war-wwii-manhattan-project">The Mysterious Case of the Radioactive Toothpaste</a></li>
<li><a href="https://www.nytimes.com/2017/05/05/opinion/sunday/are-these-birds-too-sexy-to-survive.html">Are These Birds Too Sexy to Survive?</a></li>
<li><a href="http://www.forbes.com/sites/startswithabang/2017/05/09/the-scientific-truth-about-planet-nine-so-far/">The Scientific Truth About Planet Nine, So Far</a></li>
<li><a href="https://www.newscientist.com/article/mg23431240-600-how-number-words-may-have-changed-us-from-zeroes-to-heroes/">How number words may have changed us from zeroes to heroes</a></li>
<li><a href="http://www.glamour.com/story/how-one-woman-confronted-the-issue-of-racial-bias-online-dating-sites">How the Color of Your Skin Affects Who You Date Online</a></li>
<li><a href="http://www.glixel.com/interviews/civilization-creator-sid-meier-i-didnt-really-expect-to-be-a-game-designer-w480988">‘Civilization’ Creator Sid Meier: “I Didn’t Expect to be a Game Designer”</a></li>
<li><a href="https://hbr.org/2017/02/8-ways-to-read-a-lot-more-books-this-year">8 Ways to Read (a Lot) More Books This Year</a></li>
<li><a href="http://blog.pamelafox.org/2017/05/my-morning-practice.html">My Morning Practice</a></li>
</ul>
</li>
<li>Nikita Voloboev - discovered his work after I saw <a href="https://github.com/nikitavoloboev/knowledge-map">knowledge-map</a>, very inspirational work
<ul>
<li><a href="https://medium.com/@NikitaVoloboev/mind-map-everything-d27670f70739#.p7w44kr44">mind map everything</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/knowledge-bootstrapping-36c97e0dee19#.udmp9eotg">Knowledge Bootstrapping</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/what-it-means-to-live-a-conscious-life-c96f6517077#.x3mzy1kcl">What it means to live a conscious life?</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/the-root-of-it-all-9b6ab6a77e1d#.yt6ici5rf">The root of it all</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/the-best-kind-of-web-3c9131a1fd99#.npi0ohf46">The best kind of Web</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/just-keep-expressing-yourself-306870791ae4#.3ilcote4m">just keep expressing yourself</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/everything-connects-to-everything-else-c6a2d96a809d#.nn8gvwavn">everything connects to everything else</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/project-based-learning-e511641869ca#.z6wr7ncu5">Project based learning</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/day-evaluations-5706f31c9c5e#.m4lw1eo32">day evaluations</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/news-d6bcaaf40121#.mtj9gqvyu">news</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/fantastical-natural-input-text-expansions-3ea8cf7ccac3#.pv5937ncr">Fantastical natural input + Text expansions</a></li>
<li><a href="https://medium.com/@NikitaVoloboev/little-trick-i-use-to-navigate-source-code-better-bc958ccd821#.7y4y3jhqz">Little trick I use to navigate source code better</a></li>
</ul>
</li>
<li>Self-improvement
<ul>
<li><a href="http://www.sparkjournal.net/journal/2014/12/day-one-and-the-journaling-habit">Day One and the Journaling Habit</a></li>
</ul>
</li>
<li>Technical
<ul>
<li><a href="https://brandur.org/heroku-values">My Heroku Values</a></li>
<li><a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">What is the XY problem?</a> - This was linked in a TypeScript issue, never knew there was a name for it!</li>
<li><a href="https://www.troyhunt.com/dont-tell-people-to-turn-off-windows-update-just-dont/">Don’t tell people to turn off Windows Update, just don’t</a></li>
<li><a href="https://arstechnica.com/security/2017/05/macron-campaign-team-used-honeypot-accounts-to-fake-out-fancy-bear/">Macron campaign team used honeypot accounts to fake out Fancy Bear</a></li>
<li><a href="https://hackernoon.com/analyzing-a-counter-intelligence-cyber-operation-how-macron-just-changed-cyber-security-forever-22553abb038b?gi=ca56c38dda8d">Analyzing a counter intelligence cyber operation: How Macron just changed cyber security forever</a></li>
<li><a href="https://securityledger.com/2017/04/estonia-10-years-later-lessons-learned-from-the-worlds-first-internet-war/">Estonia 10 Years Later: Lessons learned from the World’s First Internet War</a></li>
<li><a href="https://blog.0day.rocks/abusing-gmail-to-get-previously-unlisted-e-mail-addresses-41544b62b2?gi=19b7c9978ff1">Abusing Gmail to get previously unlisted e-mail addresses</a></li>
<li><a href="http://news.mit.edu/2017/dina-katabi-csail-team-develop-wireless-system-to-detect-walking-speeds-0501">Detecting walking speed with wireless signals</a></li>
<li><a href="https://dzone.com/articles/tlsssl-terminology-and-basics">TLS/SSL Explained: TLS/SSL Terminology and Basics</a></li>
<li><a href="https://www.f-secure.com/weblog/archives/00002383.html">Flame is Lame</a></li>
<li><a href="https://blog.travis-ci.com/2017-05-08-security-advisory">The Travis CI Blog: Security Advisory: Secured Environment Variables</a></li>
<li><a href="http://www.brendangregg.com/blog/2017-05-09/cpu-utilization-is-wrong.html">CPU Utilization is Wrong</a></li>
<li><a href="http://rhaas.blogspot.com/2017/04/who-contributes-to-postgresql.html">Who Contributes to PostgreSQL Development?</a></li>
<li><a href="https://medium.com/goiabada/when-postgres-is-not-enough-237b723be442">When Postgres is not enough</a></li>
<li><a href="https://dzone.com/articles/10-tips-on-how-to-be-a-great-programmer">10 Tips on How to Be a Great Programmer </a></li>
<li><a href="https://dzone.com/articles/oauth-20-beginners-guide">OAuth 2.0 Beginner’s Guide</a></li>
<li><a href="https://www.schneier.com/blog/archives/2017/05/why_is_the_tsa_.html">Why Is the TSA Scanning Paper?</a></li>
</ul>
</li>
</ul>
<h2>Reading</h2>
<ul>
<li><a href="https://www.goodreads.com/book/show/175325.I_Will_Fear_No_Evil">I Will Fear No Evil</a></li>
<li>Finished <a href="https://www.goodreads.com/book/show/28257707-the-subtle-art-of-not-giving-a-f-ck">The Subtle Art of Not Giving a F*ck</a> today</li>
<li>New audiobook: <a href="https://www.goodreads.com/book/show/11468377-thinking-fast-and-slow">Thinking Fast and Slow</a></li>
</ul>
]]></content:encoded>
            <author>hello@blakeembrey.com (Blake Embrey)</author>
        </item>
        <item>
            <title><![CDATA[My Week in Review (2017-05-07)]]></title>
            <link>http://blakeembrey.com/self/2017-05-07-review/</link>
            <guid>http://blakeembrey.com/self/2017-05-07-review/</guid>
            <pubDate>Sun, 07 May 2017 22:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>What Happened?</h2>
<ul>
<li>Moved to New York for the next two months, getting into a new routine</li>
<li>Did not expect to have found myself reading so many articles, and unfortunately reading less books/audiobooks this week</li>
<li>Wishing to build a better tracking/sharing platform of the articles I read each week</li>
</ul>
<h2>Internet</h2>
<ul>
<li>Videos
<ul>
<li><a href="https://www.youtube.com/watch?v=s1Rd4UShDxQ">How to Build a Product IV - Jan Koum - CS183F</a></li>
<li><a href="https://www.youtube.com/watch?v=URiIsrdplbo">How to Get Users and Grow - Alex Schultz - CS183F</a></li>
<li><a href="https://www.ted.com/talks/elon_musk_the_future_we_re_building_and_boring">The future we’re building – and boring</a></li>
</ul>
</li>
<li>Articles (software)
<ul>
<li><a href="https://blogs.scientificamerican.com/guest-blog/programming-as-a-way-of-thinking/">Programming as a Way of Thinking</a></li>
<li><a href="http://haseebq.com/the-time-i-had-to-crack-my-own-reddit-password/">The Time I Had to Crack My Own Reddit Password</a></li>
<li><a href="https://www.periscopedata.com/blog/everything-about-group-by.html">What You Need To Know About SQL’s Group By</a></li>
<li><a href="https://www.troyhunt.com/microsoft-flow-azure-storage-webjobs-outlook-email/">Microsoft Flow + Azure Storage + WebJobs + MailChimp + Outlook</a></li>
<li><a href="https://www.smashingmagazine.com/2017/05/oauth2-logging-in-facebook/">What You Need To Know About OAuth2 And Logging In With Facebook</a></li>
<li><a href="http://fpgasite.blogspot.com/2017/04/vhdl-or-verilog.html">VHDL or Verilog?</a></li>
<li><a href="http://blog.sqlizer.io/posts/sql-43/">SQL is 43 years old - here’s 8 reasons we still use it today</a></li>
<li><a href="https://www.schneier.com/blog/archives/2017/04/advances_in_ad_.html">Advances in Ad Blocking</a></li>
<li><a href="https://www.oreilly.com/ideas/the-alarming-state-of-secure-coding-neglect">The alarming state of secure coding neglect</a></li>
<li><a href="https://www.troyhunt.com/password-reuse-credential-stuffing-and-another-1-billion-records-in-have-i-been-pwned/">Password reuse, credential stuffing and another billion records in Have I been pwned</a></li>
<li><a href="https://motherboard.vice.com/en_us/article/google-hackers-gmail-viral-phishing-campaign">Google Knew Hackers Could Launch a Gmail Viral Phishing Campaign Since 2011</a></li>
<li><a href="https://metarabbit.wordpress.com/2017/05/02/i-tried-haskell-for-5-years-and-heres-how-it-was/">I tried Haskell for 5 years and here’s how it was</a></li>
<li><a href="https://www.zerotier.com/blog/2017-05-05-theleak.shtml">The Horror in the Standard Library</a></li>
</ul>
</li>
<li>Everything else
<ul>
<li><a href="http://theoatmeal.com/comics/believe">You’re not going to believe what I’m about to tell you</a></li>
<li><a href="http://web.stanford.edu/~learnest/les/crypto.htm">I Spy</a></li>
<li><a href="http://paulholmes.ca/2009/11/20/dammit-linkedin-im-a-college-dropout/">Dammit LinkedIn, I’m a college dropout! - Paul Holmes</a> - can attest</li>
<li><a href="https://markmanson.net/smartphones">Smartphones are the New Cigarettes</a> - I have a similar feelings on smartphones, so I limit the times I use it (never around other people unless to take notes about the discussion or look something up for confirmation) and removed adicting applications (no social media applications installed on phone, I keep Instapaper/Reeder on my homescreen to read articles over feel good posts)</li>
<li><a href="http://waitbutwhy.com/2014/06/taming-mammoth-let-peoples-opinions-run-life.html">Why You Should Stop Caring What Other People Think (Taming the Mammoth)</a> - I would recommend reading this article (and many others) as a reminder to yourself</li>
<li><a href="http://www.economist.com/news/essays/21649050-badly-educated-men-rich-countries-have-not-adapted-well-trade-technology-or-feminism">Manhood</a> - Insightful look into society</li>
<li><a href="http://akumuli.org/akumuli/2017/04/29/nbplustree/">Storage engine design</a></li>
<li><a href="http://www.newyorker.com/tech/elements/walking-helps-us-think">Why Walking Helps Us Think</a></li>
<li><a href="https://hbr.org/2017/02/8-ways-to-read-a-lot-more-books-this-year">8 Ways to Read (a Lot) More Books This Year</a></li>
<li><a href="https://patribotics.blog/2017/05/01/exclusive-sean-spicer-tweeted-a-bitcoin-address-not-his-password/">EXCLUSIVE: Sean Spicer Tweeted a Bitcoin Address – Not His Password</a></li>
<li><a href="https://motherboard.vice.com/en_us/article/the-story-of-nesticle-the-ambitious-emulator-that-redefined-retro-gaming">The Story of NESticle, the Ambitious Emulator That Redefined Retro Gaming</a></li>
<li><a href="https://m.signalvnoise.com/the-9-questions-that-uncover-the-most-surprising-insights-from-employees-b7bc0d20ede8">The 9 questions that uncover the most surprising insights from employees</a></li>
<li><a href="https://daringfireball.net/linked/2017/05/01/airpod-survey">Daring Fireball: Interesting Survey of AirPod Users</a> - I’ve really enjoyed having my Airpods with me and won’t go anywhere without them (tend to listen to audiobooks around the house or music when running)</li>
<li><a href="http://foundersatwork.posthaven.com/y-combinator-when-no-one-cared">Y Combinator When No One Cared</a></li>
<li><a href="http://sethgodin.typepad.com/seths_blog/2017/05/please-understand.html">Seth’s Blog: When we understand</a></li>
<li><a href="https://motherboard.vice.com/en_us/article/this-trump-fcc-official-just-made-a-great-accidental-argument-for-net-neutrality">This Trump FCC Transition Official Just Made a Great Accidental Argument for Net Neutrality</a></li>
<li><a href="http://norberthaering.de/en/home/32-english/news/787-bundesbank-gold">The power of gold: Why Deutsche Bundesbank had to promise to leave 1200 tons in New York</a></li>
<li><a href="https://www.nytimes.com/2017/04/16/us/politics/north-korea-missile-crisis-slow-motion.html">A ‘Cuban Missile Crisis in Slow Motion’ in North Korea</a></li>
<li><a href="http://www.shellypalmer.com/2017/04/id-pay-500000-year-cant-work/">I’d Pay You $500,000 a Year, but You Can’t Do the Work</a></li>
<li><a href="http://www.ybrikman.com/writing/2013/09/29/the-10x-developer-is-not-myth/">The 10x developer is NOT a myth</a></li>
<li><a href="https://motherboard.vice.com/en_us/article/we-were-warned-about-flaws-in-the-mobile-data-backbone-for-years-now-2fa-is-screwed">We Were Warned About Flaws in the Mobile Data Backbone for Years. Now 2FA Is Screwed.</a></li>
<li><a href="http://wealthyaccountant.com/2017/05/03/your-garbage-is-killing-me/">Your Garbage is Killing Me</a></li>
<li><a href="https://swizec.com/blog/how-i-got-boned-by-taxes-two-years-in-a-row/swizec/7582">How I Got Boned by Taxes Two Years in a Row</a></li>
<li><a href="https://motherboard.vice.com/en_us/article/untold-numbers-of-canadians-are-streaming-live-online-without-their-knowledge">Untold Numbers of Canadians Are Streaming Live Online Without Their Knowledge</a></li>
<li><a href="https://www.hdphealth.com/open-sourcing-my-personal-medical-record-1301">Open Sourcing My Personal Medical Record</a> - I envy this and should probably investigate if there’s anything I can do in this space</li>
<li><a href="https://www.privateinternetaccess.com/blog/2017/05/the-six-worst-recent-hypocrisies-of-the-copyright-industry/">The six worst recent hypocrisies of the copyright industry</a></li>
<li><a href="https://www.martinruenz.de/article/data-privacy/2017/05/03/something-is-wrong.html">Something is wrong when the ‘telephone app’ on your phone becomes 3rd party</a></li>
<li><a href="http://www.sizefivegames.com/2017/05/04/how-to-survive-as-a-solo-dev-for-like-a-decade-or-so/">How to Survive as a Solo Dev for like a Decade or so</a></li>
<li><a href="https://daringfireball.net/linked/2017/05/04/shopping-cards">Daring Fireball: Why Do Some People Not Return Their Shopping Carts?</a></li>
<li><a href="https://daringfireball.net/2017/05/apples_china_problem_wechat">Daring Fireball: Apple’s China Problem: WeChat</a></li>
<li><a href="http://sethgodin.typepad.com/seths_blog/2017/05/pre-existing-conditions.html">Seth’s Blog: Pre-existing conditions</a></li>
<li><a href="http://wealthyaccountant.com/2017/05/05/the-ultimate-credit-card-rewards-hack/">The Ultimate Credit Card Rewards Hack</a></li>
<li><a href="http://sethgodin.typepad.com/seths_blog/2017/05/and-we-just-had-a-winner.html">Seth’s Blog: And we just had a winner</a></li>
</ul>
</li>
</ul>
<h2>Reading</h2>
<ul>
<li><a href="https://www.goodreads.com/book/show/175325.I_Will_Fear_No_Evil">I Will Fear No Evil</a></li>
<li><a href="https://www.goodreads.com/book/show/28257707-the-subtle-art-of-not-giving-a-f-ck">The Subtle Art of Not Giving a F*ck</a> (audiobook)</li>
</ul>
]]></content:encoded>
            <author>hello@blakeembrey.com (Blake Embrey)</author>
        </item>
        <item>
            <title><![CDATA[My Week in Review (2017-05-01)]]></title>
            <link>http://blakeembrey.com/self/2017-05-01-review/</link>
            <guid>http://blakeembrey.com/self/2017-05-01-review/</guid>
            <pubDate>Mon, 01 May 2017 13:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>What Happened?</h2>
<ul>
<li><a href="https://runkeeper.com/user/blakeembrey/activity/973473448">Ran another 25km</a></li>
<li>Third week of <a href="https://www.coursera.org/learn/mindshift">Mindshift</a> course</li>
<li>Another week of <a href="https://www.startupschool.org/course">Startup School</a></li>
</ul>
<h2>Internet</h2>
<ul>
<li>Articles
<ul>
<li><a href="https://www.troyhunt.com/reckon-youve-seen-some-stupid-security-things-here-hold-my-beer/">Reckon you’ve seen some stupid security things? Here, hold my beer…</a></li>
<li><a href="http://paulholmes.ca/2009/11/20/dammit-linkedin-im-a-college-dropout/">Dammit LinkedIn, I’m a college dropout! - Paul Holmes</a></li>
<li><a href="https://krebsonsecurity.com/2017/04/blind-trust-in-email-could-cost-you-your-home/">Blind Trust in Email Could Cost You Your Home — Krebs on Security</a></li>
<li><a href="https://jvns.ca/blog/2017/04/27/no-feigning-surprise/">No feigning surprise - Julia Evans</a></li>
<li><a href="https://www.quora.com/Should-I-fire-a-software-engineer-for-always-working-on-his-side-projects-during-office-hours">Should I fire a software engineer for always working on his side projects during office hours? - Quora</a></li>
<li><a href="http://www.complex.com/life/2016/06/asian-identities-cultural-appropriation">What the Cultural Appropriation Conversation Leaves Out About Asians</a></li>
<li><a href="http://www.mrmoneymustache.com/2017/04/25/there-are-no-guarantees/">There Are No Guarantees</a></li>
<li><a href="https://dev.to/pbeekums/why-i-dont-prepare-for-job-interviews">Why I Don’t Prepare For Job Interviews</a></li>
<li><a href="http://jacquesmattheij.com/just-say-no">Just Say No · Jacques Mattheij</a></li>
<li><a href="https://motherboard.vice.com/en_us/article/when-a-dollar200000-tech-salary-just-isnt-worth-it">When a $200,000 Tech Salary Just Isn’t Worth It</a></li>
<li><a href="http://digiday.com/media/guardian-pulls-facebooks-instant-articles-apple-news/">The Guardian pulls out of Facebook’s Instant Articles and Apple News</a></li>
<li><a href="https://snyk.io/blog/serverless-security-implications-from-infra-to-owasp/">Snyk - Serverless Security implications—from infra to OWASP</a></li>
<li><a href="https://medium.com/adstage-engineering/migrating-from-heroku-to-aws-our-story-80084d31025e">Migrating from Heroku to AWS: Our Story – AdStage Engineering</a></li>
<li><a href="https://www.washingtonpost.com/news/reliable-source/wp/2017/04/30/hasan-minhajs-harshest-burns-at-the-white-house-correspondents-dinner/">Hasan Minhaj’s harshest burns at the White House correspondents’ dinner</a></li>
<li><a href="https://daringfireball.net/2017/04/uber_identifying_and_tagging_iphones">Daring Fireball: On Uber’s ‘Identifying and Tagging’ of iPhones</a></li>
<li><a href="https://daringfireball.net/linked/2017/04/27/nichols-trump">Daring Fireball: Are Trump Voters Ruining America for All of Us?</a></li>
<li><a href="https://daringfireball.net/linked/2017/04/27/whitehouse-climate-change">Daring Fireball: Sheldon Whitehouse on the Politics of Climate Change</a></li>
<li><a href="https://www.privateinternetaccess.com/blog/2017/04/wikipedia-censored-from-the-internet-in-turkey/">Wikipedia censored from the Internet in Turkey</a></li>
<li><a href="http://haseebq.com/the-time-i-had-to-crack-my-own-reddit-password/">The Time I Had to Crack My Own Reddit Password | Haseeb Qureshi</a></li>
<li><a href="https://motherboard.vice.com/en_us/article/the-story-of-nesticle-the-ambitious-emulator-that-redefined-retro-gaming">The Story of NESticle, the Ambitious Emulator That Redefined Retro Gaming</a></li>
</ul>
</li>
<li>Videos
<ul>
<li><a href="https://www.ted.com/talks/elon_musk_the_future_we_re_building_and_boring">The future we’re building – and boring</a></li>
<li><a href="https://www.youtube.com/watch?v=qRt7mFuKwQY">How to Build a Product II, Aaron Levie - Box - CS183F</a></li>
<li><a href="https://www.youtube.com/watch?v=09GRs0FXdWQ">How to Build a Product III - Jason Lemkin, Solomon Hykes, Tracy Young and Harry Zhang - CS183F</a></li>
<li><a href="https://www.youtube.com/watch?v=s1Rd4UShDxQ">How to Build a Product IV - Jan Koum - CS183F</a></li>
<li><a href="https://www.youtube.com/watch?v=wD8AwgO0AQI">Ivanka &amp; Jared: Last Week Tonight with John Oliver (HBO)</a></li>
<li><a href="https://www.youtube.com/watch?v=LdPyYze2NIA">Gorillaz - The Apprentice</a></li>
</ul>
</li>
</ul>
<h2>Reading</h2>
<ul>
<li><a href="https://www.goodreads.com/book/show/175325.I_Will_Fear_No_Evil">I Will Fear No Evil</a></li>
<li><a href="https://www.goodreads.com/book/show/22543496-elon-musk">Unshakeable</a> (audiobook)</li>
</ul>
]]></content:encoded>
            <author>hello@blakeembrey.com (Blake Embrey)</author>
        </item>
        <item>
            <title><![CDATA[My Week in Review (2017-04-24)]]></title>
            <link>http://blakeembrey.com/self/2017-04-24-review/</link>
            <guid>http://blakeembrey.com/self/2017-04-24-review/</guid>
            <pubDate>Mon, 24 Apr 2017 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I didn’t write this review on Sunday because I was busy relaxing and playing Fallout: New Vegas. I still haven’t finished it. I did read and watch more this week compared to previous weeks. I also spent some time trying to research the alternatives in the investing space, let me know what you’re using!</p>
<h2>What Happened?</h2>
<ul>
<li><a href="https://runkeeper.com/user/blakeembrey/activity/969551521">Ran 25km</a> until I didn’t want to keep going anymore</li>
<li>Second week of <a href="https://www.coursera.org/learn/mindshift">Mindshift</a> course</li>
<li>First week of <a href="https://www.coursera.org/learn/altruism">Effective Altruism</a></li>
</ul>
<h2>Internet</h2>
<p>This week I went through my usual tech news, an unusual amount of video content (watching Last Week Tonight) and spend a long morning consuming <a href="http://www.mrmoneymustache.com/">Mr. Money Mustache</a> since it’s been on my todo list for a long time (and has a lot of great content). I also had no idea about the scale of North Korea’s artillery, and read new articles on the new laws coming in around the world requiring snooping on citizens by corporations. With the Gorillaz new album coming out soon, I also listened to a bit around that.</p>
<ul>
<li>Videos
<ul>
<li><a href="https://www.youtube.com/watch?v=abtHadERzXU">Live Office Hours with Yuri Sagalov and Sam Altman - CS183F</a></li>
<li><a href="https://www.youtube.com/watch?v=6IFR3WYSBFM">How to Build a Product I, Michael Seibel, Steve Huffman, Emmett Shear - CS-183F</a></li>
<li><a href="https://www.youtube.com/watch?v=EDZ6umenrOQ">Gorillaz - Feel Good Inc. (Bass Arrangement)</a></li>
<li><a href="https://www.youtube.com/watch?v=5qJp6xlKEug">Gorillaz - Saturnz Barz (Spirit House)</a></li>
<li><a href="https://www.youtube.com/watch?v=zsjZ2r9Ygzw">Encryption: Last Week Tonight with John Oliver (HBO)</a></li>
<li><a href="https://www.youtube.com/watch?v=1Y1ya-yF35g">Nuclear Weapons: Last Week Tonight with John Oliver (HBO)</a></li>
<li><a href="https://www.youtube.com/watch?v=wD8AwgO0AQI">Ivanka &amp; Jared: Last Week Tonight with John Oliver (HBO)</a></li>
<li><a href="http://www.businessinsider.com/neil-degrasse-tyson-most-important-words-video-2017-4">Neil deGrasse Tyson says this new video may contain the ‘most important words’ he’s ever spoken</a></li>
<li><a href="https://www.youtube.com/">Carl Barron @ Just for Laughs</a></li>
<li><a href="http://www.electronicbeats.net/the-feed/watch-murdoc-2ds-first-live-video-interview/">Watch Murdoc And 2D’s First Live Video Interview</a></li>
</ul>
</li>
<li>Tech
<ul>
<li><a href="https://www.troyhunt.com/mandatory-isp-data-retention-and-the-law-of-unintended-consequences/">Mandatory ISP data retention and the law of unintended consequences</a></li>
<li><a href="https://www.privateinternetaccess.com/blog/2017/04/what-australia-can-learn-from-europes-failure-with-data-retention/">What Australia can learn from Europe’s failure with Data Retention laws</a></li>
<li><a href="https://www.privateinternetaccess.com/blog/2017/04/with-laptops-banned-onboard-aircraft-your-data-is-no-longer-yours/">With laptops banned on aircraft, your data is no longer yours if you fly</a></li>
<li><a href="https://www.youtube.com/watch?v=etax3aEe2dA">Dan Schafer - GraphQL at Facebook at react-europe 2016</a></li>
<li><a href="https://blog.scottnonnenberg.com/hard-won-lessons-five-years-with-node-js/">Hard-won lessons: Five years with Node.js</a></li>
<li><a href="https://www.schneier.com/blog/archives/2017/04/surveillance_an_2.html">Surveillance and our Insecure Infrastructure</a></li>
<li><a href="https://githubengineering.com/open-sourcing-our-delegated-recovery-implementation/">Open sourcing our Delegated Account Recovery implementation</a></li>
<li><a href="https://daringfireball.net/linked/2017/04/17/cybart-achilles-heel">Apple’s Achilles Heel</a></li>
<li><a href="https://www.wired.com/2017/04/steve-lacy-iphone-producer/">How Steve Lacy and His iPhone Are Taking Over The Music Biz</a></li>
<li><a href="https://daringfireball.net/linked/2017/04/18/swift-backslash-key-path">Daring Fireball: Proposed Key Path Syntax for Swift</a></li>
<li><a href="https://daringfireball.net/linked/2017/04/18/bon-appetit-cover">Daring Fireball: Cover Photo for May Issue of Bon Appétit Shot Using iPhone 7 Plus</a></li>
<li><a href="https://daringfireball.net/linked/2017/04/18/facebook-instant-articles-bad-deal">Daring Fireball: Shocker: Facebook Instant Articles Are a Bad Deal for Publishers</a></li>
<li><a href="https://daringfireball.net/linked/2017/04/19/juicero">Daring Fireball: $400 VC-Backed Juice Machine Is Completely Unnecessary</a></li>
<li><a href="https://daringfireball.net/linked/2017/04/19/marco-pro">Daring Fireball: The New Mac Pro Needs to Be Versatile</a></li>
<li><a href="https://theoutline.com/post/1399/how-google-ate-celebritynetworth-com">How Google ate CelebrityNetWorth.com</a></li>
<li><a href="https://www.wsj.com/articles/google-plans-ad-blocking-feature-in-popular-chrome-browser-1492643233">Google Plans Ad-Blocking Feature in Popular Chrome Browser</a></li>
<li><a href="https://medium.com/@fat/mediums-css-is-actually-pretty-fucking-good-b8e2a6c78b06">Medium’s CSS is actually pretty f***ing good. – fat</a></li>
<li><a href="https://medium.design/crafting-link-underlines-on-medium-7c03a9274f9">Crafting link underlines on Medium – Designing Medium</a></li>
<li><a href="https://www.cjr.org/tow_center/facebook-usa-today.php">A Facebook bot purge clobbered USA Today, and no one knows why</a></li>
<li><a href="http://digiday.com/media/guardian-pulls-facebooks-instant-articles-apple-news/">The Guardian pulls out of Facebook’s Instant Articles and Apple News</a></li>
</ul>
</li>
<li>Finance
<ul>
<li><a href="http://www.mrmoneymustache.com/2012/05/29/how-much-do-i-need-for-retirement/">The 4% Rule: The Easy Answer to “How Much Do I Need for Retirement?”</a></li>
<li><a href="http://www.mrmoneymustache.com/2011/05/18/how-to-make-money-in-the-stock-market/">How to make Money in the Stock Market</a></li>
<li><a href="http://www.mrmoneymustache.com/2012/10/03/the-practical-benefits-of-outrageous-optimism/">The Practical Benefits of Outrageous Optimism</a></li>
<li><a href="http://www.mrmoneymustache.com/2011/12/05/muscle-over-motor/">Muscle Over Motor</a></li>
<li><a href="http://www.mrmoneymustache.com/2013/11/16/republic-wireless-old-phone-new-phone-and-a-tempting-competitor/">Republic Wireless: Old Phone, New Phone, and a Tempting Competitor</a></li>
<li><a href="http://www.mrmoneymustache.com/2011/10/12/avoiding-ivy-league-preschool-syndrome/">Avoiding Ivy League Preschool Syndrome</a></li>
<li><a href="http://www.mrmoneymustache.com/2012/03/29/killing-your-1000-grocery-bill/">Killing your $1000 Grocery Bill</a></li>
<li><a href="http://www.mrmoneymustache.com/2011/04/18/get-rich-with-bikes/">Get Rich With… Bikes</a></li>
<li><a href="http://www.mrmoneymustache.com/2011/09/28/get-rich-with-moving-to-a-better-place/">Get Rich With: Moving to a Better Place</a></li>
<li><a href="http://www.mrmoneymustache.com/2011/09/13/domestic-outsourcing-practical-or-wussypants/">Domestic Outsourcing: Practical or Wussypants?</a></li>
<li><a href="http://www.mrmoneymustache.com/2011/10/06/the-true-cost-of-commuting/">The True Cost of Commuting</a></li>
<li><a href="http://www.mrmoneymustache.com/credit-cards/">Credit Cards</a></li>
<li><a href="http://www.mrmoneymustache.com/2012/01/13/the-shockingly-simple-math-behind-early-retirement/">The Shockingly Simple Math Behind Early Retirement</a></li>
<li><a href="http://www.mrmoneymustache.com/2017/02/01/betterment-cranks-up-features-and-costs-is-it-still-worthwhile/">Betterment Cranks up Features and Costs – is it Still Worthwhile?</a></li>
<li><a href="http://www.mrmoneymustache.com/2015/09/29/if-youre-not-getting-rich-in-your-20s-youre-doing-it-wrong/">If You’re Not Getting Rich in your 20s, You’re Doing it Wrong</a></li>
<li><a href="http://www.mrmoneymustache.com/2013/10/01/the-low-information-diet/">The Low Information Diet</a></li>
<li><a href="http://www.mrmoneymustache.com/2016/02/10/should-you-do-your-own-taxes/">Should You Do Your Own Taxes? (and Why I Don’t)</a></li>
<li><a href="http://wealthyaccountant.com/2017/04/19/the-dangers-of-a-side-gig/">The Dangers of a Side Gig</a></li>
<li><a href="https://www.policygenius.com/blog/acorns-betterment-robinhood-investing-app-review/">Acorns vs Betterment vs Robinhood</a></li>
</ul>
</li>
<li>Altruism
<ul>
<li><a href="http://effective-altruism.com/ea/45/what_is_effective_altruism/">What is effective altruism?</a></li>
<li><a href="http://effective-altruism.com/ea/6u/the_drowning_child_and_the_expanding_circle/">The Drowning Child and the Expanding Circle</a></li>
<li><a href="http://effective-altruism.com/ea/4r/cheerfully/">Cheerfully</a></li>
</ul>
</li>
<li>Other articles
<ul>
<li><a href="https://stratechery.com/2017/facebook-and-the-cost-of-monopoly/">Facebook and the Cost of Monopoly</a></li>
<li><a href="https://medium.com/@blakeross/don-t-outsource-your-thinking-ad825a9b4653">Don’t Outsource Your Thinking – Blake Ross</a></li>
<li><a href="https://dewanemutunga.com/learning-by-doing/">Learning By Doing: The Key to Higher Learning Gains and Retention</a></li>
<li><a href="https://www.quora.com/What-do-you-think-about-the-violent-removal-of-a-passenger-on-United-flight-3411">What do you think about the violent removal of a passenger on United flight 3411?</a></li>
<li><a href="http://www.businessinsider.com/north-koreas-got-an-artillery-armada-2013-3">Don’t Forget The Devastating Capability Of North Korea’s Artillery</a></li>
<li><a href="http://www.sfgate.com/world/article/North-Korea-nukes-SF-in-birthday-party-video-11083927.php">North Korea nukes SF in birthday party video</a></li>
<li><a href="http://sethgodin.typepad.com/seths_blog/2017/04/the-bingo-method.html">The bingo method</a></li>
<li><a href="http://sethgodin.typepad.com/seths_blog/2017/04/compared-to-what.html">Compared to what?</a></li>
<li><a href="http://gizmodo.com/running-a-marathon-puts-your-body-through-hell-1794380470">How Running a Marathon Puts Your Body Through Hell</a> - I was going to be competing in the upcoming marathon in San Diego, but I’ll end up missing it now due to circumstances. Should I compete in one somewhere else?</li>
<li><a href="http://blog.pamelafox.org/2017/04/enjoying-bart-ride-non-conceptually.html">Avoiding concept overload on the BART</a></li>
<li><a href="https://daringfireball.net/linked/2017/04/19/oreilly-fox-news">Daring Fireball: Fox News Fires Bill O’Reilly</a></li>
<li><a href="https://daringfireball.net/linked/2017/04/19/king-obama-trump">Daring Fireball: Conservatives Hated an Uppity Negro Golfing President</a></li>
<li><a href="http://www.atlasobscura.com/articles/etruscan-forgeries-met-museum-art">The Forged ‘Ancient’ Statues That Fooled the Met’s Art Experts for Decades</a></li>
<li><a href="http://econlog.econlib.org/archives/2012/02/what_is_the_mar.html">What Is the Male Marriage Premium?</a></li>
<li><a href="http://www.bbc.com/travel/story/20170413-the-mysterious-man-who-gave-me-japan">The mysterious man who gave me Japan</a></li>
<li><a href="https://xkcd.com/1827/">xkcd: Survivorship Bias</a></li>
<li><a href="http://sethgodin.typepad.com/seths_blog/2017/04/who-are-we-seeking-to-become.html">Seth’s Blog: Who are we seeking to become?</a></li>
<li><a href="http://blog.pamelafox.org/2017/04/what-is-difference-between-being.html">What is the difference between being ambition and discontent?</a></li>
</ul>
</li>
</ul>
<h2>Reading</h2>
<p>I finished listening to the Elon Musk audiobook this week. I’ve almost finished ‘Do Androids Dream of Electric Sheep?’ - it’s a really short read and makes more sense to me than when I watched Blade Runner.</p>
<ul>
<li><a href="https://www.goodreads.com/book/show/7082.Do_Androids_Dream_of_Electric_Sheep_">Do Androids Dream of Electric Sheep?</a></li>
<li><a href="https://www.goodreads.com/book/show/22543496-elon-musk">Unshakeable</a> (audiobook)</li>
</ul>
<h2>Watched</h2>
<ul>
<li><a href="https://trakt.tv/shows/the-man-in-the-high-castle/seasons/2">The Man In The High Castle</a> - I have started the second season now</li>
<li><a href="https://trakt.tv/shows/marvel-s-agents-of-s-h-i-e-l-d/seasons/4/episodes/18">Marvel’s Agents of S.H.I.E.L.D.</a> - Another week, another episode</li>
</ul>
]]></content:encoded>
            <author>hello@blakeembrey.com (Blake Embrey)</author>
        </item>
        <item>
            <title><![CDATA[My Week in Review (2017-04-16)]]></title>
            <link>http://blakeembrey.com/self/2017-04-16-review/</link>
            <guid>http://blakeembrey.com/self/2017-04-16-review/</guid>
            <pubDate>Sun, 16 Apr 2017 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>What Happened?</h2>
<ul>
<li>More <a href="https://www.startupschool.org">Startup School</a> videos</li>
<li>First week of the <a href="https://www.coursera.org/learn/mindshift">Mindshift</a> course</li>
<li><a href="https://runkeeper.com/user/blakeembrey/activity/965498430">Ran 20.5km</a></li>
</ul>
<h2>Articles</h2>
<ul>
<li><a href="https://www.bloomberg.com/graphics/2017-fast-and-furious/">The Stats of The Furious</a> - Enjoyable visualisation of the Fast and Furious franchise</li>
<li><a href="https://medium.com/@ebonstorm/im-sick-of-injustice-dressed-as-inconvenience-5221ae1a45d1">I’m Sick of Injustice Dressed as Inconvenience</a> - A response to the responses of the assault on a customer of United</li>
<li><a href="https://medium.com/@treyharris/united-airlines-made-me-abandon-my-mobility-device-at-the-gate-before-my-honeymoon-8d74eee04038">United Airlines made me ABANDON my mobility device at the gate before my honeymoon</a> - Another horrific tale of United customer service</li>
<li><a href="https://motherboard.vice.com/en_us/article/australian-authorities-hacked-computers-in-the-us">​Australian Authorities Hacked Computers in the US</a> - The murky waters of international law seems painful to work with, I can’t see any way to guarantee an operation would only target people within a country</li>
<li><a href="http://lawyersandliquor.com/2017/04/free-furry-of-the-land-when-sovcits-and-furries-collide/">Free Furry of The Land: When SovCits and Furries Collide</a> - Lawyers investigation of a sovereign citizen fued and furries</li>
<li><a href="https://www.nytimes.com/2017/04/11/magazine/new-technology-is-built-on-a-stack-is-that-the-best-way-to-understand-everything-else-too.html?_r=0">New Technology Is Built on a ‘Stack.’ Is That the Best Way to Understand Everything Else, Too?</a> - I didn’t realise this was a thing</li>
<li><a href="https://motherboard.vice.com/en_us/article/princetons-ad-blocking-superweapon-may-put-an-end-to-the-ad-blocking-arms-race">Princeton’s Ad-Blocking Superweapon May Put an End to the Ad-Blocking Arms Race</a> - Interesting idea since another article (opting out - below) had a picture of an ad. Would that image get blocked?</li>
<li><a href="https://motherboard.vice.com/en_us/article/your-governments-hacking-tools-are-not-safe">Your Government’s Hacking Tools Are Not Safe</a> - The need for more open policies on hacking (touches on the golden key issue with FBI vs Apple)</li>
<li><a href="http://www.latimes.com/projects/la-ed-our-dishonest-president/">Our Dishonest President</a> - Delves on Donald Trump as a president</li>
<li><a href="https://mondaynote.com/the-ipad-turnaround-is-coming-6d04747b215b">The iPad Turnaround Is Coming</a> - Could the iPad turn-around as a device?</li>
<li><a href="https://www.aclu.org/blog/free-future/what-individuals-should-do-now-congress-has-obliterated-fccs-privacy-protections">What Individuals Should Do Now That Congress Has Obliterated the FCC’s Privacy Protections</a> - Guidelines for anyone to follow after the FCC privacy protections are gone</li>
<li><a href="http://gigigriffis.com/how-much-my-digital-nomad-lifestyle-costs-real-budget-numbers-from-nearly-5-years-on-the-road/">How Much My Digital Nomad Lifestyle Costs: Real Budget Numbers from Nearly 5 Years on the Road</a> - Overview of one nomads real budget when travelling</li>
<li><a href="https://medium.com/jean-hsu/leveling-up-your-code-reviews-ee5943abf68c">Leveling up your code reviews</a> - Advice for doing better code reviews</li>
<li><a href="http://www.michaelnielsen.org/ddi/how-to-crawl-a-quarter-billion-webpages-in-40-hours/">How to crawl a quarter billion webpages in 40 hours</a> - Writing and scaling a simple crawler on AWS</li>
<li><a href="https://blog.codinghorror.com/does-more-than-one-monitor-improve-productivity/">Does More Than One Monitor Improve Productivity?</a> - Trying to find a balance using a desktop monitor for myself</li>
<li><a href="http://blog.kraken.com/post/153209105847/security-advisory-mobile-phones">Security Advisory: Mobile Phones</a> - Another article on the security of mobile phones (if you haven’t already, you should be using 2FA with an application and not SMS)</li>
<li><a href="https://medium.com/@robleathern/opting-out-the-illusion-12a41551e88c">Opting Out: The Illusion</a> - Attempting to opt-out of tracking for advertising</li>
<li><a href="https://www.farnamstreetblog.com/2017/03/twenty-four-hour-mind-rosalind-cartwright/">The Science of Sleep: Regulating Emotions and the Twenty-four Hour Mind</a> - Another article on sleep and their effects</li>
</ul>
<h2>Reading</h2>
<ul>
<li><a href="https://www.goodreads.com/book/show/7082.Do_Androids_Dream_of_Electric_Sheep_">Do Androids Dream of Electric Sheep?</a></li>
<li><a href="https://www.goodreads.com/book/show/22543496-elon-musk">Elon Musk: Inventing the Future</a> (audiobook)</li>
</ul>
<h2>Watched</h2>
<ul>
<li><a href="https://trakt.tv/shows/the-man-in-the-high-castle/seasons/1">The Man In The High Castle</a> - The show will suck you in until the end</li>
<li><a href="https://trakt.tv/shows/marvel-s-agents-of-s-h-i-e-l-d/seasons/4/episodes/17">Marvel’s Agents of S.H.I.E.L.D.</a> - I feel like Marvel is doing an amazing job in the TV show space, making some of my favourite recent shows</li>
</ul>
]]></content:encoded>
            <author>hello@blakeembrey.com (Blake Embrey)</author>
        </item>
        <item>
            <title><![CDATA[My Week in Review (2017-04-09)]]></title>
            <link>http://blakeembrey.com/self/2017-04-09-review/</link>
            <guid>http://blakeembrey.com/self/2017-04-09-review/</guid>
            <pubDate>Sun, 09 Apr 2017 19:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>What Happened?</h2>
<ul>
<li>Published <a href="https://github.com/blakeembrey/writing">this blog</a> using Gatsby + React Free Style</li>
<li><a href="https://mastodon.social/">Mastodon</a> - you can find me at <a href="https://toot.cafe/@blakeembrey">@blakeembrey@toot.cafe</a></li>
<li>Running <a href="https://mdn.io">mdn.io</a> on AWS Lambda (<a href="https://github.com/lazd/mdn.io/pull/15">see Terraform PR</a>)</li>
<li><a href="https://www.startupschool.org">Startup School</a> is online</li>
</ul>
<h2>Best Content</h2>
<ul>
<li><a href="https://www.scuttlebutt.nz/">ssb handbook</a> - Great content with some links to interesting papers</li>
<li><a href="https://www.troyhunt.com/heres-where-the-apple-accounts-hackers-are-threatening-to-wipe-came-from/">Here’s where the Apple accounts hackers are threatening to wipe came from</a> - Good analysis of recent password leaks</li>
<li><a href="https://blog.ycombinator.com/hacking-dna-the-story-of-crispr-ken-thompson-and-the-gene-drive/">Hacking DNA: The Story of CRISPR, Ken Thompson, and the Gene Drive</a> - Learn more about CRISPR</li>
<li><a href="https://stripe.com/blog/rate-limiters">Scaling your API with rate limiters</a> - Interesting read on rate limiting</li>
<li><a href="https://cloudplatform.googleblog.com/2017/03/how-release-canaries-can-save-your-bacon-CRE-life-lessons.html">How release canaries can save your bacon - CRE life lessons</a> - Introduction to release canaries</li>
<li><a href="https://motherboard.vice.com/en_us/article/mastodon-is-like-twitter-without-nazis-so-why-are-we-not-using-it">Mastodon Is Like Twitter Without Nazis, So Why Are We Not Using It?</a> - Long introduction to Mastodon, go play!</li>
<li><a href="https://medium.com/digital-nomad-stories/why-i-traveled-to-47-countries-while-building-a-startup-635558f1fb23">Why I traveled to 47 countries while building a startup</a> - Travel and hacking</li>
<li><a href="https://www.rockpapershotgun.com/2017/04/03/why-fears-ai-is-still-the-best-in-first-person-shooters/">Why F.E.A.R.’s AI is still the best in first-person shooters</a> - The idea of cooperative AI that goes beyond a standard scripted approach sounds enjoyable</li>
<li><a href="https://www.nytimes.com/2017/03/10/opinion/sunday/can-sleep-deprivation-cure-depression.html?nytmobile=0">Yes, Your Sleep Schedule Is Making You Sick</a> - Information about sleep schedules</li>
<li><a href="https://www.wired.com/2017/04/hackers-emptying-atms-drill-15-worth-gear/">Hackers Are Emptying ATMs With a Single Drilled Hole and $15 Worth of Gear</a> - Short read on latest ATM hack</li>
<li><a href="https://medium.com/@AaronBleyaert/how-to-lose-weight-in-4-easy-steps-1f135f7e1dec">HOW TO LOSE WEIGHT IN 4 EASY STEPS</a> - Enjoyable read</li>
</ul>
<h2>Currently Reading</h2>
<ul>
<li><a href="https://www.goodreads.com/book/show/22328.Neuromancer">Neuromancer</a></li>
<li><a href="https://www.goodreads.com/book/show/22543496-elon-musk">Elon Musk: Inventing the Future</a> (audiobook)</li>
</ul>
]]></content:encoded>
            <author>hello@blakeembrey.com (Blake Embrey)</author>
        </item>
        <item>
            <title><![CDATA[Introduction to Free Style (and CSS-in-JS)]]></title>
            <link>http://blakeembrey.com/articles/2016/01/intro-to-free-style-css-in-js/</link>
            <guid>http://blakeembrey.com/articles/2016/01/intro-to-free-style-css-in-js/</guid>
            <pubDate>Sun, 17 Jan 2016 19:45:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>With the release of Free Style 1.0, I figure it’s about time to write about Free Style - how it works, why you’d want to use it and little introduction to CSS-in-JS. This has been a long time coming, with my first commit to Free Style over a year ago, and the first commit to Free Style in its current form 10 months ago. This is not a blog post designed to sway decisions - as always, you should use your own fair judgement.</p>
<h2>CSS-in-JS</h2>
<p>The idea of CSS-in-JS is well covered in <a href="https://speakerdeck.com/vjeux/react-css-in-js">this presentation by React engineer</a>, Christopher Chedeau, and by <a href="https://github.com/MicheleBertoli/css-in-js">many</a> <a href="http://formidable.com/blog/2015/03/01/launching-radium/">others</a>, so I’ll be brief. As React popularized the declarative DOM, it also enabled a generation of CSS-in-JS approaches that attempt to solve the many pitfalls of CSS. These pitfalls are well known and documented, and including “features” such as the global namespace, constant sharing and many approaches to component isolation (BEM, SMACSS). Writing CSS in a way that avoids the pitfalls can be regarded an art.</p>
<p>CSS-in-JS approaches exist to solve the pollution of the global namespace, constant sharing, component isolation, and bring many other unforeseen benefits. The JS part exists because these solutions utilize JavaScript as the way to provide namespacing, constant sharing and proper isolation. You may have already known, but these are things that have long been solved in programming languages, including JavaScript - with CommonJS, AMD and recently ES6 modules. It stands to reason that, if possible, JavaScript will provide a more sound foundation for writing modular CSS. Tooling for JavaScript is more mature, with the ability to do autocompletion, dead code elimination and linting common-place.</p>
<h2>How and Why Does Free Style Work?</h2>
<p>Free Style works with hashes. If there’s one word you should love at the end of this section, it’s hashing. With that said, the essence of <a href="https://github.com/blakeembrey/free-style/blob/master/src/free-style.ts">free-style</a> is less than 500 lines of code (in TypeScript), so I definitely suggest you check it out.</p>
<p>Free Style is built on top of a core <code>Cache</code> class. This class implements a way to append children using an ID (which is a hash), keeps track of how many times a child was added and removed, and can also attach simple change listeners (for when a child is added or removed). Three classes extend the <code>Cache</code> implementation to replicate the structure of CSS - <code>Rule</code>, <code>Style</code> and <code>FreeStyle</code>. The only other important class is <code>Selector</code>, which implements a <code>Cacheable</code> interface (<code>Cache</code> fulfills the same interface).</p>
<p>Using these four classes, we can replicate CSS in a way that automatically de-dupes styles. First, we create a <code>FreeStyle</code> instance (it can be imagined as a <code>.css</code> file). This class holds <code>Rule</code> and <code>Style</code> children. When you use <code>registerStyle</code>, it’ll stringifying each object to CSS and hash the contents, while also propagating any rules upward (E.g. when <code>@media</code> nested inside a style). The result is a single style registering (potentially) a number of <code>Style</code> and <code>Rule</code> instances, all of which have their hashes of their own contents. Throughout each instance creation, <code>registerStyle</code> collects a separate hash that is returned as the CSS class name to use. Finally, when the final class name hash is known, the class name is interpolated with all selectors and returned for you to use.</p>
<p>The result of this means that duplicate hashes are automatically merged. A duplicate hash means a duplicate rule, style or selector. The benefit of separating <code>Rule</code> and <code>Style</code> means that two identical media queries can be merged together (less CSS output) and so can identical styles within each context (E.g. identical styles inside and outside the media query can not be merged, but duplicates both inside or outside can be). The <code>Selector</code> class exists because now that duplicates are merged, multiple selectors can exist for the same <code>Style</code>.</p>
<p>The other interesting methods are <code>registerRule</code> and <code>registerKeyframes</code>. Both work similar to <code>registerStyle</code>, but are much be simpler. <code>registerRule</code> works by recursively registering rules, which are automatically being hashed based on the rule and their contents. <code>registerKeyframes</code> works by creating rules and styles that get added to a <code>Rule</code> instance and returns a selector of the complete hashed contents (hence keyframes are automatically hashed/namespaced).</p>
<p>All this hashing results in the fact that all styles are automatically unique. Registered styles and keyframes have a hash to identify them and the chance of a conflicting style is now left to the computer to resolve, not you. The other pitfalls of CSS are automatically solved as the result of JavaScript, as the hash can only be known and exposed by the implementor while constants and isolation are now solved (you can even use NPM libraries for style manipulation now).</p>
<p><strong>Update:</strong> One useful fact that may not be immediately obvious. By using hashes as the class name, it means output is <em>always</em> consistent across front-end and back-end (E.g. in isomorphic applications).</p>
<h2>Free Style Output Targets</h2>
<p>Now that you understand how Free Style works, the output targets should make a lot more sense. By default, Free Style exposes a feature-rich implementation ready for third-parties to build on top. To use it today, you must create instances of <code>FreeStyle</code> (using <code>create()</code>), merge any other instances and use <code>getStyles</code> to get the CSS output. There’s an <code>inject()</code> method, which will take the result of <code>getStyles</code> and wrap it in <code>&lt;style /&gt;</code> in the <code>&lt;head /&gt;</code>.</p>
<p>Currently, there are two other implementations of output targets. The first is <a href="https://github.com/jkroso/easy-style"><code>easy-style</code></a>, a simple wrapper around the complex functionality in Free Style that abstracts away multiple <code>FreeStyle</code> instances. It exposes three core methods - <code>style</code>, <code>rule</code>, <code>keyframe</code> - avoiding the concept of multiple instances, which makes it suitable for most web-apps. There’s also <a href="https://github.com/blakeembrey/react-free-style"><code>react-free-style</code></a>, which extends the core <code>FreeStyle</code> class with the ability to wrap React components and use React’s <code>context</code> for collecting all the styles used in the application. This is an interesting feature with interesting repercussions, such as only styles for the components on screen will be output in CSS (useful for minimizing the transfer size of isomorphic applications).</p>
<h2>Other CSS-in-JS Solutions</h2>
<p>A number of other CSS-in-JS solutions also exist, including <a href="https://github.com/FormidableLabs/radium"><code>radium</code></a>, <a href="https://github.com/js-next/react-style"><code>react-style</code></a> and <a href="https://github.com/jsstyles/jss"><code>jss</code></a>. Radium takes an all JavaScript approach, while <code>jss</code> and <code>react-style</code> are more familiar. Where <code>jss</code> and <code>react-style</code> differ to <code>free-style</code> is the approaches they take. Both went for namespacing in CSS by generating unique names instead of hashes. They also both went with <code>StyleSheet</code> instances that you create once, while <code>free-style</code> makes you register each style individually (and for a good reason, it allows linters to detect when a style is no longer used as it’ll appear as dead code). They may also restrict some subset of CSS that you can actually use for different reasons. As far as I can tell, neither go too much further into CSS tooling concepts such as style de-duping and minifying, which <code>free-style</code> gives you for free with hashes.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The State of TypeScript Packaging]]></title>
            <link>http://blakeembrey.com/articles/2015/11/state-of-typescript-packaging/</link>
            <guid>http://blakeembrey.com/articles/2015/11/state-of-typescript-packaging/</guid>
            <pubDate>Sun, 22 Nov 2015 21:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><em>This blog post originally appeared on <a href="http://angularclass.com/the-state-of-typescript-packages/">Angular Class</a>.</em></p>
<p>As a module author and developer, I love TypeScript. It allows me to write, publish and consume 100% type-safe JavaScript. Features like autocompletion, type validation and ES6 features are now part of my typical workflow. However, one step in this development lifecycle has always been broken for me. I’ve <a href="https://github.com/blakeembrey/popsicle">published</a> <a href="https://github.com/TypeStrong/tsconfig">half</a> <a href="https://github.com/blakeembrey/free-style">a</a> <a href="https://github.com/TypeStrong/ts-node">dozen</a> modules on NPM, but no one has ever been able to consume the type definitions from them. Why’s that?</p>
<p>Let’s quickly take a step back. TypeScript includes a creative way for providing the type information of plain JavaScript files. These are <code>.d.ts</code> files, also known as “typings”, which allows non-TypeScript packages to have a <code>.d.ts</code> file written and mirror the runtime JavaScript implementation of that package. This decoupling of the runtime and type compiler is truly elegant, as the TypeScript compiler can output <code>.js</code> and <code>.d.ts</code> files together and it works as if it is all TypeScript. This has two amazing effects:</p>
<ol>
<li>The greater community can write their own type definitions (<code>.d.ts</code> files) for non-TypeScript packages - which is pretty much every popular library on NPM</li>
<li>It promotes JavaScript as the first class citizen, something the first “compile-to-JS” languages like CoffeeScript failed to do (it promoted - through general availability - the use of things like <code>coffeescript/register</code> at runtime)</li>
</ol>
<p>To help understand how we, as a community, got here and where we’re going next I’m going to give you a quick history lesson.</p>
<h2>The Past</h2>
<p>Welcome to the past, the wild west of <code>.d.ts</code> files. A community project called <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefinitelyTyped</a>, started by <a href="https://github.com/borisyankov">Boris Yankov</a>, is first committed to <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/commit/647369a322be470d84f8d226e297267a7d1a0796">over three years ago</a>. DefinitelyTyped has evolved 100 times over since the initial inception, but the core premise is to use ambient module declarations that define types for packages in NPM, Bower and the browser.</p>
<p>What is an <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/change-case/change-case.d.ts">ambient module declaration</a>?</p>
<pre><code class="language-ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">module</span> "change-case" {
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dot</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span></span>;
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dotCase</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span></span>;
  [...]
}
</code></pre>
<p>Notice that <code>declare module &quot;x&quot;</code> wraps everything. Declaring the module switches the TypeScript compilers understanding of this <code>.d.ts</code> file. It enables you, as a developer, to use <code>import * as case from &quot;change-case&quot;</code> or <code>import case = require('change-case')</code>. This now imports the type information of <code>change-case</code> from this declaration. Sounds brilliant, so what’s the drawback?</p>
<p>You’re a module author and have a dozen of these NPM dependencies. You downloaded all the ambient modules declarations for your dependencies so you can use TypeScript for what it’s good at, making sure you’re using your dependencies correctly. Maybe you used TSD, or you copied the files from DefinitelyTyped manually. Now you need to publish your library so everyone else can use it. But how do you publish those typings so people who use the library don’t need to do all the work you did downloading the typings?</p>
<p>The obvious solution might be to check in and publish the <code>typings/</code> directory (created by <code>tsd</code>) with the package. Fantastic, that was pretty simple. Look again though, how do those typings get referenced in your users projects? It would be creating all your dependencies in your users projects, even though they can’t access them. Talk about runtime inconsistency.</p>
<p>TSD has a concept called <code>tsd link</code>, which references the type definition (<code>typescript.definition</code> in <code>package.json</code>) from the <code>tsd.d.ts</code> file in <code>typings/</code>. That means the TypeScript definition in your module needs to be ambient and can’t just be the output from the TypeScript compiler. This kind of concept resulted in more hacks and tools as <a href="https://github.com/SitePen/dts-generator"><code>dts-generator</code></a>, which takes the TypeScript compiler <code>.d.ts</code> files and wraps them in your modules name so other tools can use them.</p>
<p>Back to the sub-dependency case though, and you’re still being hung out to dry. You could have used <code>dts-generator</code> to generate a single typings file for the library you just wrote, then published it to NPM with <code>typescript.definition</code> (I know <a href="https://github.com/TypeStrong/tsconfig/blob/61bc0ba5997de50432e92d24942cf9d9821f23df/package.json#L6-L8">I did</a>). Inevitability, when someone actually tries to use this the compiler will start to error because the <a href="https://github.com/TypeStrong/atom-typescript/issues/682">sub-dependency typings are missing</a>. But what if we checked in <code>typings/</code> like I mentioned? And our users had them automatically referenced?</p>
<p>Better you don’t. But, if you must, <a href="https://github.com/angular/angular/issues/5395">this is what happens</a>. If your users ever want to use the same module or declarations, you’ll run into conflicts. Even when they aren’t actually there at runtime. On top of this, any sub-dependency typings now introduce their own globals and typings that don’t even exist at runtime in my program.</p>
<p>This can all manifest in a much larger and painful bug. Since everything is an ambient module declaration, there’s no way to confirm that what’s defined in typings is available at runtime. One such example is the ambient typings for <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/es6-promise/es6-promise.d.ts"><code>es6-promise</code></a>, which defines the global <code>Promise</code> class. Not only will the TypeScript compiler error with duplicate symbols when using ES6, this also implies that <code>Promise</code> is available in my runtime. And that’s simply not true, which leads to code which can and will crash on node 0.10 (like I was for <a href="https://travis-ci.org/blakeembrey/popsicle/jobs/88018081#L316">popsicle</a>). Now, isn’t this all the types of bugs I’m not meant to have anymore with TypeScript?</p>
<p>Using global interfaces and variables that don’t exist at runtime to relay information to other dependencies is commonplace in DefinitelyTyped and leads to tight coupling of their definitions. This makes it difficult to revert broken behavior, like our global <code>Promise</code> situation. I spent <a href="https://github.com/DefinitelyTyped/tsd/issues/150">more than six months</a> after I started maintaining TSD trying to solve this problem. I eventually gave up on the approach, but not after I had spent weeks trying to make the TypeScript compiler to detect ambient module typings, follow ambient declarations through a custom type dependency tree that relies on using <code>/// &lt;reference&gt;</code> to work and generate a single non-global polluting bundle.</p>
<h2>The Current</h2>
<p>Fortunately, most of my time on the TSD rewrite was spent solving and not patching the current system. I had built the new version to use external module declaration from the ground up, and only tried to build in support for ambient modules toward the end. External module declarations are those <code>.d.ts</code> files that TypeScript emits when you use <code>tsc</code> with <code>--declaration</code> enabled, so support is already built right into the compiler. After many weeks of approaching the ambient module problem, I decided it would be faster and cleaner to skip it. This decision resulted in a new tool, called <a href="https://github.com/typings/typings"><code>typings</code></a>, to be released.</p>
<p>But what’s the difference between an ambient and external module?</p>
<pre><code class="language-ts"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dot</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span></span>;
<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dotCase</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span></span>;
[...]
</code></pre>
<p>Notice that this snippet is pretty similar to the previous one, but there’s no more <code>declare module &quot;change-case&quot;</code> around the block and I’m exporting the functions directly. This is what makes our typings portable, as we can re-use the same type definition anywhere else under a different names and module resolution strategies. For example, when we use Browserify or Webpack aliases, or with the <code>moduleResolution</code> in TypeScript 1.6.</p>
<p>It’s not enough to just support external module declarations. What does that even mean if the TypeScript compiler can use them? It means that [typings]<a href="https://github.com/typings/typings">typings</a>, an open source CLI, can use a reference to <code>.d.ts</code> files in GitHub or on NPM and have them “just work”, with proper namespaces and no global leaks. If you’re an author now, you might be wondering - how do I use this with my own module adn have things “just work” for my users?</p>
<p>This is where <code>typings.json</code> comes in. Since I was heavily exposed to all the issues with DefinitelyTyped and TSD, I needed to solve <strong>everything</strong>. And typings comes very close to doing just that. A module author no longer needs to check in <code>typings/</code>, but <code>typings.json</code>. This enables the user to use <code>typings</code> themselves and have things resolve automatically. All of your dependencies become properly namespaced and do not pollute your users typings (you aren’t implicitly introducing bugs to your users anymore, which would be bad). Also, typings installation is entirely decentralized and the typings themselves can be downloaded from almost anywhere - GitHub, NPM, Bower and even over HTTP or the filesystem (yes, you can still check them in, but they aren’t ambient anymore).</p>
<p>This decentralization solves the biggest pain point I see with maintaining DefinitelyTyped. How does an author of one typings package maintain their file in DefinitelyTyped when they get notifications on thousands of others? How do you make sure typings maintain quality when you have 1000s to review? The solution in typings is you don’t, the community does. If typings are incorrect, I can just write and install my own from wherever I want, something that TSD doesn’t really allow. There’s no merge or review process you need to wait for (<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/pulls">300+ open pull requests</a>!).</p>
<p>However, decentralization comes with the cost of discoverability. To solve this, a <a href="https://github.com/typings/registry">registry</a> exists that maintains locations of where the best typing can currently be installed from, for any version. If there’s a newer typing, patches, or the old typing author has somehow disappeared, you can replace the entry with your own so people will be directed to your typings from now on. There’s also protections in place as JavaScript packages slowly include their own typings, all to enable authors to continue moving quickly.</p>
<h2>The Future</h2>
<p>The future is fast approaching, a place where there’ll be official standards in place. With the release of typings, there is now collaboration in place with the <a href="https://github.com/typings/meta/issues/3">TypeScript team</a> to solve the consumption of typings. With ideas like <a href="https://github.com/Microsoft/TypeScript/pull/4913">package scopes</a> being merged into the TypeScript compiler, typings can and will be compiled into a package scoped <code>.d.ts</code> file. This will enable module authors to bundle their typings before they publish and the consumer will never have to do anything. And this isn’t too far away from today.</p>
<p>No solution is possible without community support, so please get involved with <a href="https://github.com/typings/typings">typings</a> and ask JavaScript module authors to add completed type definitions to the packages you use. Better yet, open a PR yourself and help them out - they might not even know what TypeScript is.</p>
<h2>Summary</h2>
<p>So, in summary, the current landscape looks something like this:</p>
<ul>
<li>Ambient modules are not portable</li>
<li>TypeScript only outputs external modules</li>
<li>Publishing TypeScript packages is not possible</li>
<li>Maintaining DefinitelyTyped is hard, for contributions and tooling</li>
<li>Typings need simple APIs for IDEs to present developers with warnings and straightforward solutions</li>
</ul>
<p><a href="https://github.com/typings/typings">Typings</a> solves all of this and is currently working on fixing the more obscure use-cases. If you find yourself running into an issue or with more questions, please <a href="https://github.com/typings/typings/issues">open an issue</a> in the <code>typings</code> repository.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Skype Auto Answer with AppleScript]]></title>
            <link>http://blakeembrey.com/articles/2015/06/skype-auto-answer-with-applescript/</link>
            <guid>http://blakeembrey.com/articles/2015/06/skype-auto-answer-with-applescript/</guid>
            <pubDate>Mon, 22 Jun 2015 06:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>After discovering the ability to <a href="/articles/2015/06/facetime-auto-answer-applescript/">auto answer FaceTime</a>, I tried my hand at adapting the script for Skype. I waited a couple of days until my girlfriend had some downtime and patience to call me over and over while I tried to debug the elements on my screen. Eventually I figured out how to select the window, and then the correct button. I did try, unsuccessfully, for a long time to select the button based on the label. If anyone knows how to do this, please leave a comment!</p>
<p>Continuing on, set up is much the same with only the basic code changed. Let’s start again by opening up “Script Editor” and copying this snippet into the editor:</p>
<pre><code class="language-applescript"><span class="hljs-keyword">set</span> contacts <span class="hljs-keyword">to</span> {<span class="hljs-string">"Keyue Bao"</span>}

<span class="hljs-keyword">repeat</span>
  <span class="hljs-keyword">repeat</span> <span class="hljs-keyword">while</span> <span class="hljs-built_in">application</span> <span class="hljs-string">"Skype"</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">running</span>
    <span class="hljs-keyword">tell</span> <span class="hljs-built_in">application</span> <span class="hljs-string">"System Events"</span>
      <span class="hljs-keyword">tell</span> process <span class="hljs-string">"Skype"</span>
        <span class="hljs-keyword">set</span> videoCallWindow <span class="hljs-keyword">to</span> <span class="hljs-keyword">a reference</span> <span class="hljs-keyword">to</span> (<span class="hljs-keyword">first</span> window <span class="hljs-keyword">whose</span> <span class="hljs-built_in">name</span> <span class="hljs-keyword">is</span> <span class="hljs-string">"Incoming Video Call"</span>)

        <span class="hljs-keyword">if</span> videoCallWindow exists <span class="hljs-keyword">then</span>
          <span class="hljs-keyword">set</span> callerId <span class="hljs-keyword">to</span> value <span class="hljs-keyword">of</span> static <span class="hljs-built_in">text</span> <span class="hljs-number">1</span> <span class="hljs-keyword">of</span> videoCallWindow

          <span class="hljs-keyword">if</span> contacts <span class="hljs-keyword">contains</span> callerId <span class="hljs-keyword">then</span>
            click button <span class="hljs-number">2</span> <span class="hljs-keyword">of</span> videoCallWindow
          <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>
        <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>
      <span class="hljs-keyword">end</span> <span class="hljs-keyword">tell</span>
    <span class="hljs-keyword">end</span> <span class="hljs-keyword">tell</span>
    <span class="hljs-built_in">delay</span> <span class="hljs-number">2</span>
  <span class="hljs-keyword">end</span> <span class="hljs-keyword">repeat</span>
  <span class="hljs-built_in">delay</span> <span class="hljs-number">5</span>
<span class="hljs-keyword">end</span> <span class="hljs-keyword">repeat</span>
</code></pre>
<p>So, while Skype is running we try to select the incoming video call window. Of course, this window will only exist when we have a call to answer, so we check that it exists. After that, we grab the caller ID from the text element and check if it matches who we want. Then we click answer. It actually took me a few tried to figure out which index was the answer with video button as it doesn’t follow visual order.</p>
<p>Before we export, change the caller ID. Then, go to <code>File -&gt; Export</code> and save it somewhere you’ll remember. I exported mine to <code>Documents/Scripts/skype-auto-answer</code>.</p>
<p>Next step, let’s navigate to <code>cd ~/Library/LaunchAgents</code> in the Terminal and create our file using <code>vi com.blakeembrey.skype-auto-answer.plist</code>. In vim, you’ll need to press <code>i</code> to go into “insert” mode. Copy and paste the code below, but remember to change the script location to where you just exported to.</p>
<pre><code class="language-xml"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>
<span class="hljs-meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">"1.0"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.blakeembrey.skype-auto-answer<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Program<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/usr/bin/osascript<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>ProgramArguments<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>osascript<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/Users/blakeembrey/Documents/Scripts/skype-auto-answer.scpt<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>RunAtLoad<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KeepAlive<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span>
</code></pre>
<p>And we’re almost done. Let’s exit vim (<code>Esc</code>, <code>:wq</code>, <code>Enter</code>) and get Launchd to pick up our changes.</p>
<pre><code>launchctl load -w com.blakeembrey.skype-auto-answer.plist
</code></pre>
<p>Tada! You might need to accept the accessibility dialog that pops up, but the script will now be running. You can verify this by executing <code>launchctl list | grep skype-auto-answer</code>.</p>
<p>Done!</p>
<p>P.S. If you ever want to unload the script, just execute <code>launchctl unload -w com.blakeembrey.skype-auto-answer.plist</code>, same as you did to load.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[FaceTime Auto Answer]]></title>
            <link>http://blakeembrey.com/articles/2015/06/facetime-auto-answer-applescript/</link>
            <guid>http://blakeembrey.com/articles/2015/06/facetime-auto-answer-applescript/</guid>
            <pubDate>Sat, 20 Jun 2015 06:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I talk with my girlfriend most days. Sometimes multiple times a day. We’re in a long distance relationship and, at times, completely different time zones. One habit we wanted to pick up was being able to see each other at any time.</p>
<p>For this to work, we need to be able to auto answer each others calls. One of us could be busy working, but we still wanted to be able to see each other. After days of exploring how to make this happen, I come up with some solutions:</p>
<ol>
<li>Create new Skype accounts just for each other and enable auto answer on those accounts.</li>
<li>Keep a Google Hangouts room alive that we can both join at any time.</li>
<li>Create our own video chat platform using WebRTC that will fulfil our needs.</li>
</ol>
<p>Being the nerd I am, the third option sounded the most fun! From all my research, however, I was amazed no one had implemented a feature so simple into their product. Each of these options have their own drawbacks.</p>
<ol>
<li>I need to sign in and out between accounts (an issue for us since we work and live on our computers).</li>
<li>Google Hangouts prompts after inactivity and kicks the user from the chat.</li>
<li>Time.</li>
</ol>
<p>Eventually, I stumbled upon the magic bullet - FaceTime has an option built in to auto answer (<code>defaults write com.apple.FaceTime AutoAcceptInvitesFrom -array-add hello@blakeembrey.com</code>). It “works”, but it comes with even more issues. For example, when you receive a call there is a black overlay over the video call which makes visibility difficult. On a second test, we discovered that it rings infinitely. Well, so much for that.</p>
<p>At this point, we gave up and Keyue needed to sleep. I decided to continue research the following day when she was at work (my night time) and discovered some people had written an AppleScript for this years ago. I stayed up until 4am trying to create a new AppleScript, hacking away in a forgiving syntax I had no idea how to use without the use of Google.</p>
<h2>Implementation</h2>
<p>Let’s start by opening the “Script Editor” application. Copy and paste the following code into the editor, changing the caller id check to your desired caller. This the caller that is shown next to the profile image and accept button during ringing. For me, Keyue Bao is a contact so I can use her name. If they aren’t a contact, you’ll need to type the specific email or phone number here.</p>
<pre><code class="language-applescript"><span class="hljs-keyword">set</span> contacts <span class="hljs-keyword">to</span> {<span class="hljs-string">"Keyue Bao"</span>}

<span class="hljs-keyword">repeat</span>
  <span class="hljs-keyword">repeat</span> <span class="hljs-keyword">while</span> <span class="hljs-built_in">application</span> <span class="hljs-string">"FaceTime"</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">running</span>
    <span class="hljs-keyword">tell</span> <span class="hljs-built_in">application</span> <span class="hljs-string">"System Events"</span>
      <span class="hljs-keyword">tell</span> process <span class="hljs-string">"FaceTime"</span>
        <span class="hljs-keyword">set</span> acceptButton <span class="hljs-keyword">to</span> <span class="hljs-keyword">a reference</span> <span class="hljs-keyword">to</span> (button <span class="hljs-string">"Accept"</span> <span class="hljs-keyword">of</span> window <span class="hljs-number">1</span>)

        <span class="hljs-keyword">if</span> acceptButton exists <span class="hljs-keyword">then</span>
          <span class="hljs-keyword">set</span> callerId <span class="hljs-keyword">to</span> value <span class="hljs-keyword">of</span> static <span class="hljs-built_in">text</span> <span class="hljs-number">2</span> <span class="hljs-keyword">of</span> window <span class="hljs-number">1</span>

          <span class="hljs-keyword">if</span> contacts <span class="hljs-keyword">contains</span> callerId <span class="hljs-keyword">then</span>
            click acceptButton
          <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>
        <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>
      <span class="hljs-keyword">end</span> <span class="hljs-keyword">tell</span>
    <span class="hljs-keyword">end</span> <span class="hljs-keyword">tell</span>
    <span class="hljs-built_in">delay</span> <span class="hljs-number">2</span>
  <span class="hljs-keyword">end</span> <span class="hljs-keyword">repeat</span>
  <span class="hljs-built_in">delay</span> <span class="hljs-number">5</span>
<span class="hljs-keyword">end</span> <span class="hljs-keyword">repeat</span>
</code></pre>
<p>The script runs on an infinite loop. There is a delay of 5 seconds when the application is closed and 2 seconds when the application is open. It attempts to select the “answer” button on the screen and, if it exists, it checks the caller id and clicks answer. Pretty simple.</p>
<p>Next we want to export the script for execution. Navigate to <code>File -&gt; Export</code> and save it somewhere you can remember it. For me, it was as <code>Documents/Scripts/facetime-auto-answer</code>. You need this path for the next step.</p>
<p>Let’s create a Launchd script to handle execution on computer start up. Navigate to <code>~/Library/LaunchAgents</code> using Terminal (open Terminal and enter <code>cd ~/Library/LaunchAgents</code>). After that, that’s add our file (below) as <code>com.blakeembrey.facetime-auto-answer.plist</code> (just <code>vi com.blakeembrey.facetime-auto-answer.plist</code> and hit <code>i</code> to switch to insert mode).</p>
<pre><code class="language-xml"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>
<span class="hljs-meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">"1.0"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.blakeembrey.FaceTimeAutoAnswer<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Program<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/usr/bin/osascript<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>ProgramArguments<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>osascript<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/Users/blakeembrey/Scripts/facetime-auto-answer.scpt<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>RunAtLoad<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KeepAlive<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span>
</code></pre>
<p>Make sure you adjust the argument above to the correct path from the export step. Once it’s correct, exit back to the terminal (<code>Esc</code>, <code>:wq</code>, <code>Enter</code>) and make Launchd pick up the new script without rebooting.</p>
<pre><code>launchctl load -w com.blakeembrey.facetime-auto-answer.plist
</code></pre>
<p>You’ll need to accept the accessibility dialog (open system preferences and enable access). We can quickly check that the script is running by entering <code>launchctl list | grep facetime-auto-answer</code>. And we’re done.</p>
<h2>Conclusion</h2>
<p>FaceTime is really nice for video chatting. It disables automatically when you’re in a different window (I regularly use up to 6 windows during a work day for different tasks) and the interface is very simple to use. The video quality is great and, when the call drops temporarily it will automatically join the call again (with the video still enabled - looking at you Skype!). On top of that, it has a low CPU footprint, especially compared with Skype.</p>
<p>However, there’s a couple of major issues with it. First off, it makes the rest of the computer quieter which makes it difficult to work or do anything else while on the call. For example, we can’t really watch a movie together (audio is dimmed). The second is a feature request. I would love the “floating” window feature from Skype.</p>
<p>And we’re done. I’m going to tweak the same script to auto answer Skype next. Hopefully this comes built in with future versions of video chat clients. It’s such a basic feature that it’s exclusion makes me ponder the disconnect between the teams creating the software and reality.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Reference the Constructor of a Type in TypeScript (Generically)]]></title>
            <link>http://blakeembrey.com/articles/2015/04/typescript-constructor-of-type/</link>
            <guid>http://blakeembrey.com/articles/2015/04/typescript-constructor-of-type/</guid>
            <pubDate>Tue, 28 Apr 2015 04:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Although not initially intuitive, I run into this issue while documenting the <a href="http://martyjs.org/api/registry/index.html#register"><code>register</code></a> function in Marty.js. I didn’t realise a solution, so I reached out to a friend who provided me with this beauty.</p>
<pre><code class="language-ts">function register&lt;T&gt;(clazz: { new (...args: any[]): T }): T;
</code></pre>
<p>And it works brilliantly! But what’s this even doing? I’ve just created a generic function that accepts a constructor function of any type and returns that type. No need to do type coercion. It turned out perfectly for this situation, where I can register a <code>Store</code>, <code>Queries</code>, <code>ActionCreators</code> and more!</p>
<p>You can also write this with a slightly different syntax such as <code>new (...args: any[]) =&gt; T</code>. There’s no real difference here.</p>
<p>Although it doesn’t apply here, we can also look how we might accept more specific types of constructors.</p>
<pre><code class="language-ts">// Using `typeof`...

class X {
  method (): void {}
}

function create (C: typeof X) {
  return new C()
}

create(X)

// Using an inline parameter...

interface Y {
  method(): void
}

function create2 (C: new (...args: any[]) =&gt; Y) {
  return new C()
}

class Z implements Y {
  method(): void {}
}

create2(Z)
</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Syntax Highlighted Diffs For Everyone]]></title>
            <link>http://blakeembrey.com/articles/2014/12/syntax-highlighting-blog-diff-support/</link>
            <guid>http://blakeembrey.com/articles/2014/12/syntax-highlighting-blog-diff-support/</guid>
            <pubDate>Fri, 26 Dec 2014 05:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>This is a recount, of sorts, on how I added syntax highlighting to diffs on my blog and turned it into a module for anyone to use. The module is made for syntax highlighting Markdown files straight out of the box (supporting <a href="https://github.com/chjj/marked">marked</a> style highlight callbacks). Check out GitHub and npm for the final result.</p>
<p>Two weeks ago, <a href="https://github.com/blog/1932-syntax-highlighted-diffs">GitHub announced</a> a new feature - syntax highlighting of diffs. A couple of months earlier, I wrote a detailed <a href="/articles/2014/09/building-a-blog-with-metalsmith/">introduction to Metalsmith</a> where I used diffs to show the readers what changed at each step. Before I published it I discovered that the diff highlighting by <a href="https://highlightjs.org/">Highlight.js</a> left the addition and deletion marks inline, which degraded the reading experience. Determined to push live, I forged through and <a href="https://github.com/blakeembrey/blakeembrey.com/commit/206bbb0e047bfe24f92d25d847986ebed6548e06#diff-15ac5cd3ab657e091ee4aa5456e97ddeR68">manually highlighted each line</a> myself.</p>
<p>Fixing that monstrosity sat on my backlog for months. Finally, I gathered enough time and mental bandwidth to go back and figure out a better solution. It took three complete rewrites over the course of a conference (and then some) to come up with the current solution. This article is more about the thought process over the week than it is about implementing this yourself. That part should be easy for you, just install from npm.</p>
<h2>First Attempt</h2>
<p>The first attempt was simple. I googled around and discovered very little information on the topic, so I implemented the only way I saw mentioned. I syntax highlighted the code first, then I run over the generated markup and matched for diff-like syntax (<a href="https://github.com/blakeembrey/blakeembrey.com/blob/dfcedefc853cc01ba33539c9b9b2576b1c23aceb/config/markdown.js">code here</a>) and wrap those lines in <code>&lt;span&gt;</code>s based on the type of change.</p>
<p>I knew it wouldn’t work everywhere, but it allowed me to refactor the original article and remove all the horrible markup. Plus it was simple, I was done within the hour. I opted to use the existing language tag in Markdown to indicate that it was also a diff, since I couldn’t come up with a cleaner solution (E.g. <code>&lt;language&gt;.diff</code>). But I still wanted a something smarter, something that would work everywhere. This solution had faults when the diff markup messed with the syntax highlighting. So I continued.</p>
<h2>Second Attempt</h2>
<p>The next attempt was more complex. I figured I could match each line type (addition/deletion/metadata/null) and group them together. Then, I would highlight the addition and deletions separately (with null changes filling the spaces). With the two syntax highlighting results, I could go over the code line by line and pick from either the addition or deletion result based on the line type. However, <a href="https://github.com/blakeembrey/blakeembrey.com/blob/1d0a377e9cdea332045bb6f6074fe29848920746/config/markdown.js">this code</a> was brittle. What if a <code>&lt;span&gt;</code> ran over multiple lines?</p>
<h3>Attempt 2.5</h3>
<p>I kept at this solution for a while longer and I added a regex to match open and closing <code>&lt;span&gt;</code>s. Then, I pushed each open <code>&lt;span&gt;</code> onto an array and popped it off with each closing <code>&lt;/span&gt;</code>. If there were any left in each section, I’d close them with a <code>&lt;/span&gt;</code> and open them again in the next section. This was brilliant and clever, I thought, and I needed to publish it. In fact, it wasn’t until I was refactoring this into a module that I realised what a deep grave I was digging myself.</p>
<h2>Final Attempt</h2>
<p>My third and final attempt started where the last one left off. I knew the grouping was the correct approach, but the highlighter needed a better approach. I recalled that I was only using the <code>value</code> property of the returned syntax highlighting object, so I thought it was about time to read some documentation. Lo and behold, I discovered the <a href="http://highlightjs.readthedocs.org/en/latest/api.html#highlight-name-value-ignore-illegals-continuation">third and fourth arguments</a> of Highlight.js.</p>
<p>The third argument was interesting, I could try to ignore illegal characters in the code. I though this might work when the syntax highlighter started in an invalid position. The holy grail, however, was the fourth argument. It would accept a continuation stack, which meant I could probably leave the syntax highlighting incomplete and start it again later. I hoped that this would also close the <code>&lt;/span&gt;</code>s for me, and it did!</p>
<p>I used the previous grouping solution and iterated over each group keeping track of the previously highlighted stack (both addition or deletion). It worked out perfectly and I wrapped each highlighted group in a <code>&lt;span&gt;</code> with its diff type as the class (E.g. <code>&lt;span class=&quot;diff-addition&quot;&gt;</code>). I attempted to use the <code>ignore_illegals</code> argument, but it failed in a JSON example (starting at a property of an object) so I had to disable it again.</p>
<p>The <a href="https://github.com/blakeembrey/highlighter">result of my labour</a> can be viewed below. Diff syntax highlighting in all its glory - the exact same block of code GitHub uses in <a href="https://github.com/blog/1932-syntax-highlighted-diffs">their example</a>!</p>
<pre><code class="language-cs.diff"><span class="diff-chunk">@@ -164,29 +164,34 @@</span>
<span class="diff-null">        [Fact]
        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddRangeBalanceTest</span>(<span class="hljs-params"></span>)
        </span>{</span>
<span class="diff-addition">            <span class="hljs-keyword">int</span> randSeed = (<span class="hljs-keyword">int</span>)DateTime.Now.Ticks;
            Console.WriteLine(<span class="hljs-string">"Random seed: {0}"</span>, randSeed);
            <span class="hljs-keyword">var</span> random = <span class="hljs-keyword">new</span> Random(randSeed);

            <span class="hljs-keyword">int</span> expectedTotalSize = <span class="hljs-number">0</span>;
</span>
<span class="diff-null">            <span class="hljs-keyword">var</span> list = ImmutableList&lt;<span class="hljs-keyword">int</span>&gt;.Empty;
</span>
<span class="diff-deletion">            <span class="hljs-comment">// Add batches of 32, 128 times, giving 4096 items</span>
            <span class="hljs-keyword">int</span> batchSize = <span class="hljs-number">32</span>;</span>
<span class="diff-addition">            <span class="hljs-comment">// Add some small batches, verifying balance after each</span></span>
<span class="diff-null">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">128</span>; i++)
            {</span>
<span class="diff-deletion">                list = list.AddRange(Enumerable.Range(batchSize * i + <span class="hljs-number">1</span>, batchSize));
                list.Root.VerifyBalanced();</span>
<span class="diff-addition">                <span class="hljs-keyword">int</span> batchSize = random.Next(<span class="hljs-number">32</span>);
                Console.WriteLine(<span class="hljs-string">"Adding {0} elements to the list"</span>, batchSize);
                list = list.AddRange(Enumerable.Range(expectedTotalSize+<span class="hljs-number">1</span>, batchSize));
                VerifyBalanced(list);
                expectedTotalSize += batchSize;</span>
<span class="diff-null">            }

            <span class="hljs-comment">// Add a single large batch to the end</span></span>
<span class="diff-deletion">            list = list.AddRange(Enumerable.Range(<span class="hljs-number">4097</span>, <span class="hljs-number">61440</span>));
            Assert.Equal(Enumerable.Range(<span class="hljs-number">1</span>, <span class="hljs-number">65536</span>), list);

            list.Root.VerifyBalanced();

            <span class="hljs-comment">// Ensure that tree height is no more than 1 from optimal</span>
            <span class="hljs-keyword">var</span> root = list.Root <span class="hljs-keyword">as</span> IBinaryTree&lt;<span class="hljs-keyword">int</span>&gt;;</span>
<span class="diff-addition">            <span class="hljs-keyword">int</span> largeBatchSize = random.Next(<span class="hljs-number">32768</span>) + <span class="hljs-number">32768</span>;
            Console.WriteLine(<span class="hljs-string">"Adding {0} elements to the list"</span>, largeBatchSize);
            list = list.AddRange(Enumerable.Range(expectedTotalSize + <span class="hljs-number">1</span>, largeBatchSize));
            VerifyBalanced(list);
            expectedTotalSize += largeBatchSize;</span>
<span class="diff-null"></span>
<span class="diff-deletion">            <span class="hljs-keyword">var</span> optimalHeight = Math.Ceiling(Math.Log(root.Count, <span class="hljs-number">2</span>));</span>
<span class="diff-addition">            Assert.Equal(Enumerable.Range(<span class="hljs-number">1</span>, expectedTotalSize), list);</span>
<span class="diff-deletion">            Console.WriteLine(<span class="hljs-string">"Tree depth is {0}, optimal is {1}"</span>, root.Height, optimalHeight);
            Assert.InRange(root.Height, optimalHeight, optimalHeight + <span class="hljs-number">1</span>);</span>
<span class="diff-addition">            list.Root.VerifyHeightIsWithinTolerance();</span>
<span class="diff-null">        }

        [Fact]
</span></code></pre>
<p>The result was extremely satisfying. I coded and refactored over the course of a few days to discover a brilliant solution built directly into the library for me. Is this the final solution, or will there still more to refactor?</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building a Blog with Metalsmith]]></title>
            <link>http://blakeembrey.com/articles/2014/09/building-a-blog-with-metalsmith/</link>
            <guid>http://blakeembrey.com/articles/2014/09/building-a-blog-with-metalsmith/</guid>
            <pubDate>Sat, 04 Oct 2014 17:15:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><a href="http://www.metalsmith.io/">Metalsmith</a> is a new addition to static site generator space, only released at the beginning of this year. It’s written in JavaScript and provides an extremely simple plugin system for composing files using middleware. The fact that everything is a plugin makes it incredibly easy to understand what is happening under the hood and extend it when you need to add new functionality.</p>
<h2>Getting Started</h2>
<p>For this tutorial, I converted the blog you’re currently reading to Metalsmith. To start, we’ll create a new project directory, then create a <code>src</code> directory inside of that. The first thing we need to save the snippet below into a <code>package.json</code>, which holds all our blog dependencies.</p>
<pre><code class="language-json">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"example-blog"</span>,
  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"0.0.0"</span>,
  <span class="hljs-attr">"private"</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">"description"</span>: <span class="hljs-string">"Example blog."</span>,
  <span class="hljs-attr">"author"</span>: <span class="hljs-string">"Blake Embrey"</span>,
  <span class="hljs-attr">"license"</span>: <span class="hljs-string">"MIT"</span>
}
</code></pre>
<p>Now that you have a valid <code>package.json</code>, you will need to install <code>metalsmith</code> locally to get started. Execute <code>npm install metalsmith --save</code> and you’ll notice it’s been automatically added to the <code>package.json</code>. With that as the initial dependency, you need to create a <code>build.js</code> file with the content below.</p>
<pre><code class="language-javascript"><span class="hljs-keyword">var</span> metalsmith = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith'</span>);

metalsmith(__dirname)
  .source(<span class="hljs-string">'src'</span>)
  .destination(<span class="hljs-string">'build'</span>)
  .build(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{
    <span class="hljs-keyword">if</span> (err) {
      <span class="hljs-keyword">throw</span> err;
    }
  });
</code></pre>
<h2>Adding articles</h2>
<p>Now you have a working Metalsmith instance - it just doesn’t do anything yet. There aren’t any files in <code>src</code> and no plugins are being used to process data yet. First things first, let’s create an <code>articles</code> (or <code>posts</code>, etc.) directory under <code>src</code>. This structure will a part of our url (E.g. <code>/articles/...</code>). Inside the directory you created, you need to create your first markdown file. The snippet below is a very simple article with metadata.</p>
<pre><code>---
title: Example title.
date: 2014-09-29 23:00
author: Blake Embrey
template: article.jade
---

Example content.
</code></pre>
<p>Nothing exciting so far. If you build the blog by executing <code>node build.js</code>, you’ll see a new <code>build</code> directory with the contents copied from the <code>src</code> directory. However, if you look at your markdown article you’ll notice the metadata is missing. That is because the parts between the three dashes at the beginning is YAML font-matter (a type of associated metadata). We can access metadata from within any plugin or template, and it can be added to the beginning of any file and automatically be parsed.</p>
<h2>Processing Markdown</h2>
<p>The next step would be to add markdown processing into our build script. This will allow us to turn the all our markdown into HTML documents. To do this, we’ll install the <a href="https://github.com/segmentio/metalsmith-markdown">metalsmith-markdown</a> (using <code>npm install metalsmith-markdown --save</code>). If we also want syntax highlighting of code snippets, we can use <code>highlight.js</code> (or <code>highlighter</code> which offers a simple abstraction for markdown - <code>npm install highlighter --save</code>).</p>
<pre><code class="language-javascript.diff"><span class="diff-null"><span class="hljs-keyword">var</span> metalsmith  = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith'</span>);</span>
<span class="diff-addition"><span class="hljs-keyword">var</span> markdown    = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-markdown'</span>);
<span class="hljs-keyword">var</span> highlighter = <span class="hljs-built_in">require</span>(<span class="hljs-string">'highlighter'</span>);</span>
<span class="diff-null">
metalsmith(__dirname)
  .source(<span class="hljs-string">'src'</span>)</span>
<span class="diff-addition">  .use(markdown({
    <span class="hljs-attr">gfm</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">tables</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">highlight</span>: highlighter()
  }))</span>
<span class="diff-null">  .destination(<span class="hljs-string">'build'</span>)
</span></code></pre>
<p>Running your build script (<code>node build.js</code>) will now result in your markdown file becoming HTML. If you add a code block fenced by three backticks, you’ll also get to see syntax highlighting automatically applied (in HTML, still need to add the CSS - consider starting with a theme from the <a href="https://highlightjs.org/static/demo/">highlight.js demo</a>).</p>
<h2>Templates</h2>
<p>Now it’s time to start making things look pretty by adding templates. Let’s start out with the article template, since you already have an article to work with. Start by installing <a href="https://github.com/segmentio/metalsmith-templates">metalsmith-templates</a> (<code>npm install metalsmith-templates --save</code>) and creating a <code>templates</code> directory. Create your first template file inside the templates directory. Since I’m using <a href="https://github.com/visionmedia/jade">jade</a> I’ve created an <code>article.jade</code> template. Here’s a simple example in Jade:</p>
<pre><code class="language-jade">html(lang='en')
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    meta(name='viewport', content='width=device-width')
    title= title
  body
    h1= title
    div.timestamp= date
    article!= contents
</code></pre>
<p>With the template created, you need to include the plugin. And since I’m using jade, I’ll need to install <code>jade</code> using <code>npm install jade --save</code> (for Handlebars use <code>npm install handlebars --save</code> and change the engine below). Let’s update our <code>build.js</code> with the code below.</p>
<pre><code class="language-javascript.diff"><span class="diff-null"><span class="hljs-keyword">var</span> metalsmith = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith'</span>);
<span class="hljs-keyword">var</span> markdown   = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-markdown'</span>);
<span class="hljs-keyword">var</span> highlight  = <span class="hljs-built_in">require</span>(<span class="hljs-string">'highlight.js'</span>);</span>
<span class="diff-addition"><span class="hljs-keyword">var</span> templates  = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-templates'</span>);</span>
<span class="diff-null">
metalsmith(__dirname)</span>
<span class="diff-chunk">@@ ... @@</span>
<span class="diff-addition">  .use(templates({
    <span class="hljs-attr">engine</span>: <span class="hljs-string">'jade'</span>,
    <span class="hljs-attr">directory</span>: <span class="hljs-string">'templates'</span>
  }))</span>
<span class="diff-null">  .destination(<span class="hljs-string">'build'</span>)
</span></code></pre>
<p>Running <code>node build.js</code> again will give you a complete HTML file in place of our markdown file. However, if you’re using a different template file you will need to update the markdown metadata. In the template file you have access to the variables such as <code>contents</code>, <code>date</code> and <code>title</code> without having to define them. This is because the metadata is coming from our inline definition and <code>contents</code> is our files content. All plugins can interact, manipulate and add to this data.</p>
<h2>Pretty Permalinks</h2>
<p>You can add permalinks to your blog by using <a href="https://github.com/segmentio/metalsmith-permalinks">metalsmith-permalinks</a> (<code>npm install metalsmith-permalinks --save</code>). Although you have the option for setting a pattern to rewrite URLs, I opted to use it without any options set. This is so it’ll just fix up all my paths to look cleaner anyway, and add the fancy <code>path</code> property to the files metadata.</p>
<pre><code class="language-javascript.diff"><span class="diff-chunk">@@ ... @@</span>
<span class="diff-null"><span class="hljs-keyword">var</span> highlight  = <span class="hljs-built_in">require</span>(<span class="hljs-string">'highlight.js'</span>);
<span class="hljs-keyword">var</span> templates  = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-templates'</span>);</span>
<span class="diff-addition"><span class="hljs-keyword">var</span> permalinks = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-permalinks'</span>);</span>
<span class="diff-null">
metalsmith(__dirname)</span>
<span class="diff-chunk">@@ ... @@</span>
<span class="diff-addition">  .use(permalinks())</span>
<span class="diff-null">  .use(templates({
    <span class="hljs-attr">engine</span>: <span class="hljs-string">'jade'</span>,
    <span class="hljs-attr">directory</span>: <span class="hljs-string">'templates'</span>
  }))
  .destination(<span class="hljs-string">'build'</span>)
</span></code></pre>
<h2>Collections</h2>
<p>Perfect, so far we’ve got nice fancy URLs and blog posts rendering. Next we’ll want to group all the articles together into a collection for rendering on the homepage. This also links the posts between each other so we can do things like “next” and “previous” links. As you’ve probably realised, you can install a plugin for this purpose - <a href="https://github.com/segmentio/metalsmith-collections">metalsmith-collections</a> using <code>npm install metalsmith-collections --save</code>. Once installed, add it to the <code>build.js</code>.</p>
<pre><code class="language-javascript.diff"><span class="diff-chunk">@@ ... @@</span>
<span class="diff-null"><span class="hljs-keyword">var</span> permalinks  = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-permalinks'</span>);</span>
<span class="diff-addition"><span class="hljs-keyword">var</span> collections = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-collections'</span>);</span>
<span class="diff-null">
metalsmith(__dirname)
  .source(<span class="hljs-string">'src'</span>)</span>
<span class="diff-addition">  .use(collections({
    <span class="hljs-attr">articles</span>: {
      <span class="hljs-attr">pattern</span>: <span class="hljs-string">'articles/**/*.md'</span>,
      <span class="hljs-attr">sortBy</span>: <span class="hljs-string">'date'</span>,
      <span class="hljs-attr">reverse</span>: <span class="hljs-literal">true</span>
    }
  }))</span>
<span class="diff-chunk">@@ ... @@</span>
<span class="diff-null"></span></code></pre>
<p>The snippet above will match all markdown files in the <code>articles</code> directory, then sort them in chronological order with the most recent one at the beginning - just like a blog. The collection itself is stored as global Metalsmith metadata under <code>collections.articles</code>. Just make sure you add the collections plugin before our templates and markdown plugins since they always run in order.</p>
<h2>Homepage</h2>
<p>Now that we have a collection of all our posts, let’s create a homepage. Using your template engine of choice, you can add a new template file to the <code>templates</code> directory. For example, I’m creating <code>index.jade</code> like below.</p>
<pre><code class="language-jade">html(lang='en')
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    meta(name='viewport', content='width=device-width')
    title= 'Home'
  body
    each article in collections.articles
      article.content-article
        header
          span.timestamp= article.date
          h2
            a(href='/' + article.path)= article.title
</code></pre>
<p>Now we’re talking! Let’s render this template by creating an <code>index.html</code> file in the root of our <code>src</code> directory. This will simply act as metadata for rendering our template, as below.</p>
<pre><code>---
template: index.jade
---
</code></pre>
<p>With that complete, you can run the build again (<code>node build</code>) and stare in awe at your beautiful homepage. At this point you might want to start serving the <code>build</code> folder locally too, so I run <code>npm install -g serve</code> and then used <code>serve build</code> to view the directory.</p>
<h2>Adding Global Metadata</h2>
<p>You may have noticed that it’d be handy to add some generic metadata or modules to reuse in templates. I hear you, so you can install <a href="https://github.com/aymericbeaumet/metalsmith-define">metalsmith-define</a> (<code>npm install metalsmith-define</code>) for this. With that installed, you can now define global metadata anywhere in the metalsmith middleware stack.</p>
<pre><code class="language-javascript.diff"><span class="diff-chunk">@@ ... @@</span>
<span class="diff-null"><span class="hljs-keyword">var</span> collections = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-collections'</span>);</span>
<span class="diff-addition"><span class="hljs-keyword">var</span> define      = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-define'</span>);</span>
<span class="diff-null">
metalsmith(__dirname)
  .source(<span class="hljs-string">'src'</span>)</span>
<span class="diff-addition">  .use(define({
    <span class="hljs-attr">blog</span>: {
      <span class="hljs-attr">url</span>: <span class="hljs-string">'http://blakeembrey.com'</span>,
      <span class="hljs-attr">title</span>: <span class="hljs-string">'Blake Embrey'</span>,
      <span class="hljs-attr">description</span>: <span class="hljs-string">'Hello world.'</span>
    },
    <span class="hljs-attr">owner</span>: {
      <span class="hljs-attr">url</span>: <span class="hljs-string">'http://blakeembrey.me'</span>,
      <span class="hljs-attr">name</span>: <span class="hljs-string">'Blake Embrey'</span>
    },
    <span class="hljs-attr">moment</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">'moment'</span>)
  }))</span>
<span class="diff-null">  .use(collections({
    <span class="hljs-attr">articles</span>: {
      <span class="hljs-attr">pattern</span>: <span class="hljs-string">'articles/**/*.md'</span>,
      <span class="hljs-attr">sortBy</span>: <span class="hljs-string">'date'</span>,
      <span class="hljs-attr">reverse</span>: <span class="hljs-literal">true</span>
    }
  }))</span>
<span class="diff-chunk">@@ ... @@</span>
<span class="diff-null"></span></code></pre>
<p>With the above, I have defined some information about the blog and the owner. I also added <a href="http://momentjs.com/">moment</a> (<code>npm install moment --save</code>) because it’ll be handy for formatting our dates. I might quickly go back to our article and homepages templates now and wrap our date in <code>moment(date).format('MMMM D, YYYY')</code> for prettier dates. In Handlebars, you can create a <code>formatDate</code> helper and use moment that way.</p>
<h2>Pagination</h2>
<p>Wow, we’re nearly done already! Let’s add the one thing every good blog deserves, pagination. To get started, install <a href="https://github.com/blakeembrey/metalsmith-pagination">metalsmith-pagination</a> (<code>npm install metalsmith-pagination</code>), it works with any array structure and integrates with templates. We can now delete <code>index.md</code> from the <code>src</code> directory as the plugin will generate it for us (using <code>first: 'index.html</code>).</p>
<pre><code class="language-javascript.diff"><span class="diff-chunk">@@ ... @@</span>
<span class="diff-null"><span class="hljs-keyword">var</span> define      = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-define'</span>);</span>
<span class="diff-addition"><span class="hljs-keyword">var</span> pagination  = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-pagination'</span>);</span>
<span class="diff-null"></span>
<span class="diff-chunk">@@ ... @@</span>
<span class="diff-null">  .use(collections({
    <span class="hljs-attr">articles</span>: {
      <span class="hljs-attr">pattern</span>: <span class="hljs-string">'articles/**/*.md'</span>,
      <span class="hljs-attr">sortBy</span>: <span class="hljs-string">'date'</span>,
      <span class="hljs-attr">reverse</span>: <span class="hljs-literal">true</span>
    }
  }))</span>
<span class="diff-addition">  .use(pagination({
    <span class="hljs-string">'collections.articles'</span>: {
      <span class="hljs-attr">perPage</span>: <span class="hljs-number">5</span>,
      <span class="hljs-attr">first</span>: <span class="hljs-string">'index.html'</span>,
      <span class="hljs-attr">path</span>: <span class="hljs-string">'page/:num/index.html'</span>,
      <span class="hljs-attr">template</span>: <span class="hljs-string">'index.jade'</span>
    }
  }))</span>
<span class="diff-chunk">@@ ... @@</span>
<span class="diff-null"></span></code></pre>
<p>We can set a limit of files per page, the path to all pages, an alternative first page location, and the template for rendering the files. With this defined, you’ll need to make some tweaks and improvements to the <code>index.jade</code> template.</p>
<pre><code class="language-jade.diff"><span class="diff-null">html(lang='en')
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    meta(name='viewport', content='width=device-width')
    title= 'Home'
  body</span>
<span class="diff-deletion">    each article in collections.articles</span>
<span class="diff-addition">    each article in pagination.files</span>
<span class="diff-null">      article.content-article
        header
          span.timestamp= moment(article.date).format('MMMM D, YYYY')
          h2
            a(href='/' + article.path)= article.title</span>
<span class="diff-addition">  nav
    if pagination.previous
      a.btn(href='/' + pagination.previous.path)
        | Newer
    if pagination.next
      a.btn(href='/' + pagination.next.path)
        | Older</span>
<span class="diff-null"></span></code></pre>
<p>Notice that the loop has changed to iterate over <code>pagination.files</code> instead. Also “next” and “previous” buttons have been added to the homepage. For the plugin to work properly, it needs to be included after the collections plugin, but before the permalinks and templates plugins. This works because we need access to the collections metadata in the plugin, but need the generated files to have a path and content created using templates.</p>
<h2>Article Snippets</h2>
<p>Another thing that all good blogs seem to have are content snippets. For this, you’ll install <a href="https://github.com/blakeembrey/metalsmith-snippet">metalsmith-snippet</a> which allows you to access a short snippet of the HTML files in templates. Let’s include the plugin in the <code>build.js</code> file.</p>
<pre><code class="language-javascript.diff"><span class="diff-chunk">@@ ... @@</span>
<span class="diff-null"><span class="hljs-keyword">var</span> paginate    = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-collections-paginate'</span>);</span>
<span class="diff-addition"><span class="hljs-keyword">var</span> snippet     = <span class="hljs-built_in">require</span>(<span class="hljs-string">'metalsmith-snippet'</span>);</span>
<span class="diff-null"></span>
<span class="diff-chunk">@@ ... @@</span>
<span class="diff-addition">  .use(snippet())</span>
<span class="diff-null">  .use(permalinks())
  .use(templates({
    <span class="hljs-attr">engine</span>: <span class="hljs-string">'jade'</span>,
    <span class="hljs-attr">directory</span>: <span class="hljs-string">'templates'</span>
  }))</span>
<span class="diff-chunk">@@ ... @@</span>
<span class="diff-null"></span></code></pre>
<p>This will automatically generate a snippet for all the articles based on a number of characters. Make sure it comes after the markdown parsing is done though. With this enabled, we can add <code>article.snippet</code> to the homepage template and print out article summaries.</p>
<h2>Enable XML Feed</h2>
<p>Next up, we will enable an XML feed for the blog. This will allow people to subscribe to the blog for new articles in feed readers. To do this, you’ll need to create a template for our feed. Here’s my <code>feed.jade</code> template:</p>
<pre><code class="language-jade">doctype xml
rss(version='2.0',
    xmlns:content='http://purl.org/rss/1.0/modules/content/',
    xmlns:wfw='http://wellformedweb.org/CommentAPI/',
    xmlns:dc='http://purl.org/dc/elements/1.1/'
    xmlns:atom='http://www.w3.org/2005/Atom')
  channel
    title= blog.title
    atom:link(href=blog.url + '/feed.xml', rel='self', type='application/rss+xml')
    link= blog.url
    description= blog.description
    pubDate= moment(date).format('ddd, DD MMM YYYY HH:mm:ss ZZ')
    language en
    for article in collections.articles
      - var permalink = blog.url + '/' + article.path
      item
        title= article.title
        link= permalink
        pubDate= moment(article.date).format('ddd, DD MMM YYYY HH:mm:ss ZZ')
        guid(isPermaLink='true')= permalink
        author= article.author
        description= article.snippet
</code></pre>
<p>The snippet above is creating a new XML document. We add a bunch of metadata properties to the XML feed for describing various things, then iterate over all the articles and output each article as an XML <code>item</code>. The one new thing you might notice is the global <code>date</code> variable, which is added by <a href="https://github.com/segmentio/metalsmith-build-date">metalsmith-build-date</a> (<code>npm install metalsmith-build-date</code> and <code>.use(date())</code>). For this template to render, we will create a <code>feed.xml</code> in the <code>src</code> directory with the content below.</p>
<pre><code>---
template: feed.jade
---
</code></pre>
<h2>Adding Comments</h2>
<p>One important aspect of a blog is having a place for readers to leave their comments and thoughts, with the goal of continuing the discussion beyond the original article. For a static site, our comment systems are little more limited to JavaScript implementations that provide their own backend for storage. Personally, I tend to gravitate toward <a href="http://disqus.com/">disqus</a>. Let’s add their snippet to the bottom of <code>article.jade</code>.</p>
<pre><code class="language-jade">div#disqus_thread

script.
  //- Disqus code snippet
  (function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//blakeembrey.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</code></pre>
<h2>Deploying to Github Pages</h2>
<p>Now that we’ve got our static site running, we need to find a way to distribute it to the masses. We can host it anywhere statically without any hassle, but I opted to use <a href="https://pages.github.com/">Github Pages</a>. For this to work I added a <code>CNAME</code> file to the <code>src</code> directory - this is needed for Github to allow a custom domain.</p>
<pre><code>blakeembrey.com
</code></pre>
<p>Next, I created a simple deploy script and added it to my <code>package.json</code>.</p>
<pre><code class="language-json.diff"><span class="diff-null">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"example-blog"</span>,
  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"0.0.0"</span>,
  <span class="hljs-attr">"private"</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">"description"</span>: <span class="hljs-string">"Example blog."</span>,</span>
<span class="diff-addition">  <span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"build"</span>: <span class="hljs-string">"node build.js"</span>,
    <span class="hljs-attr">"deploy"</span>: <span class="hljs-string">"npm run build &amp;&amp; cd build &amp;&amp; git init . &amp;&amp; git add . &amp;&amp; git commit -m \"Deploy\"; git push \"git@github.com:blakeembrey/blakeembrey.com.git\" master:gh-pages --force &amp;&amp; rm -rf .git"</span>
  },</span>
<span class="diff-null">  <span class="hljs-attr">"author"</span>: <span class="hljs-string">"Blake Embrey"</span>,
  <span class="hljs-attr">"license"</span>: <span class="hljs-string">"MIT"</span>
}
</span></code></pre>
<p>For the build script above to work for you, you’ll need to change the repository (<code>blakeembrey/blakeembrey.com</code>) to your Github repository.</p>
<h2>Extra Goodies</h2>
<p>I also implemented a couple of bonus things in this blog during development - <a href="https://github.com/esundahl/metalsmith-autoprefixer">metalsmith-autoprefixer</a> for adding browser prefixes to my CSS and <a href="https://github.com/aymericbeaumet/metalsmith-redirect">metalsmith-redirect</a> for maintaining backwards compatibility with my old URLs. Check out the <a href="http://www.metalsmith.io/">Metalsmith homepage</a> to discover more great plugins.</p>
<h2>Live!</h2>
<p>And we’re done, let’s get this blog live. All we need to do now is execute <code>npm run deploy</code>, which will run the build and deploy scripts and push to Github. All code and content for this blog and article is <a href="https://github.com/blakeembrey/blakeembrey.com">open source</a>, so feel free to browse for more ideas.</p>
]]></content:encoded>
        </item>
    </channel>
</rss>